(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "../shared/src/file-provider/interfaces.ts":
/*!*************************************************!*\
  !*** ../shared/src/file-provider/interfaces.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// From directory-tree npm package
class DirectoryTree {
    constructor() {
        this.location = FileLocation.MasterJob;
    }
}
exports.DirectoryTree = DirectoryTree;
class DirectoryTreeFile extends DirectoryTree {
    constructor() {
        super(...arguments);
        this.type = "file";
    }
}
exports.DirectoryTreeFile = DirectoryTreeFile;
class DirectoryTreeDirectory extends DirectoryTree {
    constructor() {
        super(...arguments);
        this.type = "directory";
    }
}
exports.DirectoryTreeDirectory = DirectoryTreeDirectory;
exports.isValidDirectoryTree = (dirTree) => typeof dirTree !== "undefined" &&
    dirTree !== null &&
    typeof dirTree.path !== "undefined";
var FileLocation;
(function (FileLocation) {
    FileLocation["MasterJob"] = "master-job";
    FileLocation["MasterTemplate"] = "master-template";
    FileLocation["MasterPrivate"] = "master-private";
    FileLocation["MasterPublic"] = "master-public";
    FileLocation["S3"] = "s3";
    FileLocation["GCS"] = "gcs";
    FileLocation["URL"] = "url";
    FileLocation["None"] = "none";
})(FileLocation = exports.FileLocation || (exports.FileLocation = {}));
exports.instanceOfLocalStorageConfig = (obj) => typeof obj.publicDir === "string" &&
    typeof obj.privateDir === "string" &&
    typeof obj.jobDir === "string" &&
    typeof obj.templateDir === "string";


/***/ }),

/***/ "../shared/src/job/job-base.ts":
/*!*************************************!*\
  !*** ../shared/src/job/job-base.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const message_api_1 = __webpack_require__(/*! ../message-api */ "../shared/src/message-api/index.ts");
const interfaces_1 = __webpack_require__(/*! ../file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
class JobProcessParams {
    constructor() {
        this.log = true;
        this.progressIncrement = true;
        this.makeResultsPublicRead = false;
    }
}
exports.JobProcessParams = JobProcessParams;
class JobWorkerProcessParams {
}
exports.JobWorkerProcessParams = JobWorkerProcessParams;
function blankJob(Base, type) {
    return class BlankJob extends Base {
        constructor() {
            super(...arguments);
            this.type = type;
            this.inputs = undefined;
            this.outputs = undefined;
        }
    };
}
exports.blankJob = blankJob;
class JSONSerialiserT {
    fromJSON(outputJson) {
        Object.assign(this, outputJson);
        return this;
    }
    toJSON() {
        return Object.assign({}, this);
    }
}
exports.JSONSerialiserT = JSONSerialiserT;
var JobStatus;
(function (JobStatus) {
    JobStatus["INACTIVE"] = "INACTIVE";
    JobStatus["STARTING"] = "STARTING";
    JobStatus["QUEUED"] = "QUEUED";
    JobStatus["RUNNING"] = "RUNNING";
    JobStatus["FINISHED"] = "FINISHED";
    JobStatus["ERROR"] = "ERROR";
})(JobStatus = exports.JobStatus || (exports.JobStatus = {}));
/**
 *This class is used to parse/create JSON version of JobBase
 *Note: all fields must be given a value so they can be filled (only top-level fields need to be filled, nested properties don't need values)
 *
 * @export
 * @class JobJSON
 */
class JobJSON {
    constructor() {
        this.name = "";
        this.type = "";
        this.status = JobStatus.INACTIVE;
        this.progress = 0;
        // TODO: Make this relative to JOB directory not job base directory -> that is make this just ./Input and ./Output
        // Input directory relative to the job base directory (i.e. "$JOBNAME/Input")
        this.inputDirectory = "";
        // Output directory relative to the job base directory (i.e. "$JOBNAME/Output")
        this.outputDirectory = "";
        this.inputs = {};
        this.outputs = {};
        this.boundingBox4326 = undefined;
        this.outputStorageMode = interfaces_1.FileLocation.MasterJob;
        this.processParams = new JobProcessParams();
        this.numberOfSubjobs = 0;
        this.user = "";
    }
}
exports.JobJSON = JobJSON;
class JobBase {
    constructor(name) {
        this.type = undefined;
        this.inputs = undefined;
        this.outputs = undefined;
        this.debugMode = false;
        this.debug = console.debug;
        this._logMessages = [];
        this.onLogMessageUpdate = new Set();
        this._status = JobStatus.INACTIVE;
        this.onStatusUpdate = new Set();
        /**
         *  Prorgess between 0-100
         *
         * @protected
         */
        this._progress = 0;
        this.onProgressUpdate = new Set();
        // Input directory relative to the job base directory (i.e. "$JOBNAME/Input")
        this.inputDirectory = "";
        // Output directory relative to the job base directory (i.e. "$JOBNAME/Output")
        this.outputDirectory = "";
        this.outputStorageMode = interfaces_1.FileLocation.MasterJob;
        this.processParams = new JobProcessParams();
        this._startTime = new Date();
        this._finishTime = new Date();
        this.numberOfSubjobs = 0;
        this._name = name;
        this.debugMode = true;
    }
    get name() {
        return this._name;
    }
    get logMessages() {
        return this._logMessages;
    }
    get startTime() {
        return this._startTime;
    }
    get finishTime() {
        return this._finishTime;
    }
    set status(status) {
        if (this._status !== status) {
            this._status = status;
            this.onStatusUpdate.forEach(update => update(this._status));
            if (this.debugMode) {
                this.debug(`Updated status: ${status}`);
            }
            this.addLogMessage({
                name: this.name,
                type: message_api_1.LogMessageType.info,
                output: `updated status to ${status}`,
            });
        }
    }
    get status() {
        return this._status;
    }
    set progress(progress) {
        if (this._progress !== progress) {
            const oldProgress = this._progress;
            this._progress = Math.min(100, Math.max(0, progress));
            this.onProgressUpdate.forEach(update => update(this._progress, this._progress - oldProgress));
            if (this.debugMode) {
                this.debug(`Updated progress: ${progress}`);
            }
            this.addLogMessage({
                name: this.name,
                type: message_api_1.LogMessageType.info,
                output: `updated progress to ${progress}`,
            });
        }
    }
    get progress() {
        return this._progress;
    }
    addLogMessage(logMessage) {
        if (typeof logMessage.date === "undefined") {
            logMessage.date = new Date();
        }
        this._logMessages.push(logMessage);
        this.onLogMessageUpdate.forEach(update => update(logMessage));
    }
    clearLogs() {
        this._logMessages = [];
    }
    fromJSON(jobJson, keys) {
        let keysToUpdate = Object.keys(jobJson);
        // If a keys array is provided -> only update corresponding properties
        if (Array.isArray(keys)) {
            keysToUpdate = keys;
        }
        keysToUpdate = keysToUpdate.filter(key => key !== "type" && key !== "name");
        keysToUpdate.forEach(key => {
            // If Job property has fromJSON() function -> use it to revive property
            if (typeof this[key] !== "undefined" &&
                this[key] !== null &&
                typeof this[key].fromJSON === "function") {
                this[key] = this[key].fromJSON(jobJson[key]);
            }
            else {
                this[key] = jobJson[key];
            }
        });
        this.addLogMessage({
            name: this.name,
            type: message_api_1.LogMessageType.info,
            output: `updated job from json`,
        });
        return this;
    }
    toJSON() {
        const returnObj = new JobJSON();
        Object.keys(returnObj).forEach((field) => {
            const value = this[field];
            if (typeof value !== "undefined" &&
                value !== null &&
                typeof value.toJSON === "function") {
                returnObj[field] = value.toJSON();
            }
            else {
                returnObj[field] = value;
            }
        });
        return returnObj;
    }
}
exports.JobBase = JobBase;


/***/ }),

/***/ "../shared/src/job/job-types.ts":
/*!**************************************!*\
  !*** ../shared/src/job/job-types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JobType;
(function (JobType) {
    JobType["SPARK"] = "spark";
    JobType["SPARKWORKSPACE"] = "spark-workspace";
    JobType["EMV2"] = "emv2";
    JobType["TEST"] = "test";
    JobType["CLIMATE_SLR"] = "climate-slr";
    JobType["CLIMATE_TEMP"] = "climate-temp";
    JobType["CLIMATE_PROJ"] = "climate-projections";
    JobType["SEW"] = "sew";
    JobType["COGG"] = "cog";
    JobType["NSWFIRE"] = "nsw-fire";
    JobType["EES"] = "ees";
})(JobType = exports.JobType || (exports.JobType = {}));
class JobTypeDescription {
}
exports.JobTypeDescription = JobTypeDescription;
exports.jobTypeDescriptions = [
    { type: JobType.SPARKWORKSPACE, label: "Spark (workspace)" },
    { type: JobType.SPARK, label: "Spark (geostack)" },
    { type: JobType.EMV2, label: "EMV2" },
    // { type: JobType.TEST, label: "Test" },
    { type: JobType.CLIMATE_SLR, label: "Climate Urban" },
    { type: JobType.CLIMATE_TEMP, label: "Climate Rural" },
    { type: JobType.CLIMATE_PROJ, label: "Climate Projections" },
    // { type: JobType.SEW, label: "Southeast Water" },
    { type: JobType.COGG, label: "City of Greater Geelong" },
    { type: JobType.NSWFIRE, label: "NSW Fire Map" },
    { type: JobType.EES, label: "Emergency Evacuation Simulation" },
];


/***/ }),

/***/ "../shared/src/job/job-types/climate/slr-inputs-outputs.ts":
/*!*****************************************************************!*\
  !*** ../shared/src/job/job-types/climate/slr-inputs-outputs.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const turf_1 = __webpack_require__(/*! @turf/turf */ "../node_modules/@turf/turf/turf.min.js");
class ClimateSlrJobInputs {
    constructor() {
        this.inputFc = turf_1.featureCollection([]);
    }
    fromJSON(inputJSON) {
        Object.assign(this, inputJSON);
        return this;
    }
    toJSON() {
        return Object.assign({}, this);
    }
}
exports.ClimateSlrJobInputs = ClimateSlrJobInputs;
class ClimateSlrJobOutputs {
    constructor() {
        this.output = {};
    }
    fromJSON(outputJson) {
        Object.assign(this, outputJson);
        return this;
    }
    toJSON() {
        return Object.assign({}, this);
    }
}
exports.ClimateSlrJobOutputs = ClimateSlrJobOutputs;


/***/ }),

/***/ "../shared/src/job/job-types/emv2/inputs-outputs.ts":
/*!**********************************************************!*\
  !*** ../shared/src/job/job-types/emv2/inputs-outputs.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const job_base_1 = __webpack_require__(/*! ../../job-base */ "../shared/src/job/job-base.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "../node_modules/@turf/turf/turf.min.js");
const interfaces_1 = __webpack_require__(/*! ../../../file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
class Emv2JobInputs extends job_base_1.JSONSerialiserT {
    constructor() {
        super(...arguments);
        this.inputProjection = "EPSG:4326";
        this.fireRasterSelectionGeometry = turf_1.featureCollection([]);
        this.fireRasterSelection = [];
        this.fireRasterFilter = [];
        this.fireRasterBaseDirectory = {};
        this.fireSummaryGeojson = {};
        this.outputGeojson = {
            name: "output.json",
            path: "Output/output.json",
            type: "file",
            location: interfaces_1.FileLocation.MasterJob,
        };
        this.networkConfig = {
            constant: 100.0,
            defaultLinkType: 3,
        };
        this.files = {};
    }
}
exports.Emv2JobInputs = Emv2JobInputs;
class Emv2JobOutputs extends job_base_1.JSONSerialiserT {
}
exports.Emv2JobOutputs = Emv2JobOutputs;
exports.emv2SubjobName = (name, fire) => `!${name} subjob ${fire}`;


/***/ }),

/***/ "../shared/src/job/job-types/spark-workspace/inputs-outputs.ts":
/*!*********************************************************************!*\
  !*** ../shared/src/job/job-types/spark-workspace/inputs-outputs.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const turf_1 = __webpack_require__(/*! @turf/turf */ "../node_modules/@turf/turf/turf.min.js");
var InputLayerInterpolation;
(function (InputLayerInterpolation) {
    InputLayerInterpolation[InputLayerInterpolation["Nearest"] = 0] = "Nearest";
    InputLayerInterpolation[InputLayerInterpolation["Bilinear"] = 1] = "Bilinear";
    InputLayerInterpolation[InputLayerInterpolation["Bicubic"] = 2] = "Bicubic";
})(InputLayerInterpolation = exports.InputLayerInterpolation || (exports.InputLayerInterpolation = {}));
class InputLayer {
    constructor(modelName, obj = {}) {
        this.defaultValue = 0;
        this.interpolation = 0;
        Object.assign(this, obj);
        this.modelName = modelName;
    }
}
exports.InputLayer = InputLayer;
class MeteorologicalInputTransform {
    constructor() {
        this.scaleFactor = 1;
        this.valueOffset = 0;
    }
}
exports.MeteorologicalInputTransform = MeteorologicalInputTransform;
class MeteorologicalInputLayer {
    constructor() {
        this.transform = new MeteorologicalInputTransform();
    }
}
exports.MeteorologicalInputLayer = MeteorologicalInputLayer;
var GeotiffType;
(function (GeotiffType) {
    GeotiffType[GeotiffType["Unknown"] = 0] = "Unknown";
    GeotiffType[GeotiffType["uInt8"] = 1] = "uInt8";
    GeotiffType[GeotiffType["uInt16"] = 2] = "uInt16";
    GeotiffType[GeotiffType["Int16"] = 3] = "Int16";
    GeotiffType[GeotiffType["uInt32"] = 4] = "uInt32";
    GeotiffType[GeotiffType["Int32"] = 5] = "Int32";
    GeotiffType[GeotiffType["Float32"] = 6] = "Float32";
    GeotiffType[GeotiffType["Float64"] = 7] = "Float64";
    GeotiffType[GeotiffType["ComplexInt16"] = 8] = "ComplexInt16";
    GeotiffType[GeotiffType["ComplexInt32"] = 9] = "ComplexInt32";
    GeotiffType[GeotiffType["ComplexFloat32"] = 10] = "ComplexFloat32";
    GeotiffType[GeotiffType["ComplexFloat64"] = 11] = "ComplexFloat64";
})(GeotiffType = exports.GeotiffType || (exports.GeotiffType = {}));
var OutputUnitType;
(function (OutputUnitType) {
    OutputUnitType[OutputUnitType["Undefined"] = 0] = "Undefined";
    OutputUnitType[OutputUnitType["Time"] = 1] = "Time";
    OutputUnitType[OutputUnitType["Distance"] = 2] = "Distance";
    OutputUnitType[OutputUnitType["Temperature"] = 3] = "Temperature";
    OutputUnitType[OutputUnitType["HeatFluxDensity"] = 4] = "HeatFluxDensity";
    OutputUnitType[OutputUnitType["Percent"] = 5] = "Percent";
    OutputUnitType[OutputUnitType["Degress"] = 6] = "Degress";
    OutputUnitType[OutputUnitType["SpeedInMs"] = 7] = "SpeedInMs";
    OutputUnitType[OutputUnitType["SpeedInKmh"] = 8] = "SpeedInKmh";
})(OutputUnitType = exports.OutputUnitType || (exports.OutputUnitType = {}));
var ReductionType;
(function (ReductionType) {
    ReductionType[ReductionType["None"] = 0] = "None";
    ReductionType[ReductionType["Max"] = 1] = "Max";
    ReductionType[ReductionType["Min"] = 2] = "Min";
    ReductionType[ReductionType["Integral"] = 3] = "Integral";
    ReductionType[ReductionType["Mean"] = 4] = "Mean";
    ReductionType[ReductionType["Stdev"] = 5] = "Stdev";
    ReductionType[ReductionType["RMS"] = 6] = "RMS";
    ReductionType[ReductionType["Sum"] = 7] = "Sum";
    ReductionType[ReductionType["HeavisideIntegral"] = 8] = "HeavisideIntegral";
    ReductionType[ReductionType["PerimiterLengthIntegral"] = 9] = "PerimiterLengthIntegral";
    ReductionType[ReductionType["Var"] = 10] = "Var";
    ReductionType[ReductionType["Covar"] = 11] = "Covar";
    ReductionType[ReductionType["CountUnique"] = 12] = "CountUnique";
    ReductionType[ReductionType["MaxIndexed"] = 13] = "MaxIndexed";
})(ReductionType = exports.ReductionType || (exports.ReductionType = {}));
class SparkWorkspaceJobInputs {
    constructor() {
        /**
         * If this is set, then the SparkWorkspace inputs will be overriden by values inside the XML file when the job object is created
         *
         */
        this.loadSparkWorkspaceXML = {};
        this._startTime = new Date();
        this._endTime = new Date();
        // FIXME: remove simulation duration getter/setter
        this.simulationDurationHours = "";
        this.simulationResolution = 30;
        this.simulationProjection = "EPSG:28355";
        this.featureCollections = {
            startSources: turf_1.featureCollection([]),
            masks: turf_1.featureCollection([]),
        };
        this.startSourcesProjection = "EPSG:4326";
        this.shapeMaskProjection = "EPSG:4326";
        this.shapeMaskShapefile = "";
        this.outputProjection = "EPSG:3857";
        this.disableFileOutputs = false;
        this.outputDataRasterFilename = "";
        this.outputEnsembleRasterFilename = "";
        this.outputDataRasterType = "";
        this.outputRasterFilename = "";
        this.outputShapefileFilename = "";
        this.outputSpotFireShapefileFilename = "";
        this.outputHeader = "";
        this.outputIsochroneTime = "";
        this.outputPostgis = {
            appendScript: "",
            createScript: "",
            db: "",
            hostname: "",
            schema: "",
            table: "",
            user: "",
        };
        this.initialisationScripts = {};
        this.rateOfSpreadModels = {};
        this.postProcessingScripts = {};
        this.geostackEnsemble = {
            seedStart: 0,
            seedEnd: 0,
        };
        this.bbox = {
            bbox: [],
            res: [],
            crs: "EPSG:4326",
            autoToggle: "",
            buffer: "",
            toggle: "",
        };
        this.kmlOutput = { dir: "", timeStep: "", write: "" };
        this.inputs = {
            meteorological: {
                layers: {
                    windDirection: new MeteorologicalInputLayer(),
                    windSpeed: new MeteorologicalInputLayer(),
                    temperature: new MeteorologicalInputLayer(),
                    relativeHumidity: new MeteorologicalInputLayer(),
                    dewPointTemperature: new MeteorologicalInputLayer(),
                    droughtFactor: new MeteorologicalInputLayer(),
                },
                timeConversionCoefficient: 1,
                projection: "EPSG:4326",
                windUseDirectionAndSpeed: true,
            },
            terrain: {
                landClassification: new InputLayer("class", { defaultValue: 1 }),
                fireHistory: new InputLayer("fire_history"),
                elevation: new InputLayer("elevation"),
                fuelLoad: new InputLayer("fuel_load"),
                curing: new InputLayer("curing"),
            },
            custom: [],
            series: { windRandomVariation: { speed: 0, direction: 0 } },
            ensemble: {
                numSimulations: 0,
                outputLayers: 1,
                randomSeed: 0,
                outputRasterType: GeotiffType.Float32,
                unitType: OutputUnitType.Undefined,
                reduction: {
                    layers: [{ number: 1, type: ReductionType.None }],
                    pythonScript: "",
                },
                startPointScript: "",
            },
            firebrand: { elevationLayerName: "elevation" },
            disruption: {},
            nearField: { elevationLayerName: "elevation" },
            windCorrection: {
                active: "",
                maxHeight: "",
                parameter: "",
                verticalLayers: "",
            },
            verticalLevels: { levels: "", spacing: "" },
        };
    }
    get startTime() {
        return this._startTime;
    }
    set startTime(s) {
        this._startTime = s;
        // If the new starttime is after the current endtime -> set endtime to start time
        if (typeof this._endTime === "undefined" ||
            (typeof this._startTime.getTime === "function" &&
                typeof this._endTime.getTime === "function" &&
                this._endTime.getTime() < this._startTime.getTime())) {
            this._endTime = this._startTime;
        }
    }
    get endTime() {
        return this._endTime;
    }
    set endTime(e) {
        this._endTime = e;
        // If the new endtime is before the current starttime -> set starttime to endtime
        if (typeof this._startTime === "undefined" ||
            (typeof this._startTime.getTime === "function" &&
                typeof this._endTime.getTime === "function" &&
                this._startTime.getTime() > this._endTime.getTime())) {
            this._startTime = this._endTime;
        }
    }
    get simulationDuration() {
        if (typeof this._startTime !== "undefined" &&
            this._startTime !== null &&
            typeof this._startTime.getTime === "function" &&
            typeof this._endTime !== "undefined" &&
            this._endTime !== null &&
            typeof this._endTime.getTime === "function") {
            return ((this.endTime.getTime() - this.startTime.getTime()) / (60 * 60 * 1000));
        }
        return -1;
    }
    set simulationDuration(hours) {
        if (hours > 0) {
            this.endTime = new Date(this.startTime.getTime() + hours * 60 * 60 * 1000);
        }
    }
    fromJSON(inputJSON) {
        Object.assign(this, inputJSON);
        if ("startTime" in inputJSON) {
            this._startTime = new Date(inputJSON.startTime);
        }
        if ("endTime" in inputJSON) {
            this._endTime = new Date(inputJSON.endTime);
        }
        if ("featureCollections" in inputJSON &&
            "masks" in this.featureCollections) {
            this.featureCollections.masks.features.forEach(f => (f.properties.time = new Date(f.properties.time)));
        }
        if ("featureCollections" in inputJSON &&
            "startSources" in this.featureCollections) {
            this.featureCollections.startSources.features.forEach(f => (f.properties.time = new Date(f.properties.time)));
        }
        return this;
    }
    toJSON() {
        return Object.assign({}, this, {
            startTime: this._startTime,
            _startTime: undefined,
            endTime: this._endTime,
            _endTime: undefined,
        });
    }
}
exports.SparkWorkspaceJobInputs = SparkWorkspaceJobInputs;
class SparkWorkspaceJobOutputs {
    fromJSON(outputJson) {
        return Object.assign(this, outputJson);
    }
    toJSON() {
        return Object.assign({}, this);
    }
}
exports.SparkWorkspaceJobOutputs = SparkWorkspaceJobOutputs;


/***/ }),

/***/ "../shared/src/job/job-types/spark-workspace/job.ts":
/*!**********************************************************!*\
  !*** ../shared/src/job/job-types/spark-workspace/job.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../job-types */ "../shared/src/job/job-types.ts");
const inputs_outputs_1 = __webpack_require__(/*! ./inputs-outputs */ "../shared/src/job/job-types/spark-workspace/inputs-outputs.ts");
function sparkWorkspaceJob(Base) {
    return class SparkWorkspaceJob extends Base {
        constructor() {
            super(...arguments);
            this.type = job_types_1.JobType.SPARKWORKSPACE;
            this.inputs = new inputs_outputs_1.SparkWorkspaceJobInputs();
            this.outputs = new inputs_outputs_1.SparkWorkspaceJobOutputs();
        }
    };
}
exports.sparkWorkspaceJob = sparkWorkspaceJob;


/***/ }),

/***/ "../shared/src/job/job-types/spark/inputs-outputs.ts":
/*!***********************************************************!*\
  !*** ../shared/src/job/job-types/spark/inputs-outputs.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const turf_1 = __webpack_require__(/*! @turf/turf */ "../node_modules/@turf/turf/turf.min.js");
class SparkJobInputs {
    constructor() {
        this._startTime = new Date();
        this._durationSeconds = 60 * 60;
        this.resolutionMeters = 30;
        this.projection = "+proj=lcc +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145 +x_0=2500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs";
        this.simulationProjection = "EPSG:3111";
        this.startConditions = turf_1.featureCollection([]);
        this.maskConditions = turf_1.featureCollection([]);
        this.outputProjection = "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +no_defs";
        this.disableFileOutputs = false;
        this.outputIsochroneTimeSecond = 3600;
        this.outputIsochroneJSONFile = "Output/out_spark_contour.geojson";
        this.initialisationModel = "";
        this.rateOfSpreadModelsCommonStart = "";
        this.rateOfSpreadModelsCommonEnd = "";
        this.rateOfSpreadModels = {};
        this.updateModels = {};
        this.updateModelsCommonStart = "";
        this.updateModelsCommonEnd = "";
        this.inputLayers = [];
        this.outputLayers = [];
        this.classificationLayer = {};
        this.metCSVFile = {};
    }
    get startTime() {
        return this._startTime;
    }
    set startTime(s) {
        this._startTime = s;
    }
    get durationSeconds() {
        return this._durationSeconds;
    }
    set durationSeconds(seconds) {
        this._durationSeconds = seconds;
    }
    get startDateISO8601() {
        return this.startTime.toISOString();
    }
    set startDateISO8601(d) {
        this.startTime = new Date(d);
    }
    fromJSON(inputJSON) {
        Object.assign(this, inputJSON);
        if ("startTime" in inputJSON) {
            this._startTime = new Date(inputJSON.startTime);
        }
        return this;
    }
    toJSON() {
        return Object.assign({}, this, {
            startTime: this._startTime,
            _startTime: undefined,
            startDateISO8601: this.startDateISO8601,
            durationSeconds: this._durationSeconds,
            _durationSeconds: undefined,
        });
    }
}
exports.SparkJobInputs = SparkJobInputs;
class SparkJobOutputs {
    fromJSON(outputJson) {
        return Object.assign(this, outputJson);
    }
    toJSON() {
        return Object.assign({}, this);
    }
}
exports.SparkJobOutputs = SparkJobOutputs;


/***/ }),

/***/ "../shared/src/job/job-types/spark/spark-job.ts":
/*!******************************************************!*\
  !*** ../shared/src/job/job-types/spark/spark-job.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../job-types */ "../shared/src/job/job-types.ts");
const inputs_outputs_1 = __webpack_require__(/*! ./inputs-outputs */ "../shared/src/job/job-types/spark/inputs-outputs.ts");
function sparkJob(Base) {
    return class SparkJob extends Base {
        constructor() {
            super(...arguments);
            this.type = job_types_1.JobType.SPARK;
            this.inputs = new inputs_outputs_1.SparkJobInputs();
            this.outputs = new inputs_outputs_1.SparkJobOutputs();
        }
    };
}
exports.sparkJob = sparkJob;


/***/ }),

/***/ "../shared/src/message-api/index.ts":
/*!******************************************!*\
  !*** ../shared/src/message-api/index.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./message-api */ "../shared/src/message-api/message-api.ts"));
__export(__webpack_require__(/*! ./websocket-api */ "../shared/src/message-api/websocket-api.ts"));


/***/ }),

/***/ "../shared/src/message-api/message-api.ts":
/*!************************************************!*\
  !*** ../shared/src/message-api/message-api.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JobMessageTypes;
(function (JobMessageTypes) {
    JobMessageTypes["Data"] = "job-data";
    JobMessageTypes["PartialData"] = "job-partial-data";
    JobMessageTypes["Status"] = "job-status";
    JobMessageTypes["Get"] = "job-get";
    JobMessageTypes["New"] = "job-new";
    JobMessageTypes["Log"] = "job-log";
    JobMessageTypes["Run"] = "job-run";
    JobMessageTypes["Stop"] = "job-stop";
    JobMessageTypes["Delete"] = "job-delete";
})(JobMessageTypes = exports.JobMessageTypes || (exports.JobMessageTypes = {}));
var JobListMessageTypes;
(function (JobListMessageTypes) {
    JobListMessageTypes["Get"] = "job-list-get";
    JobListMessageTypes["GetTemplate"] = "job-list-get-templates";
})(JobListMessageTypes = exports.JobListMessageTypes || (exports.JobListMessageTypes = {}));
var ServerConfigMessageTypes;
(function (ServerConfigMessageTypes) {
    ServerConfigMessageTypes["Get"] = "server-config-get";
    ServerConfigMessageTypes["Data"] = "server-config-data";
})(ServerConfigMessageTypes = exports.ServerConfigMessageTypes || (exports.ServerConfigMessageTypes = {}));
// Start error message api interfaces
var FlashMessageTypes;
(function (FlashMessageTypes) {
    FlashMessageTypes["General"] = "flash-message-general";
})(FlashMessageTypes = exports.FlashMessageTypes || (exports.FlashMessageTypes = {}));
class MessageNew {
    constructor(type) {
        this._type = type;
    }
    get type() {
        return this._type;
    }
    toJSON() {
        // return all properties other than 'type'
        return {
            type: this.type,
            data: Object.keys(this)
                .filter(key => !["type", "_type"].includes(key))
                .reduce((obj, key) => {
                obj[key] = this[key];
                return obj;
            }, {}),
        };
    }
}
exports.MessageNew = MessageNew;
class FlashMessage extends MessageNew {
    constructor(obj) {
        super(FlashMessageTypes.General);
        this.title = "An error has occurred";
        this.severity = "error";
        this.duration = 6000;
        this.sticky = false;
        Object.assign(this, obj);
    }
}
exports.FlashMessage = FlashMessage;
class ServerConfigGetMessage extends MessageNew {
    constructor(obj = {}) {
        super(ServerConfigMessageTypes.Get);
        Object.assign(this, obj);
    }
}
exports.ServerConfigGetMessage = ServerConfigGetMessage;
class ServerConfigDataMessage extends MessageNew {
    constructor(obj) {
        super(ServerConfigMessageTypes.Data);
        Object.assign(this, obj);
    }
}
exports.ServerConfigDataMessage = ServerConfigDataMessage;
var LogMessageType;
(function (LogMessageType) {
    LogMessageType["info"] = "info";
    LogMessageType["workerInfo"] = "worker-info";
    LogMessageType["error"] = "error";
    LogMessageType["stdout"] = "stdout";
    LogMessageType["stderr"] = "stderr";
    LogMessageType["exitcode"] = "exitcode";
})(LogMessageType = exports.LogMessageType || (exports.LogMessageType = {}));
exports.IGetDirTreeSignedURLType = "get-dir-tree-signed-url";


/***/ }),

/***/ "../shared/src/message-api/websocket-api.ts":
/*!**************************************************!*\
  !*** ../shared/src/message-api/websocket-api.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketAuthMessageTypes;
(function (WebSocketAuthMessageTypes) {
    WebSocketAuthMessageTypes["AuthLogin"] = "auth-login";
    WebSocketAuthMessageTypes["AuthFailed"] = "auth-failed";
    WebSocketAuthMessageTypes["AuthInvalid"] = "auth-invalid";
    WebSocketAuthMessageTypes["AuthSuccess"] = "auth-success";
})(WebSocketAuthMessageTypes = exports.WebSocketAuthMessageTypes || (exports.WebSocketAuthMessageTypes = {}));


/***/ }),

/***/ "../shared/src/user/user.ts":
/*!**********************************!*\
  !*** ../shared/src/user/user.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class GeowebUser {
}
exports.GeowebUser = GeowebUser;
var GeowebUserRoles;
(function (GeowebUserRoles) {
    GeowebUserRoles["User"] = "user";
    GeowebUserRoles["Admin"] = "admin";
})(GeowebUserRoles = exports.GeowebUserRoles || (exports.GeowebUserRoles = {}));
class GeowebJWT extends GeowebUser {
}
exports.GeowebJWT = GeowebJWT;


/***/ }),

/***/ "../shared/src/util/array.ts":
/*!***********************************!*\
  !*** ../shared/src/util/array.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// From https://stackoverflow.com/questions/42623071/maximum-call-stack-size-exceeded-with-math-min-and-math-max
function getMax(arr) {
    let len = arr.length;
    let max = 0;
    while (len--) {
        max = arr[len] > max ? arr[len] : max;
    }
    return max;
}
exports.getMax = getMax;
function getAbsMax(arr, noDataValue = 0) {
    let len = arr.length;
    let max = 0;
    while (len--) {
        max =
            arr[len] > noDataValue && Math.abs(arr[len]) > max
                ? Math.abs(arr[len])
                : max;
    }
    return max;
}
exports.getAbsMax = getAbsMax;
// Adapted https://gist.github.com/miguelmota/5f27d5cdb8462fbbb402
function flattenArray(array) {
    return Array.isArray(array)
        ? [].concat.apply([], array.map(flattenArray))
        : array;
}
exports.flattenArray = flattenArray;
// Where did this come from?
function concatenate(resultConstructor, ...arrays) {
    let totalLength = 0;
    for (const arr of arrays) {
        totalLength += arr.length;
    }
    const result = new resultConstructor(totalLength);
    let offset = 0;
    for (const arr of arrays) {
        result.set(arr, offset);
        offset += arr.length;
    }
    return result;
}
exports.concatenate = concatenate;


/***/ }),

/***/ "../shared/src/util/dates.ts":
/*!***********************************!*\
  !*** ../shared/src/util/dates.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
];
function dateToUtcDate(d) {
    return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds()));
}
exports.dateToUtcDate = dateToUtcDate;
// Adapted from https://stackoverflow.com/a/37096512
function secondsToHMSString(d) {
    const h = Math.floor(d / 3600);
    const m = Math.floor((d % 3600) / 60);
    const s = Math.floor((d % 3600) % 60);
    return `${h > 0 ? `${h}h ` : ""}
    ${m > 0 || h > 0 ? `${m.toString().padStart(2, "0")}m ` : ""}
    ${s.toString().padStart(2, "0")}s`;
}
exports.secondsToHMSString = secondsToHMSString;
function secondsToHMString(format = "hm") {
    return (d) => {
        const h = Math.floor(d / 3600) + Math.floor(Math.round((d % 3600) / 60) / 60);
        const m = Math.round((d % 3600) / 60) % 60;
        if (format === "hm") {
            return `${h > 0 ? `${h}h ` : ""}${m.toString().padStart(2, "0")}m`;
        }
        return `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}`;
    };
}
exports.secondsToHMString = secondsToHMString;


/***/ }),

/***/ "../shared/src/util/geospatial-projections.ts":
/*!****************************************************!*\
  !*** ../shared/src/util/geospatial-projections.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const turf_1 = __webpack_require__(/*! @turf/turf */ "../node_modules/@turf/turf/turf.min.js");
const proj4x = __webpack_require__(/*! proj4 */ "../node_modules/proj4/lib/index.js");
let proj4;
// FIXME: this is annoying - probably something to do with angular-cli webpack stuff
if (typeof window === "undefined") {
    proj4 = proj4x;
}
else {
    proj4 = proj4x.default;
}
exports.proj4defs = [
    [
        "EPSG:32718",
        "+proj=utm +zone=18 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs ",
    ],
    [
        "EPSG:32767",
        "+proj=lcc +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145 +x_0=2500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ",
    ],
    [
        "EPSG:3111",
        "+proj=lcc +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145 +x_0=2500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ",
    ],
    [
        "EPSG:28355",
        "+proj=utm +zone=55 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ",
    ],
    ["EPSG:4326", "+proj=longlat +datum=WGS84 +no_defs"],
];
proj4.defs(exports.proj4defs);
exports.EPSG4326 = "EPSG:4326";
exports.EPSG3857 = "EPSG:3857";
function projectBBox(bbox, fromProjection = exports.EPSG3857, toProjection = exports.EPSG4326) {
    return [
        ...projectCoords([bbox[0], bbox[1]], fromProjection, toProjection),
        ...projectCoords([bbox[2], bbox[3]], fromProjection, toProjection),
    ];
}
exports.projectBBox = projectBBox;
function projectCoords(coords, fromProjection = exports.EPSG3857, toProjection = exports.EPSG4326) {
    return proj4(fromProjection, toProjection).forward(coords);
}
exports.projectCoords = projectCoords;
function projectFeatureCollection(fc, fromProjection = exports.EPSG3857, toProjection = exports.EPSG4326, inPlace = true) {
    let projectedFc;
    if (!inPlace) {
        projectedFc = turf_1.clone(fc);
    }
    else {
        projectedFc = fc;
    }
    projectedFc.features.forEach((f, fIdx) => {
        if (f.geometry.type === "LineString") {
            const lineStringFeature = f;
            lineStringFeature.geometry.coordinates.forEach((coords, cIdx) => {
                lineStringFeature.geometry.coordinates[cIdx] = projectCoords(coords, fromProjection, toProjection);
            });
        }
        else if (f.geometry.type === "Polygon") {
            const polygonFeature = f;
            // Project coordinates
            polygonFeature.geometry.coordinates.forEach((linearRings, lrIdx) => {
                linearRings.forEach((coords, cIdx) => {
                    polygonFeature.geometry.coordinates[lrIdx][cIdx] = projectCoords(coords, fromProjection, toProjection);
                });
            });
        }
        else if (f.geometry.type === "MultiPolygon") {
            const multiPolygonFeature = f;
            // Project coordinates
            multiPolygonFeature.geometry.coordinates.forEach((polygon, pIdx) => {
                polygon.forEach((linearRings, lrIdx) => {
                    linearRings.forEach((coords, cIdx) => {
                        multiPolygonFeature.geometry.coordinates[pIdx][lrIdx][cIdx] = projectCoords(coords, fromProjection, toProjection);
                    });
                });
            });
        }
        else if (f.geometry.type === "Point") {
            const pointFeature = f;
            // Project coordinates
            pointFeature.geometry.coordinates = projectCoords(pointFeature.geometry.coordinates, fromProjection, toProjection);
        }
    });
    // coordEach(projectedFc, coord => {
    //   coord = project(coord)
    // })
    // Project bounding box coords
    // ;[projectedFc.bbox[0], projectedFc.bbox[1]] = project([projectedFc.bbox[0], projectedFc.bbox[1]])
    // Why
    // ;[projectedFc.bbox[2], projectedFc.bbox[3]] = project([projectedFc.bbox[2], projectedFc.bbox[3]])
    return projectedFc;
}
exports.projectFeatureCollection = projectFeatureCollection;


/***/ }),

/***/ "../shared/src/util/string.ts":
/*!************************************!*\
  !*** ../shared/src/util/string.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function pad0s(number, zeros = 2) {
    return number.toString().padStart(zeros, "0");
}
exports.pad0s = pad0s;
function toFixedDrop0s(number, toFixed = 2) {
    return number.toFixed(toFixed).replace(/\.00$/, "");
}
exports.toFixedDrop0s = toFixedDrop0s;
// From https://stackoverflow.com/a/14428340
function formatCurrency(number) {
    const money = `$${number.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, "$&,")}`;
    return money.length < 10 ? money : money.split(".")[0];
}
exports.formatCurrency = formatCurrency;
exports.alphaNumericDashesValidator = {
    isValid: (str) => str === "" || isValidForRegexpFn(/^[a-zA-Z0-9-_]+$/)(str),
    errorMessage: "Must only contain alphanumerics, dashes or underscores (a-Z, 0-9, -, _)",
};
exports.positiveIntegerValidator = {
    isValid: (str) => str === "" || isValidForRegexpFn(/^\+?(0|[1-9]\d*)$/)(str),
    errorMessage: "Positive integer value required",
};
// Adapted from https://stackoverflow.com/a/10834843
exports.integerValidator = {
    isValid: (str) => str === "" || isValidForRegexpFn(/^[-+]?(0|[1-9]\d*)$/)(str),
    errorMessage: "Integer value required",
};
// From http://regexlib.com/Search.aspx?k=float&AspxAutoDetectCookieSupport=1
exports.floatValidator = {
    isValid: isValidForRegexpFn(/^[-+]?\d*\.?\d*$/),
    errorMessage: "Number required",
};
exports.latitudeValidator = {
    isValid: str => exports.floatValidator.isValid(str) && isLatitude(parseFloat(str)),
    errorMessage: "Invalid latitude",
};
exports.longitudeValidator = {
    isValid: str => exports.floatValidator.isValid(str) && isLongitude(parseFloat(str)),
    errorMessage: "Invalid longitude",
};
function isLatitude(lat) {
    return isFinite(lat) && Math.abs(lat) <= 90;
}
exports.isLatitude = isLatitude;
function isLongitude(lng) {
    return isFinite(lng) && Math.abs(lng) <= 180;
}
exports.isLongitude = isLongitude;
function isValidForRegexpFn(regexp) {
    return (str) => str.toString().search(regexp) !== -1;
}
exports.isValidForRegexpFn = isValidForRegexpFn;
function isValidForRegexp(str, regexp) {
    return str.toString().search(regexp) !== -1;
}
exports.isValidForRegexp = isValidForRegexp;
// Adapted from https://stackoverflow.com/a/4253415
function escapeString(str) {
    return str
        .replace(/\\n/g, "\\n")
        .replace(/\\'/g, "\\'")
        .replace(/\\"/g, '\\"')
        .replace(/\\&/g, "\\&")
        .replace(/\\r/g, "\\r")
        .replace(/\\t/g, "\\t")
        .replace(/\\b/g, "\\b")
        .replace(/\\f/g, "\\f");
}
exports.escapeString = escapeString;
function parseCsv(str) {
    return str
        .replace(/[\r]+/g, "")
        .split("\n")
        .map(row => (row !== "" ? row.split(",") : undefined))
        .filter(row => row !== undefined);
}
exports.parseCsv = parseCsv;


/***/ }),

/***/ "./node_modules/core-js/es7/reflect.js":
/*!*********************************************!*\
  !*** ./node_modules/core-js/es7/reflect.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es7.reflect.define-metadata */ "./node_modules/core-js/modules/es7.reflect.define-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.delete-metadata */ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.get-metadata */ "./node_modules/core-js/modules/es7.reflect.get-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.get-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js");
__webpack_require__(/*! ../modules/es7.reflect.get-own-metadata */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.get-own-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js");
__webpack_require__(/*! ../modules/es7.reflect.has-metadata */ "./node_modules/core-js/modules/es7.reflect.has-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.has-own-metadata */ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js");
__webpack_require__(/*! ../modules/es7.reflect.metadata */ "./node_modules/core-js/modules/es7.reflect.metadata.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js").Reflect;


/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-from-iterable.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-from-iterable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-weak.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var getWeak = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").getWeak;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
var $has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.10' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/modules/_metadata.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_metadata.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(/*! ./es6.map */ "./node_modules/core-js/modules/es6.map.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(/*! ./es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js"))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.set.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var assign = __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js");
var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var NATIVE_WEAK_MAP = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.define-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.define-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.delete-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(/*! ./es6.set */ "./node_modules/core-js/modules/es6.set.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/modules/_array-from-iterable.js");
var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.metadata.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.metadata.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const router_1 = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
const geoweb_component_1 = __webpack_require__(/*! ./geo-web/geoweb.component */ "./src/app/geo-web/geoweb.component.ts");
const home_component_1 = __webpack_require__(/*! ./home/home.component */ "./src/app/home/home.component.ts");
const login_component_1 = __webpack_require__(/*! ./login/login.component */ "./src/app/login/login.component.ts");
const routes = [
    { path: "", component: home_component_1.HomeComponent },
    { path: "job", component: geoweb_component_1.GeowebComponent },
    { path: "login", component: login_component_1.LoginComponent },
];
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = __decorate([
    core_1.NgModule({
        imports: [router_1.RouterModule.forRoot(routes)],
        exports: [router_1.RouterModule],
    })
], AppRoutingModule);
exports.AppRoutingModule = AppRoutingModule;


/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<router-outlet></router-outlet>\n<p-toast position=\"top-right\"\n  baseZIndex=\"2000\"></p-toast>"

/***/ }),

/***/ "./src/app/app.component.scss":
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "* {\n  box-sizing: border-box; }\n\nbody,\nhtml {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px;\n  margin: 0;\n  padding: 0; }\n\n.c3 text {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px; }\n\nh1,\n.h1 {\n  font-size: 24px;\n  font-weight: 600; }\n\nh2,\n.h2 {\n  font-size: 18px;\n  font-weight: 500; }\n\npre {\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  white-space: -moz-pre-wrap;\n  white-space: -pre-wrap;\n  white-space: -o-pre-wrap;\n  word-wrap: break-word; }\n\n.font-italic-light {\n  font-weight: 100;\n  font-style: italic; }\n\n.text-overflow-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.label,\nlabel {\n  display: block;\n  margin-bottom: 10px;\n  margin-top: 20px; }\n\n.badge > .pi {\n  padding-right: 4px; }\n\na.icon-link:last-of-type {\n  padding-right: 10px; }\n\na.icon-link:first-of-type {\n  padding-left: 10px; }\n\na.icon-link {\n  font-size: 0.85em;\n  padding: 0 5px; }\n\nbody .ui-widget-overlay {\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: all linear 0.2s; }\n\n.ui-state-highlight a.icon-link {\n  color: #ffffff; }\n\n.ui-state-highlight a.icon-link:hover {\n  color: #ffffffba; }\n\n.empty-placeholder {\n  color: #999;\n  font-weight: 100;\n  padding: 20px 0;\n  /* height: 100%; */\n  text-align: center; }\n\n.ui-toast {\n  max-height: 100vh;\n  overflow-y: auto; }\n\n.ui-toast-detail {\n  word-break: break-word; }\n\n.modal-dialog.ui-dialog {\n  width: 400px; }\n\n.ui-dialog .ui-grid .ui-grid-row {\n  margin-bottom: 10px; }\n\n.ui-dialog .ui-listbox .ui-listbox-list-wrapper {\n  max-height: calc(100vh - 400px);\n  min-height: 100px; }\n\nbody .ui-dialog .ui-dialog-content {\n  max-height: calc(100vh - 200px);\n  min-height: 200px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar,\nbody .ui-dialog .ui-dialog-footer {\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-top: none; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-bottom: none; }\n\n.ui-dialog .ui-listbox .ui-progressbar {\n  display: inline-block;\n  width: 100%;\n  height: 14px;\n  margin-top: 3px;\n  margin-bottom: -3px;\n  background-color: #0000004a; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-label {\n  font-size: 12px;\n  line-height: 1.25;\n  color: inherit; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-value {\n  background: #0000006b; }\n\nbody .ui-widget,\nbody\n.ui-autocomplete.ui-autocomplete-multiple\n.ui-autocomplete-multiple-container\n.ui-autocomplete-input-token\ninput,\nbody .ui-chips > ul.ui-inputtext .ui-chips-input-token input,\nbody .ui-table .ui-editable-column input,\nbody .ui-treetable .ui-editable-column input,\nbody .ui-terminal .ui-terminal-input {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; }\n\nbody .secondary-col,\nbody .ui-button.ui-state-default.ui-button-secondary,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #e8e8e8;\n  border-color: #e8e8e8; }\n\nbody .secondary-col:hover,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:hover,\nbody\n.ui-buttonset.ui-button-secondary\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #c8c8c8;\n  color: #333333;\n  border-color: #c8c8c8; }\n\nbody .secondary-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:focus,\nbody\n.ui-buttonset.ui-button-secondary\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .secondary-col:active,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:active,\nbody\n.ui-buttonset.ui-button-secondary\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #a0a0a0;\n  color: #333333;\n  border-color: #a0a0a0; }\n\nbody .default-col,\nbody .ui-button.ui-state-default.ui-button-info,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #007ad9;\n  border-color: #007ad9; }\n\nbody .default-col:hover,\nbody .ui-button.ui-state-default.ui-button-info:enabled:hover,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:hover {\n  background-color: #116fbf;\n  color: #ffffff;\n  border-color: #116fbf; }\n\nbody .default-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-info:enabled:focus,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .default-col:active,\nbody .ui-button.ui-state-default.ui-button-info:enabled:active,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:active {\n  background-color: #005b9f;\n  color: #ffffff;\n  border-color: #005b9f; }\n\nbody .success-col,\nbody .ui-button.ui-state-default.ui-button-success,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #34a835;\n  border-color: #34a835; }\n\nbody .success-col:hover,\nbody .ui-button.ui-state-default.ui-button-success:enabled:hover,\nbody\n.ui-buttonset.ui-button-success\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #107d11;\n  color: #ffffff;\n  border-color: #107d11; }\n\nbody .success-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success:enabled:focus,\nbody\n.ui-buttonset.ui-button-success\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col:active,\nbody .ui-button.ui-state-default.ui-button-success:enabled:active,\nbody\n.ui-buttonset.ui-button-success\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #0c6b0d;\n  color: #ffffff;\n  border-color: #0c6b0d; }\n\nbody .success-col-outline,\nbody .ui-button.ui-state-default.ui-button-success-outline,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default {\n  color: #34a835;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .success-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:hover,\nbody\n.ui-buttonset.ui-button-success-outline\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #107d11;\n  border-color: #fff; }\n\nbody .success-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:focus,\nbody\n.ui-buttonset.ui-button-success-outline\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:active,\nbody\n.ui-buttonset.ui-button-success-outline\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #0c6b0d;\n  border-color: #fff; }\n\nbody .warning-col,\nbody .ui-button.ui-state-default.ui-button-warning,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #ffba01;\n  border-color: #ffba01; }\n\nbody .warning-col:hover,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:hover,\nbody\n.ui-buttonset.ui-button-warning\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #ed990b;\n  color: #333333;\n  border-color: #ed990b; }\n\nbody .warning-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:focus,\nbody\n.ui-buttonset.ui-button-warning\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #ffeab4; }\n\nbody .warning-col:active,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:active,\nbody\n.ui-buttonset.ui-button-warning\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #d38b10;\n  color: #333333;\n  border-color: #d38b10; }\n\nbody .danger-col,\nbody .ui-button.ui-state-default.ui-button-danger,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #e91224;\n  border-color: #e91224; }\n\nbody .danger-col:hover,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:hover,\nbody\n.ui-buttonset.ui-button-danger\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #c01120;\n  color: #ffffff;\n  border-color: #c01120; }\n\nbody .danger-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:focus,\nbody\n.ui-buttonset.ui-button-danger\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col:active,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:active,\nbody\n.ui-buttonset.ui-button-danger\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #a90000;\n  color: #ffffff;\n  border-color: #a90000; }\n\nbody .danger-col-outline,\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  color: #e91224;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  border-color: #e91224; }\n\nbody .danger-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody\n.ui-buttonset.ui-button-danger-outline\n> .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #c01120;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody\n.ui-buttonset.ui-button-danger-outline\n> .ui-button.ui-state-default:enabled:hover {\n  border-color: #c01120; }\n\nbody .danger-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:focus,\nbody\n.ui-buttonset.ui-button-danger-outline\n> .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody\n.ui-buttonset.ui-button-danger-outline\n> .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #a90000;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody\n.ui-buttonset.ui-button-danger-outline\n> .ui-button.ui-state-default:enabled:active {\n  border-color: #a90000; }\n\nbody .ui-dialog .ui-dialog-footer button,\nbody .ui-card .ui-card-footer button {\n  margin: 0 0 0 0.5em !important; }\n\nbody .ui-dialog {\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1) !important; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-radius: 4px 4px 0 0; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-radius: 0 0 4px 4px; }\n\nbody .ui-messages-error {\n  border: none;\n  font-weight: 800;\n  padding: 0;\n  display: block;\n  width: 100%;\n  text-align: right;\n  color: #a80000; }\n\nbody .ng-dirty.ng-invalid + ul {\n  -webkit-padding-start: 0;\n          padding-inline-start: 0; }\n\nbody .ui-inputtext.ng-invalid:enabled:focus,\n.ui-inputtext {\n  border-color: #a80000; }\n\nbody .ui-inputtext,\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  transition: box-shadow 0.2s; }\n\nbody .ui-inputtext.ng-dirty.ng-invalid,\nbody p-dropdown.ng-dirty.ng-invalid > .ui-dropdown,\nbody p-autocomplete.ng-dirty.ng-invalid > .ui-autocomplete > .ui-inputtext,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext,\nbody p-chips.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-inputmask.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-checkbox.ng-dirty.ng-invalid .ui-chkbox-box,\nbody p-radiobutton.ng-dirty.ng-invalid .ui-radiobutton-box,\nbody p-inputswitch.ng-dirty.ng-invalid .ui-inputswitch,\nbody p-listbox.ng-dirty.ng-invalid .ui-inputtext,\nbody p-multiselect.ng-dirty.ng-invalid > .ui-multiselect,\nbody p-spinner.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-selectbutton.ng-dirty.ng-invalid .ui-button,\nbody p-togglebutton.ng-dirty.ng-invalid .ui-button {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  box-shadow: 2px -2.8px 0 #f9b4ba, 2px 2.8px 0 #f9b4ba; }\n\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar.ui-calendar-w-btn {\n  box-shadow: 0 0 0 3px #f9b4ba;\n  border-radius: 4px; }\n\nbody\n.ui-inputgroup\n.ui-inputtext:enabled:focus:not(.ui-state-error)\n+ .ui-inputgroup-addon,\nbody\np-calendar.ng-dirty.ng-invalid\n> .ui-calendar\n> .ui-inputtext:enabled:focus:not(.ui-state-error),\nbody\np-calendar.ng-dirty.ng-invalid\n> .ui-calendar\n> .ui-inputtext:enabled:focus:not(.ui-state-error)\n+ .ui-calendar-button {\n  box-shadow: none; }\n\n*:not(.ui-calendar) .ui-inputtext {\n  width: 100%; }\n\nbody .ui-state-disabled,\nbody .ui-widget:disabled {\n  cursor: not-allowed; }\n\n.form dynamic-primeng-form-control > div {\n  margin-bottom: 10px; }\n\n.form .ui-calendar,\n.form .ui-spinner {\n  width: 100%; }\n\n.form .ui-calendar-w-btn input.ui-inputtext {\n  width: calc(100% - 33px); }\n\n.form .ui-datepicker {\n  padding: 0.5em; }\n\n.form .ui-datepicker {\n  font-size: 12px; }\n\n.form .ui-datepicker .ui-timepicker {\n  padding: 10px 0 0 0;\n  font-size: 11px; }\n\n.form .ui-datepicker table {\n  font-size: 11px; }\n\n/* width */\n\n::-webkit-scrollbar {\n  width: 10px; }\n\n/* Track */\n\n::-webkit-scrollbar-track {\n  background: none; }\n\n/* Handle */\n\n::-webkit-scrollbar-thumb {\n  background: #00000033;\n  border: 2px solid rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  border-radius: 5px; }\n\n/* Handle on hover */\n\n::-webkit-scrollbar-thumb:hover {\n  background: #00000055;\n  background-clip: padding-box; }\n\n.ui-toast-top-right {\n  top: 8px;\n  right: 8px; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const api_1 = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
const flash_message_service_1 = __webpack_require__(/*! ./services/flash-message.service */ "./src/app/services/flash-message.service.ts");
/**
 * Root app component - contains router-outlet
 *
 * @export
 * @class AppComponent
 */
let AppComponent = class AppComponent {
    constructor(messageService, flashMessageService) {
        this.messageService = messageService;
        this.flashMessageService = flashMessageService;
        // Display error messages on update
        this.errorMessageSubscription = this.flashMessageService
            .getFlashMessageObservable()
            .subscribe(errorMessage => this.messageService.add({
            life: errorMessage.duration,
            severity: errorMessage.severity,
            summary: errorMessage.title,
            detail: errorMessage.message,
            sticky: errorMessage.sticky,
        }));
    }
    ngOnDestroy() {
        this.errorMessageSubscription.unsubscribe();
        this.messageService.clear();
    }
};
AppComponent = __decorate([
    core_1.Component({
        selector: "app-root",
        template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
        providers: [api_1.MessageService],
        styles: [__webpack_require__(/*! ./app.component.scss */ "./src/app/app.component.scss")]
    }),
    __metadata("design:paramtypes", [api_1.MessageService,
        flash_message_service_1.FlashMessageService])
], AppComponent);
exports.AppComponent = AppComponent;


/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
const animations_1 = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
const angular_jwt_1 = __webpack_require__(/*! @auth0/angular-jwt */ "./node_modules/@auth0/angular-jwt/index.js");
const http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const ui_primeng_1 = __webpack_require__(/*! @ng-dynamic-forms/ui-primeng */ "./node_modules/@ng-dynamic-forms/ui-primeng/fesm2015/ui-primeng.js");
const ngx_file_drop_1 = __webpack_require__(/*! ngx-file-drop */ "./node_modules/ngx-file-drop/fesm2015/ngx-file-drop.js");
// Font awesome
const angular_fontawesome_1 = __webpack_require__(/*! @fortawesome/angular-fontawesome */ "./node_modules/@fortawesome/angular-fontawesome/fesm2015/angular-fontawesome.js");
const fontawesome_svg_core_1 = __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ "./node_modules/@fortawesome/fontawesome-svg-core/index.es.js");
const free_solid_svg_icons_1 = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "./node_modules/@fortawesome/free-solid-svg-icons/index.es.js");
fontawesome_svg_core_1.library.add(free_solid_svg_icons_1.faEye, free_solid_svg_icons_1.faEyeSlash, free_solid_svg_icons_1.faFire, free_solid_svg_icons_1.faMapMarker, free_solid_svg_icons_1.faDrawPolygon, free_solid_svg_icons_1.faCrop, free_solid_svg_icons_1.faClock, free_solid_svg_icons_1.faCog, free_solid_svg_icons_1.faLayerGroup, free_solid_svg_icons_1.faPlay, free_solid_svg_icons_1.faStop, free_solid_svg_icons_1.faTerminal, free_solid_svg_icons_1.faCaretUp, free_solid_svg_icons_1.faMinus, free_solid_svg_icons_1.faPlus, free_solid_svg_icons_1.faPlusCircle, free_solid_svg_icons_1.faTimes, free_solid_svg_icons_1.faTimesCircle, free_solid_svg_icons_1.faSearch, free_solid_svg_icons_1.faCrosshairs, free_solid_svg_icons_1.faBars, free_solid_svg_icons_1.faRuler, free_solid_svg_icons_1.faMapPin, free_solid_svg_icons_1.faShapes, free_solid_svg_icons_1.faSync, free_solid_svg_icons_1.faTrash, free_solid_svg_icons_1.faUsers, free_solid_svg_icons_1.faInfoCircle, free_solid_svg_icons_1.faGlobeAsia, free_solid_svg_icons_1.faPoll, free_solid_svg_icons_1.faFolderOpen, free_solid_svg_icons_1.faPen);
// PrimeNg
const slider_1 = __webpack_require__(/*! primeng/slider */ "./node_modules/primeng/slider.js");
const tooltip_1 = __webpack_require__(/*! primeng/tooltip */ "./node_modules/primeng/tooltip.js");
const inputtext_1 = __webpack_require__(/*! primeng/inputtext */ "./node_modules/primeng/inputtext.js");
const sidebar_1 = __webpack_require__(/*! primeng/sidebar */ "./node_modules/primeng/sidebar.js");
const button_1 = __webpack_require__(/*! primeng/button */ "./node_modules/primeng/button.js");
const orderlist_1 = __webpack_require__(/*! primeng/orderlist */ "./node_modules/primeng/orderlist.js");
const colorpicker_1 = __webpack_require__(/*! primeng/colorpicker */ "./node_modules/primeng/colorpicker.js");
const dropdown_1 = __webpack_require__(/*! primeng/dropdown */ "./node_modules/primeng/dropdown.js");
const calendar_1 = __webpack_require__(/*! primeng/calendar */ "./node_modules/primeng/calendar.js");
const toast_1 = __webpack_require__(/*! primeng/toast */ "./node_modules/primeng/toast.js");
const overlaypanel_1 = __webpack_require__(/*! primeng/overlaypanel */ "./node_modules/primeng/overlaypanel.js");
const card_1 = __webpack_require__(/*! primeng/card */ "./node_modules/primeng/card.js");
const listbox_1 = __webpack_require__(/*! primeng/listbox */ "./node_modules/primeng/listbox.js");
const primeng_1 = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
const togglebutton_1 = __webpack_require__(/*! primeng/togglebutton */ "./node_modules/primeng/togglebutton.js");
const slidemenu_1 = __webpack_require__(/*! primeng/slidemenu */ "./node_modules/primeng/slidemenu.js");
const dialog_1 = __webpack_require__(/*! primeng/dialog */ "./node_modules/primeng/dialog.js");
const panel_1 = __webpack_require__(/*! primeng/panel */ "./node_modules/primeng/panel.js");
const tree_1 = __webpack_require__(/*! primeng/tree */ "./node_modules/primeng/tree.js");
// Module Imports
const app_routing_module_1 = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
const app_component_1 = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
const geoweb_component_1 = __webpack_require__(/*! ./geo-web/geoweb.component */ "./src/app/geo-web/geoweb.component.ts");
const home_component_1 = __webpack_require__(/*! ./home/home.component */ "./src/app/home/home.component.ts");
const map_component_1 = __webpack_require__(/*! ./geo-web/map/map.component */ "./src/app/geo-web/map/map.component.ts");
const map_popup_component_1 = __webpack_require__(/*! ./geo-web/map/map-popup/map-popup-component */ "./src/app/geo-web/map/map-popup/map-popup-component.ts");
const callback_pipe_1 = __webpack_require__(/*! ./util/callback.pipe */ "./src/app/util/callback.pipe.ts");
const disclaimer_component_1 = __webpack_require__(/*! ./disclaimer/disclaimer.component */ "./src/app/disclaimer/disclaimer.component.ts");
const form_validators_1 = __webpack_require__(/*! ./util/form-validators */ "./src/app/util/form-validators.ts");
const spinner_component_1 = __webpack_require__(/*! ./spinner/spinner.component */ "./src/app/spinner/spinner.component.ts");
const form_component_1 = __webpack_require__(/*! ./form/form.component */ "./src/app/form/form.component.ts");
const login_component_1 = __webpack_require__(/*! ./login/login.component */ "./src/app/login/login.component.ts");
const auth_service_1 = __webpack_require__(/*! ./services/auth.service */ "./src/app/services/auth.service.ts");
const form_instance_component_1 = __webpack_require__(/*! ./form/form-instance.component */ "./src/app/form/form-instance.component.ts");
const file_drop_upload_component_1 = __webpack_require__(/*! ./file-drop-upload/file-drop-upload.component */ "./src/app/file-drop-upload/file-drop-upload.component.ts");
const form_monaco_editor_component_1 = __webpack_require__(/*! ./form/monaco-editor/form-monaco-editor.component */ "./src/app/form/monaco-editor/form-monaco-editor.component.ts");
const code_editor_model_1 = __webpack_require__(/*! ./form/monaco-editor/code-editor-model */ "./src/app/form/monaco-editor/code-editor-model.ts");
const ngx_monaco_editor_1 = __webpack_require__(/*! ngx-monaco-editor */ "./node_modules/ngx-monaco-editor/fesm2015/ngx-monaco-editor.js");
const file_browser_component_1 = __webpack_require__(/*! ./file-browser/file-browser.component */ "./src/app/file-browser/file-browser.component.ts");
const form_file_browser_input_component_1 = __webpack_require__(/*! ./form/file-browser-input/form-file-browser-input.component */ "./src/app/form/file-browser-input/form-file-browser-input.component.ts");
const file_browser_input_model_1 = __webpack_require__(/*! ./form/file-browser-input/file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
const file_browser_input_component_1 = __webpack_require__(/*! ./form/file-browser-input/file-browser-input.component */ "./src/app/form/file-browser-input/file-browser-input.component.ts");
const form_mutable_array_component_1 = __webpack_require__(/*! ./form/form-mutable-array/form-mutable-array.component */ "./src/app/form/form-mutable-array/form-mutable-array.component.ts");
const electron_service_1 = __webpack_require__(/*! ./services/electron.service */ "./src/app/services/electron.service.ts");
const config_service_1 = __webpack_require__(/*! ./services/config.service */ "./src/app/services/config.service.ts");
function initialiseApp(configService) {
    return () => {
        return configService.init();
    };
}
exports.initialiseApp = initialiseApp;
let AppModule = class AppModule {
    constructor(injector) {
        this.injector = injector;
        exports.InjectorInstance = this.injector;
    }
};
AppModule = __decorate([
    core_1.NgModule({
        declarations: [
            app_component_1.AppComponent,
            geoweb_component_1.GeowebComponent,
            home_component_1.HomeComponent,
            map_component_1.GeowebMapComponent,
            form_component_1.JobConfigComponent,
            map_popup_component_1.PopupFormComponent,
            disclaimer_component_1.DisclaimerComponent,
            spinner_component_1.SpinnerComponent,
            form_validators_1.ForbiddenValidatorDirective,
            callback_pipe_1.CallbackPipe,
            login_component_1.LoginComponent,
            form_instance_component_1.JobDynamicFormComponent,
            form_monaco_editor_component_1.DynamicCodeEditorComponent,
            form_mutable_array_component_1.FormMutableArrayComponent,
            file_drop_upload_component_1.FileDropUploadComponent,
            file_browser_component_1.FileBrowserComponent,
            form_file_browser_input_component_1.FileBrowserInputComponent,
            file_browser_input_component_1.FileBrowserInputControlComponent,
        ],
        entryComponents: [
            form_monaco_editor_component_1.DynamicCodeEditorComponent,
            form_mutable_array_component_1.FormMutableArrayComponent,
            form_file_browser_input_component_1.FileBrowserInputComponent,
        ],
        imports: [
            // Angular
            platform_browser_1.BrowserModule,
            animations_1.BrowserAnimationsModule,
            http_1.HttpClientModule,
            angular_jwt_1.JwtModule.forRoot({
                jwtOptionsProvider: {
                    provide: angular_jwt_1.JWT_OPTIONS,
                    useFactory: auth_service_1.jwtOptionsFactory,
                    deps: [config_service_1.ConfigService],
                },
            }),
            app_routing_module_1.AppRoutingModule,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            core_2.DynamicFormsCoreModule,
            ui_primeng_1.DynamicFormsPrimeNGUIModule,
            ngx_file_drop_1.FileDropModule,
            angular_fontawesome_1.FontAwesomeModule,
            // PrimeNG
            slider_1.SliderModule,
            tooltip_1.TooltipModule,
            inputtext_1.InputTextModule,
            sidebar_1.SidebarModule,
            button_1.ButtonModule,
            orderlist_1.OrderListModule,
            colorpicker_1.ColorPickerModule,
            dropdown_1.DropdownModule,
            calendar_1.CalendarModule,
            toast_1.ToastModule,
            overlaypanel_1.OverlayPanelModule,
            card_1.CardModule,
            listbox_1.ListboxModule,
            primeng_1.ProgressBarModule,
            togglebutton_1.ToggleButtonModule,
            slidemenu_1.SlideMenuModule,
            dialog_1.DialogModule,
            panel_1.PanelModule,
            primeng_1.TabViewModule,
            tree_1.TreeModule,
            ngx_monaco_editor_1.MonacoEditorModule.forRoot(),
        ],
        providers: [
            electron_service_1.ElectronService,
            config_service_1.ConfigService,
            {
                provide: core_1.APP_INITIALIZER,
                useFactory: initialiseApp,
                multi: true,
                deps: [config_service_1.ConfigService],
            },
            // This fixes Monaco Editor loading with Electron (https://github.com/atularen/ngx-monaco-editor/issues/49)
            {
                provide: ngx_monaco_editor_1.NGX_MONACO_EDITOR_CONFIG,
                useValue: {
                    baseUrl: electron_service_1.isElectron()
                        ? `${electron_service_1.getElectronConfig().APP_PATH}assets`
                        : "./assets",
                },
            },
            // Add custom form validators
            {
                provide: forms_1.NG_VALIDATORS,
                useValue: form_validators_1.validateCustomValidator,
                multi: true,
            },
            {
                provide: core_2.DYNAMIC_VALIDATORS,
                useValue: new Map([
                    ["customValidator", form_validators_1.validateCustomValidator],
                ]),
            },
            // Add custom form controls
            {
                provide: core_2.DYNAMIC_FORM_CONTROL_MAP_FN,
                useValue: (model) => {
                    switch (model.type) {
                        case code_editor_model_1.DYNAMIC_FORM_CONTROL_TYPE_CODE_EDITOR:
                            return form_monaco_editor_component_1.DynamicCodeEditorComponent;
                        case core_2.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                            return form_mutable_array_component_1.FormMutableArrayComponent;
                        case file_browser_input_model_1.DYNAMIC_FORM_CONTROL_TYPE_FILE_BROWSER_INPUT:
                            return form_file_browser_input_component_1.FileBrowserInputComponent;
                    }
                },
            },
        ],
        bootstrap: [app_component_1.AppComponent],
    }),
    __metadata("design:paramtypes", [core_1.Injector])
], AppModule);
exports.AppModule = AppModule;


/***/ }),

/***/ "./src/app/disclaimer/disclaimer-service.ts":
/*!**************************************************!*\
  !*** ./src/app/disclaimer/disclaimer-service.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const LOCAL_STORAGE_DISCLAIMER_KEY = "disclaimerAgreedTo";
const LOCAL_STORAGE_DISCLAIMER_DATESET_KEY = "disclaimerAgreedToDateSet";
/**
 * Handles disclaimer - which is displayed after a specified time of inactivity
 *
 * @export
 * @class DisclaimerSerivce
 */
let DisclaimerSerivce = class DisclaimerSerivce {
    constructor() {
        const storedValue = window.localStorage.getItem(LOCAL_STORAGE_DISCLAIMER_KEY);
        const dateSet = window.localStorage.getItem(LOCAL_STORAGE_DISCLAIMER_DATESET_KEY);
        if (typeof storedValue !== "undefined" && typeof dateSet !== "undefined") {
            // If the disclaimer value was set in the last day - otherwise set to false
            if (new Date(dateSet).getTime() >
                new Date().getTime() - 1000 * 60 * 60 * 24) {
                this._disclaimerAgreedTo = storedValue === "true";
            }
            else {
                this._disclaimerAgreedTo = false;
            }
            // If disclaimer already agreed to - update date set
            window.localStorage.setItem(LOCAL_STORAGE_DISCLAIMER_DATESET_KEY, new Date().toUTCString());
        }
    }
    set disclaimerAgreedTo(b) {
        window.localStorage.setItem(LOCAL_STORAGE_DISCLAIMER_KEY, b ? "true" : "false");
        window.localStorage.setItem(LOCAL_STORAGE_DISCLAIMER_DATESET_KEY, new Date().toUTCString());
        this._disclaimerAgreedTo = b;
    }
    get disclaimerAgreedTo() {
        return this._disclaimerAgreedTo;
    }
};
DisclaimerSerivce = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [])
], DisclaimerSerivce);
exports.DisclaimerSerivce = DisclaimerSerivce;


/***/ }),

/***/ "./src/app/disclaimer/disclaimer.component.html":
/*!******************************************************!*\
  !*** ./src/app/disclaimer/disclaimer.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-panel styleClass=\"disclaimer-panel\">\n  <p-header>\n    <h1>Disclaimer</h1>\n  </p-header>\n  <p>\n    The Geoweb Website or Software should not be relied upon to provide risk\n    assessments, and must not be used for any operational, planning or risk\n    evaluation purposes. CSIRO makes no expressed or implied warranty or\n    representation of the quality or fitness for purpose of the software and\n    disclaim all liability for the consequences of anything done or omitted to\n    be done by any person in reliance upon the software or any information\n    provided by the Software.\n  </p>\n  <h3>Terms of use:</h3>\n  <ol>\n    <li>\n      The use of this Website and the Geoweb Software is for evaluation\n      purposes only.\n    </li>\n    <li>\n      Commercial usage of this Website or the Geoweb Software are not\n      permitted.\n    </li>\n    <li>\n      Operational usage of this Website or the Geoweb Software for decision\n      support or risk analysis are not permitted.\n    </li>\n  </ol>\n  <p-footer>\n    <p-button icon=\"pi pi-check\"\n      label=\"Agree\"\n      (click)=\"agreeToDisclaimer()\"></p-button>\n  </p-footer>\n</p-panel>"

/***/ }),

/***/ "./src/app/disclaimer/disclaimer.component.scss":
/*!******************************************************!*\
  !*** ./src/app/disclaimer/disclaimer.component.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".ui-panel.disclaimer-panel {\n  max-width: 800px;\n  margin: 5% auto;\n  text-align: justify;\n  z-index: 1;\n  position: relative;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.2); }\n\n.ui-panel.disclaimer-panel .ui-panel-titlebar,\n.ui-panel.disclaimer-panel .ui-panel-content,\n.ui-panel.disclaimer-panel .ui-panel-footer {\n  border-left: none;\n  border-right: none;\n  background-color: #ffffffc9; }\n\n.ui-panel.disclaimer-panel .ui-panel-titlebar {\n  border-top: none;\n  background-color: #ffffff87; }\n\n.ui-panel.disclaimer-panel .ui-panel-footer {\n  text-align: right;\n  border-bottom: none;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZGlzY2xhaW1lci9kaXNjbGFpbWVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQix3Q0FBd0MsRUFBQTs7QUFHMUM7OztFQUdFLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsMkJBQTJCLEVBQUE7O0FBRzdCO0VBQ0UsZ0JBQWdCO0VBQ2hCLDJCQUEyQixFQUFBOztBQUc3QjtFQUNFLGlCQUFpQjtFQUNqQixtQkFBbUI7RUFDbkIsK0JBQStCO0VBQy9CLDhCQUE4QixFQUFBIiwiZmlsZSI6InNyYy9hcHAvZGlzY2xhaW1lci9kaXNjbGFpbWVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnVpLXBhbmVsLmRpc2NsYWltZXItcGFuZWwge1xuICBtYXgtd2lkdGg6IDgwMHB4O1xuICBtYXJnaW46IDUlIGF1dG87XG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIHotaW5kZXg6IDE7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcbn1cblxuLnVpLXBhbmVsLmRpc2NsYWltZXItcGFuZWwgLnVpLXBhbmVsLXRpdGxlYmFyLFxuLnVpLXBhbmVsLmRpc2NsYWltZXItcGFuZWwgLnVpLXBhbmVsLWNvbnRlbnQsXG4udWktcGFuZWwuZGlzY2xhaW1lci1wYW5lbCAudWktcGFuZWwtZm9vdGVyIHtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZmM5O1xufVxuXG4udWktcGFuZWwuZGlzY2xhaW1lci1wYW5lbCAudWktcGFuZWwtdGl0bGViYXIge1xuICBib3JkZXItdG9wOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmODc7XG59XG5cbi51aS1wYW5lbC5kaXNjbGFpbWVyLXBhbmVsIC51aS1wYW5lbC1mb290ZXIge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O1xufVxuIl19 */"

/***/ }),

/***/ "./src/app/disclaimer/disclaimer.component.ts":
/*!****************************************************!*\
  !*** ./src/app/disclaimer/disclaimer.component.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const disclaimer_service_1 = __webpack_require__(/*! ./disclaimer-service */ "./src/app/disclaimer/disclaimer-service.ts");
const router_1 = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/**
 * Displays disclaimer
 *
 * @export
 * @class DisclaimerComponent
 */
let DisclaimerComponent = class DisclaimerComponent {
    constructor(disclaimerService, router) {
        this.disclaimerService = disclaimerService;
        this.router = router;
    }
    agreeToDisclaimer() {
        this.disclaimerService.disclaimerAgreedTo = true;
        this.router.navigate([this.redirectTo]);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DisclaimerComponent.prototype, "redirectTo", void 0);
DisclaimerComponent = __decorate([
    core_1.Component({
        selector: "app-disclaimer",
        template: __webpack_require__(/*! ./disclaimer.component.html */ "./src/app/disclaimer/disclaimer.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./disclaimer.component.scss */ "./src/app/disclaimer/disclaimer.component.scss")]
    }),
    __metadata("design:paramtypes", [disclaimer_service_1.DisclaimerSerivce,
        router_1.Router])
], DisclaimerComponent);
exports.DisclaimerComponent = DisclaimerComponent;


/***/ }),

/***/ "./src/app/file-browser/file-browser.component.html":
/*!**********************************************************!*\
  !*** ./src/app/file-browser/file-browser.component.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Pick File\"\n  [(visible)]=\"visible\"\n  [modal]=\"false\"\n  styleClass=\"file-browser-dialog modal-dialog\"\n  [closeOnEscape]=\"true\"\n  [draggable]=\"false\"\n  [resizable]=\"false\"\n  transitionOptions=\"0ms\"\n  #fileBrowserDialog>\n  <div class=\"file-browser-container\"\n    *ngIf=\"visible\">\n    <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n      <div class=\"ui-grid-row\">\n        <div class=\"ui-grid-col-12\">\n          <p-tree [value]=\"files\"\n            selectionMode=\"single\"\n            [(selection)]=\"selectedFile\"\n            #fileBrowserTree>\n          </p-tree>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p-footer>\n    <button type=\"button\"\n      pButton\n      icon=\"pi pi-trash\"\n      (click)=\"clearSelection()\"\n      label=\"Clear\"\n      class=\"ui-button-danger-outline\"\n      style=\"float: left;\"\n      *ngIf=\"selectedFile !== undefined\"></button>\n\n    <button type=\"button\"\n      pButton\n      icon=\"pi pi-times\"\n      (click)=\"cancel()\"\n      label=\"Cancel\"\n      class=\"ui-button-secondary\"></button>\n    <button type=\"button\"\n      pButton\n      icon=\"pi pi-check\"\n      (click)=\"submit()\"\n      label=\"Select\"></button>\n  </p-footer>\n</p-dialog>"

/***/ }),

/***/ "./src/app/file-browser/file-browser.component.scss":
/*!**********************************************************!*\
  !*** ./src/app/file-browser/file-browser.component.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".file-browser-dialog.modal-dialog.ui-dialog {\n  top: 5vh !important;\n  left: 50% !important;\n  transform: translate(-50%, 0) !important;\n  width: auto;\n  max-width: 80vw;\n  min-width: 400px; }\n\nbody .ui-dialog .ui-dialog-header,\nbody .ui-dialog .ui-dialog-footer {\n  border-right: none;\n  border-left: none; }\n\nbody .ui-dialog .ui-dialog-header {\n  border-top: none; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-bottom: none; }\n\n.file-browser-dialog.modal-dialog.ui-dialog .ui-dialog-content {\n  padding: 0;\n  height: calc(90vh - 100px); }\n\n.file-browser-dialog .ui-tree {\n  border: none;\n  padding: 0.5em; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZmlsZS1icm93c2VyL2ZpbGUtYnJvd3Nlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixvQkFBb0I7RUFDcEIsd0NBQXdDO0VBQ3hDLFdBQVc7RUFDWCxlQUFlO0VBQ2YsZ0JBQWdCLEVBQUE7O0FBR2xCOztFQUVFLGtCQUFrQjtFQUNsQixpQkFBaUIsRUFBQTs7QUFHbkI7RUFDRSxnQkFBZ0IsRUFBQTs7QUFHbEI7RUFDRSxtQkFBbUIsRUFBQTs7QUFHckI7RUFDRSxVQUFVO0VBQ1YsMEJBQTBCLEVBQUE7O0FBRzVCO0VBQ0UsWUFBWTtFQUNaLGNBQWMsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2ZpbGUtYnJvd3Nlci9maWxlLWJyb3dzZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZmlsZS1icm93c2VyLWRpYWxvZy5tb2RhbC1kaWFsb2cudWktZGlhbG9nIHtcbiAgdG9wOiA1dmggIWltcG9ydGFudDtcbiAgbGVmdDogNTAlICFpbXBvcnRhbnQ7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiBhdXRvO1xuICBtYXgtd2lkdGg6IDgwdnc7XG4gIG1pbi13aWR0aDogNDAwcHg7XG59XG5cbmJvZHkgLnVpLWRpYWxvZyAudWktZGlhbG9nLWhlYWRlcixcbmJvZHkgLnVpLWRpYWxvZyAudWktZGlhbG9nLWZvb3RlciB7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG59XG5cbmJvZHkgLnVpLWRpYWxvZyAudWktZGlhbG9nLWhlYWRlciB7XG4gIGJvcmRlci10b3A6IG5vbmU7XG59XG5cbmJvZHkgLnVpLWRpYWxvZyAudWktZGlhbG9nLWZvb3RlciB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG59XG5cbi5maWxlLWJyb3dzZXItZGlhbG9nLm1vZGFsLWRpYWxvZy51aS1kaWFsb2cgLnVpLWRpYWxvZy1jb250ZW50IHtcbiAgcGFkZGluZzogMDtcbiAgaGVpZ2h0OiBjYWxjKDkwdmggLSAxMDBweCk7XG59XG5cbi5maWxlLWJyb3dzZXItZGlhbG9nIC51aS10cmVlIHtcbiAgYm9yZGVyOiBub25lO1xuICBwYWRkaW5nOiAwLjVlbTtcbn1cbiJdfQ== */"

/***/ }),

/***/ "./src/app/file-browser/file-browser.component.ts":
/*!********************************************************!*\
  !*** ./src/app/file-browser/file-browser.component.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const file_browser_service_1 = __webpack_require__(/*! ./file-browser.service */ "./src/app/file-browser/file-browser.service.ts");
const tree_1 = __webpack_require__(/*! primeng/tree */ "./node_modules/primeng/tree.js");
/**
 * Displays a file browser - it contains a tree-like interface and communicates with fileBrowserService
 *
 * @export
 * @class FileBrowserComponent
 */
let FileBrowserComponent = class FileBrowserComponent {
    constructor(fileBrowserService) {
        this.fileBrowserService = fileBrowserService;
        this.visible = false;
        this.visibleSubscription = fileBrowserService
            .isVisibleObservable()
            .subscribe(visible => {
            this.visible = visible;
            if (visible) {
                this.options = this.fileBrowserService.options;
            }
        });
        this.filesSubscription = fileBrowserService
            .getFilesObservable()
            .subscribe(files => {
            this.files = files;
        });
        this.selectedFileSubscription = fileBrowserService
            .getSelectedFileObservable()
            .subscribe(file => {
            this.selectedFile = file;
        });
    }
    ngOnInit() { }
    ngOnDestroy() {
        this.visibleSubscription.unsubscribe();
        this.filesSubscription.unsubscribe();
        this.selectedFileSubscription.unsubscribe();
    }
    cancel() {
        this.fileBrowserService.cancel();
    }
    submit() {
        if (typeof this.selectedFile !== "undefined") {
            this.fileBrowserService.submit(this.selectedFile.data);
        }
        else {
            this.fileBrowserService.submit(undefined);
        }
    }
    clearSelection() {
        this.selectedFile = undefined;
    }
};
__decorate([
    core_1.ViewChild("fileBrowserTree"),
    __metadata("design:type", tree_1.Tree)
], FileBrowserComponent.prototype, "fileBrowserTree", void 0);
FileBrowserComponent = __decorate([
    core_1.Component({
        selector: "app-file-browser",
        template: __webpack_require__(/*! ./file-browser.component.html */ "./src/app/file-browser/file-browser.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./file-browser.component.scss */ "./src/app/file-browser/file-browser.component.scss")]
    }),
    __metadata("design:paramtypes", [file_browser_service_1.FileBrowserService])
], FileBrowserComponent);
exports.FileBrowserComponent = FileBrowserComponent;


/***/ }),

/***/ "./src/app/file-browser/file-browser.service.ts":
/*!******************************************************!*\
  !*** ./src/app/file-browser/file-browser.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const array_1 = __webpack_require__(/*! ../../../../shared/src/util/array */ "../shared/src/util/array.ts");
const config_service_1 = __webpack_require__(/*! ../services/config.service */ "./src/app/services/config.service.ts");
const file_browser_input_model_1 = __webpack_require__(/*! ../form/file-browser-input/file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
/**
 * This service is used to trigger/display the FileBrowser component it also contains functions for interacting with FileBrowserNode
 *
 * @export
 * @class FileBrowserService
 */
let FileBrowserService = class FileBrowserService {
    constructor(configService) {
        this.configService = configService;
        this.visible = false;
        this.visibleSubject = new rxjs_1.Subject();
        this.filesSubject = new rxjs_1.Subject();
        this.selectedFileSubject = new rxjs_1.Subject();
        this.submittedFileSubject = new rxjs_1.Subject(); // Subject fired on file submit and cancel
        this.needToUpdateFiles = false;
    }
    get options() {
        return this._options;
    }
    ngOnDestroy() { }
    isVisibleObservable() {
        return this.visibleSubject.asObservable();
    }
    getFilesObservable() {
        return this.filesSubject.asObservable();
    }
    getSelectedFileObservable() {
        return this.selectedFileSubject.asObservable();
    }
    // TODO: preserve previously expanded items
    updateFiles(publishFilesSubject = true) {
        this.files = [];
        // NOT CURRENTLY IMPLEMENTED...
        if (publishFilesSubject) {
            this.filesSubject.next(this.files);
        }
        if (this.configService.debugMode) {
            console.log(this.files);
        }
        this.needToUpdateFiles = false;
    }
    directoryTreeToTreeNodeArray(dirTree, parent) {
        const treeNode = {
            label: dirTree.name,
            data: dirTree,
            selectable: true,
            parent,
        };
        treeNode.children = Array.isArray(dirTree.children)
            ? dirTree.children.map(child => this.directoryTreeToTreeNodeArray.bind(this)(child, treeNode))
            : [];
        return treeNode;
    }
    updateOptions(options) {
        this._options = new file_browser_input_model_1.FileBrowserOptions(options);
        // Set selectableType ('file' or 'directory')
        // First set all files to selectable if they have a data field
        this.setPropertyRecursive(this.files, node => {
            node.selectable = "data" in node;
        });
        if (this._options.selectableType) {
            this.setPropertyRecursive(this.files, node => {
                node.selectable =
                    node.selectable &&
                        node.data &&
                        node.data.type === this._options.selectableType;
            });
        }
    }
    findSelectedFileInTreeNodes(targetFile, treeNodes = this.files) {
        if (typeof treeNodes === "undefined" ||
            treeNodes.length === 0 ||
            typeof targetFile === "undefined") {
            return [];
        }
        return array_1.flattenArray(treeNodes.map(file => {
            if (file.label === targetFile.label &&
                file.data.path === targetFile.data.path) {
                return [file];
            }
            if (Array.isArray(file.children) && file.children.length > 0) {
                return this.findSelectedFileInTreeNodes(targetFile, file.children);
            }
        })).filter(match => typeof match !== "undefined");
    }
    setPropertyFromChild(node, toSet) {
        if (typeof toSet === "function") {
            toSet(node);
        }
        else {
            Object.assign(node, toSet);
        }
        if (node.parent) {
            this.setPropertyFromChild(node.parent, toSet);
        }
    }
    setPropertyRecursive(nodes, toSet) {
        nodes.forEach(node => {
            if (typeof toSet === "function") {
                toSet(node);
            }
            else {
                Object.assign(node, toSet);
            }
            if (node.children) {
                this.setPropertyRecursive(node.children, toSet);
            }
        });
    }
    expandToFile(file) {
        if (typeof file !== "undefined") {
            this.expandRecursiveFromChild(file);
        }
    }
    expandRecursive(nodes, isExpand) {
        this.setPropertyRecursive(nodes, { expanded: isExpand });
    }
    expandRecursiveFromChild(node, isExpand = true) {
        this.setPropertyFromChild(node, { expanded: isExpand });
    }
    show(options, selected) {
        // If already visible - cancel previous instance
        if (this.visible) {
            this.cancel();
        }
        if (this.needToUpdateFiles) {
            this.updateFiles(false);
        }
        // Update options
        this.updateOptions(options);
        // Convert selected file to a FileBrowserNode - and try to locate it in the File Tree (and expand all files to it)
        let selectedFileNode;
        if (typeof selected !== "undefined") {
            selectedFileNode = this.findSelectedFileInTreeNodes(this.directoryTreeToTreeNodeArray(selected))[0];
            this.expandToFile(selectedFileNode);
        }
        this.filesSubject.next(this.files);
        this.selectedFileSubject.next(selectedFileNode);
        this.visible = true;
        this.visibleSubject.next(this.visible);
        // Return a promise which is resolved when a a file is pushed to the submittedFileSubject by the FileBrowserComponent
        return new Promise((resolve, reject) => {
            const sub = this.submittedFileSubject.subscribe(dirTree => {
                if (dirTree === "cancel") {
                    reject("cancel");
                }
                else {
                    resolve(dirTree);
                }
                sub.unsubscribe();
            });
        });
    }
    hide() {
        if (this.visible) {
            this.visible = false;
            this.visibleSubject.next(this.visible);
        }
    }
    submit(dirTree) {
        this.visible = false;
        this.visibleSubject.next(this.visible);
        this.submittedFileSubject.next(dirTree);
    }
    cancel() {
        this.visible = false;
        this.visibleSubject.next(this.visible);
        this.submittedFileSubject.next("cancel");
    }
};
FileBrowserService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [config_service_1.ConfigService])
], FileBrowserService);
exports.FileBrowserService = FileBrowserService;


/***/ }),

/***/ "./src/app/file-drop-upload/file-drop-upload.component.html":
/*!******************************************************************!*\
  !*** ./src/app/file-drop-upload/file-drop-upload.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<file-drop\n  [dropZoneClassName]=\"dropZoneClassName\"\n  [contentClassName]=\"dropZoneClassName + '-content'\"\n  (onFileDrop)=\"dropped($event)\"\n  (onFileOver)=\"fileOver($event)\"\n  (onFileLeave)=\"fileLeave($event)\"\n>\n  <ng-content></ng-content>\n</file-drop>\n"

/***/ }),

/***/ "./src/app/file-drop-upload/file-drop-upload.component.scss":
/*!******************************************************************!*\
  !*** ./src/app/file-drop-upload/file-drop-upload.component.scss ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2ZpbGUtZHJvcC11cGxvYWQvZmlsZS1kcm9wLXVwbG9hZC5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/file-drop-upload/file-drop-upload.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/file-drop-upload/file-drop-upload.component.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const spinner_service_service_1 = __webpack_require__(/*! ../spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
const rest_api_service_1 = __webpack_require__(/*! ../services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const job_service_service_1 = __webpack_require__(/*! ../services/job-service.service */ "./src/app/services/job-service.service.ts");
const message_api_1 = __webpack_require__(/*! ../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const flash_message_service_1 = __webpack_require__(/*! ../services/flash-message.service */ "./src/app/services/flash-message.service.ts");
/**
 * This component handles uploading files when they are dropped on the screen
 *
 * @export
 * @class FileDropUploadComponent
 */
let FileDropUploadComponent = class FileDropUploadComponent {
    constructor(spinnerService, restApiService, jobService, flashMessageService) {
        this.spinnerService = spinnerService;
        this.restApiService = restApiService;
        this.jobService = jobService;
        this.flashMessageService = flashMessageService;
        this.state = "none";
        this.files = [];
    }
    ngOnInit() { }
    dropped(event) {
        this.spinnerService.removeSpinner(`file-drop-upload-over`);
        this.state = "uploading";
        this.files = event.files;
        const currentJob = this.jobService.getCurrentJob();
        if (typeof currentJob === "undefined" ||
            typeof currentJob.inputDirectory !== "string") {
            this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Failed to upload files: no job is loaded`,
                message: "Please load a job before trying to upload files",
                sticky: true,
            }));
            return;
        }
        for (const droppedFile of event.files) {
            // Is it a file?
            if (droppedFile.fileEntry.isFile) {
                this.spinnerService.setSpinner(`file-drop-upload-uploading-${droppedFile.fileEntry.name}`, {
                    name: `Uploading file ${droppedFile.fileEntry.name}`,
                    icon: spinner_service_service_1.SpinnerIcon.RotatingCircle,
                    progress: 0,
                    target: "file-drop-upload",
                });
                const fileEntry = droppedFile.fileEntry;
                fileEntry.file((file) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.restApiService.uploadJobFile(file, `${currentJob.inputDirectory}${droppedFile.relativePath}`, currentJob.name, progress => {
                            this.spinnerService.updateSpinner(`file-drop-upload-uploading-${droppedFile.fileEntry.name}`, {
                                progress,
                            });
                        });
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: `Sucessfull upload`,
                            message: `Sucessfully uploaded file ${file.name}`,
                            severity: "success",
                        }));
                    }
                    catch (error) {
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: `Failed to upload file ${file.name}`,
                            message: "message" in error ? error.message : error,
                            sticky: true,
                        }));
                    }
                    finally {
                        this.spinnerService.removeSpinner(`file-drop-upload-uploading-${droppedFile.fileEntry.name}`);
                    }
                }));
            }
            else {
                // It was a directory (empty directories are added, otherwise only files)
                const fileEntry = droppedFile.fileEntry;
            }
        }
    }
    fileOver(event) {
        this.state = "over";
        this.spinnerService.setSpinner(`file-drop-upload-over`, {
            name: `Drop to load files...`,
            icon: spinner_service_service_1.SpinnerIcon.BallScale,
            target: "file-drop-upload",
        });
    }
    fileLeave(event) {
        this.spinnerService.removeSpinner(`file-drop-upload-over`);
        this.state = "none";
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FileDropUploadComponent.prototype, "dropZoneClassName", void 0);
FileDropUploadComponent = __decorate([
    core_1.Component({
        selector: "app-file-drop-upload",
        template: __webpack_require__(/*! ./file-drop-upload.component.html */ "./src/app/file-drop-upload/file-drop-upload.component.html"),
        styles: [__webpack_require__(/*! ./file-drop-upload.component.scss */ "./src/app/file-drop-upload/file-drop-upload.component.scss")]
    }),
    __metadata("design:paramtypes", [spinner_service_service_1.SpinnerService,
        rest_api_service_1.RestApiService,
        job_service_service_1.JobService,
        flash_message_service_1.FlashMessageService])
], FileDropUploadComponent);
exports.FileDropUploadComponent = FileDropUploadComponent;


/***/ }),

/***/ "./src/app/form/file-browser-input/file-browser-input-model.ts":
/*!*********************************************************************!*\
  !*** ./src/app/form/file-browser-input/file-browser-input-model.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
exports.DYNAMIC_FORM_CONTROL_TYPE_FILE_BROWSER_INPUT = "FILE_BROWSER_INPUT";
/**
 * Options for FileBroserInputModel
 *
 * @export
 * @class FileBrowserOptions
 */
class FileBrowserOptions {
    constructor(obj) {
        if (obj) {
            Object.assign(this, obj);
        }
    }
}
exports.FileBrowserOptions = FileBrowserOptions;
/**
 * DynamicFormValueControlModel for FileBrowserInput
 *
 * @export
 * @class FileBrowserInputModel
 */
class FileBrowserInputModel extends core_1.DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = exports.DYNAMIC_FORM_CONTROL_TYPE_FILE_BROWSER_INPUT;
        this.options = config.options;
    }
}
__decorate([
    core_1.serializable(),
    __metadata("design:type", FileBrowserOptions)
], FileBrowserInputModel.prototype, "options", void 0);
__decorate([
    core_1.serializable(),
    __metadata("design:type", String)
], FileBrowserInputModel.prototype, "type", void 0);
exports.FileBrowserInputModel = FileBrowserInputModel;


/***/ }),

/***/ "./src/app/form/file-browser-input/file-browser-input.component.html":
/*!***************************************************************************!*\
  !*** ./src/app/form/file-browser-input/file-browser-input.component.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div (click)=\"openFileBrowser()\">\n  <p-button\n    *ngIf=\"file !== undefined\"\n    [label]=\"file.name\"\n    styleClass=\"ui-button-info ui-button-rounded file-browser-button\"\n    [icon]=\"file.type === 'file' ? 'pi pi-file' : 'pi pi-folder'\"\n    iconPos=\"left\"\n  ></p-button>\n  <p-button\n    *ngIf=\"file === undefined\"\n    label=\"Select file...\"\n    styleClass=\"ui-button-secondary ui-button-rounded file-browser-button\"\n    icon=\"pi pi-folder-open\"\n    iconPos=\"left\"\n  ></p-button>\n</div>\n"

/***/ }),

/***/ "./src/app/form/file-browser-input/file-browser-input.component.scss":
/*!***************************************************************************!*\
  !*** ./src/app/form/file-browser-input/file-browser-input.component.scss ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".file-browser-button {\n  max-width: 100%; }\n\n.file-browser-button span {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZm9ybS9maWxlLWJyb3dzZXItaW5wdXQvZmlsZS1icm93c2VyLWlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZSxFQUFBOztBQUdqQjtFQUNFLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsdUJBQXVCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9mb3JtL2ZpbGUtYnJvd3Nlci1pbnB1dC9maWxlLWJyb3dzZXItaW5wdXQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZmlsZS1icm93c2VyLWJ1dHRvbiB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLmZpbGUtYnJvd3Nlci1idXR0b24gc3BhbiB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuIl19 */"

/***/ }),

/***/ "./src/app/form/file-browser-input/file-browser-input.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/form/file-browser-input/file-browser-input.component.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var FileBrowserInputControlComponent_1;
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const file_browser_service_1 = __webpack_require__(/*! ../../file-browser/file-browser.service */ "./src/app/file-browser/file-browser.service.ts");
const file_browser_input_model_1 = __webpack_require__(/*! ./file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
/**
 * FileBrowserInput control for DynamicForms. This component is embedded in FileBrowserInputComponent's view template
 *
 * @export
 * @class FileBrowserInputControlComponent
 */
let FileBrowserInputControlComponent = FileBrowserInputControlComponent_1 = class FileBrowserInputControlComponent {
    constructor(fileBrowserService, cdr) {
        this.fileBrowserService = fileBrowserService;
        this.cdr = cdr;
        this.propagateChange = () => { };
        this.validateFn = () => { };
    }
    ngOnDestroy() {
        this.cdr.detach();
    }
    get file() {
        return this._file;
    }
    set file(val) {
        this._file = val;
        this.propagateChange(val);
        try {
            this.cdr.detectChanges();
        }
        catch (_a) { }
    }
    writeValue(value) {
        if (value) {
            this.file = value;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched() { }
    validate(c) {
        return this.validateFn(c);
    }
    openFileBrowser() {
        return __awaiter(this, void 0, void 0, function* () {
            this.file = yield this.fileBrowserService.show(this.options, this.file);
        });
    }
};
__decorate([
    core_1.Input("file"),
    __metadata("design:type", interfaces_1.DirectoryTree)
], FileBrowserInputControlComponent.prototype, "_file", void 0);
__decorate([
    core_1.Input("options"),
    __metadata("design:type", file_browser_input_model_1.FileBrowserOptions)
], FileBrowserInputControlComponent.prototype, "options", void 0);
FileBrowserInputControlComponent = FileBrowserInputControlComponent_1 = __decorate([
    core_1.Component({
        selector: "app-file-browser-input",
        template: __webpack_require__(/*! ./file-browser-input.component.html */ "./src/app/form/file-browser-input/file-browser-input.component.html"),
        providers: [
            {
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => FileBrowserInputControlComponent_1),
                multi: true,
            },
        ],
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./file-browser-input.component.scss */ "./src/app/form/file-browser-input/file-browser-input.component.scss")]
    }),
    __metadata("design:paramtypes", [file_browser_service_1.FileBrowserService,
        core_1.ChangeDetectorRef])
], FileBrowserInputControlComponent);
exports.FileBrowserInputControlComponent = FileBrowserInputControlComponent;


/***/ }),

/***/ "./src/app/form/file-browser-input/form-file-browser-input.component.html":
/*!********************************************************************************!*\
  !*** ./src/app/form/file-browser-input/form-file-browser-input.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div\n  [formGroup]=\"group\"\n  [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n>\n  <app-file-browser-input\n    [formControlName]=\"model.id\"\n    [id]=\"elementId\"\n    [ngClass]=\"getClass('element', 'control')\"\n    (blur)=\"onBlur($event)\"\n    (change)=\"onChange($event)\"\n    (focus)=\"onFocus($event)\"\n    [tabindex]=\"model.tabIndex\"\n    [options]=\"model.options\"\n  ></app-file-browser-input>\n</div>\n"

/***/ }),

/***/ "./src/app/form/file-browser-input/form-file-browser-input.component.scss":
/*!********************************************************************************!*\
  !*** ./src/app/form/file-browser-input/form-file-browser-input.component.scss ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Zvcm0vZmlsZS1icm93c2VyLWlucHV0L2Zvcm0tZmlsZS1icm93c2VyLWlucHV0LmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/form/file-browser-input/form-file-browser-input.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/form/file-browser-input/form-file-browser-input.component.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const file_browser_input_model_1 = __webpack_require__(/*! ./file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
/**
 * FileBrowser DynamicFormControlComponent. This allows a FileBrowserInput to be used in a DynamicForm
 *
 * @export
 * @class FileBrowserInputComponent
 */
let FileBrowserInputComponent = class FileBrowserInputComponent extends core_2.DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new core_1.EventEmitter();
        this.change = new core_1.EventEmitter();
        this.customEvent = new core_1.EventEmitter();
        this.focus = new core_1.EventEmitter();
    }
    ngOnInit() { }
    ngAfterViewInit() { }
    ngOnDestroy() { }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", forms_1.FormGroup)
], FileBrowserInputComponent.prototype, "group", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], FileBrowserInputComponent.prototype, "layout", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", file_browser_input_model_1.FileBrowserInputModel)
], FileBrowserInputComponent.prototype, "model", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileBrowserInputComponent.prototype, "blur", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileBrowserInputComponent.prototype, "change", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileBrowserInputComponent.prototype, "customEvent", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FileBrowserInputComponent.prototype, "focus", void 0);
FileBrowserInputComponent = __decorate([
    core_1.Component({
        selector: "app-form-file-browser-input",
        template: __webpack_require__(/*! ./form-file-browser-input.component.html */ "./src/app/form/file-browser-input/form-file-browser-input.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./form-file-browser-input.component.scss */ "./src/app/form/file-browser-input/form-file-browser-input.component.scss")]
    }),
    __metadata("design:paramtypes", [core_2.DynamicFormLayoutService,
        core_2.DynamicFormValidationService])
], FileBrowserInputComponent);
exports.FileBrowserInputComponent = FileBrowserInputComponent;


/***/ }),

/***/ "./src/app/form/form-instance.component.html":
/*!***************************************************!*\
  !*** ./src/app/form/form-instance.component.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- If formSchema has more than one element => render tabView -->\n<div *ngIf=\"formSchema.length > 1\" #rootElement>\n  <p-tabView>\n    <p-tabPanel\n      [header]=\"formModel.name\"\n      *ngFor=\"let formModel of formSchema; let i = index\"\n      [selected]=\"i == 0\"\n      #tabPanel\n    >\n      <!-- If formModel.form contains more forms => render another app-form-instance (recursively) -->\n      <app-form-instance\n        *ngIf=\"isArray(formModel.form) && tabPanel.selected\"\n        [formSchema]=\"formModel.form\"\n      ></app-form-instance>\n\n      <!-- Else it only contains one form => render the form  -->\n      <div\n        [class]=\"'form-container form ' + formModel.form.styleClass\"\n        *ngIf=\"!isArray(formModel.form) && tabPanel.selected\"\n      >\n        <form [formGroup]=\"formModel.form.formGroup\">\n          <dynamic-primeng-form\n            [group]=\"formModel.form.formGroup\"\n            [model]=\"formModel.form.model\"\n            [layout]=\"formModel.form.layout\"\n          ></dynamic-primeng-form>\n        </form>\n      </div>\n    </p-tabPanel>\n  </p-tabView>\n</div>\n\n<!-- If formSchema is only one element => no need for tabView -->\n<div *ngIf=\"formSchema.length === 1\" #rootElement>\n  <!-- If formSchema[0].form contains more forms => render another app-form-instance (recursively) -->\n  <app-form-instance\n    *ngIf=\"isArray(formSchema[0].form)\"\n    [formSchema]=\"formSchema[0].form\"\n  ></app-form-instance>\n\n  <!-- Else it only contains one form => render the form  -->\n  <div\n    [class]=\"'form-container form ' + formSchema[0].form.styleClass\"\n    *ngIf=\"!isArray(formSchema[0].form)\"\n  >\n    <form [formGroup]=\"formSchema[0].form.formGroup\">\n      <dynamic-primeng-form\n        [group]=\"formSchema[0].form.formGroup\"\n        [model]=\"formSchema[0].form.model\"\n        [layout]=\"formSchema[0].form.layout\"\n      ></dynamic-primeng-form>\n    </form>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/form/form-instance.component.scss":
/*!***************************************************!*\
  !*** ./src/app/form/form-instance.component.scss ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".form-container {\n  padding-right: 1em;\n  padding-left: 1em;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n  min-width: 313px; }\n\n.form-container .ui-datepicker.ui-widget.ui-widget-content {\n  min-width: 200px;\n  max-width: 300px;\n  width: 100%; }\n\n.code-textarea textarea {\n  font-family: monospace !important; }\n\ntextarea {\n  max-width: 100%; }\n\nbody\n.root-form-container\n.ui-tabview.ui-widget.ui-widget-content.ui-corner-all.ui-tabview-top {\n  padding: 0;\n  margin-top: -2px; }\n\nbody .root-form-container .ui-tabview.ui-tabview-top .ui-tabview-nav li {\n  margin: 0;\n  margin-top: -1px;\n  margin-left: -1px;\n  border-radius: 0; }\n\nbody .root-form-container .ui-tabview .ui-tabview-panels {\n  border: none;\n  padding: 0;\n  margin-top: 2px; }\n\nbody .root-form-container .ui-tabview.ui-tabview-top ul.ui-tabview-nav {\n  border-bottom: 1px solid #c8c8c8;\n  border-radius: 0;\n  background: #f4f4f4;\n  margin-top: -2px;\n  padding-right: 20px; }\n\nbody .root-form-container .ui-tabview.ui-tabview-top .ui-tabview-nav li a,\nbody .root-form-container .ui-tabview.ui-tabview-bottom .ui-tabview-nav li a,\nbody .root-form-container .ui-tabview.ui-tabview-left .ui-tabview-nav li a,\nbody .root-form-container .ui-tabview.ui-tabview-right .ui-tabview-nav li a {\n  font-weight: normal !important; }\n\nbody\n.root-form-container\n.ui-tabview.ui-tabview-top\n.ui-tabview\n.ui-tabview-nav\nli.ui-state-active {\n  background-color: #239efc;\n  border: 1px solid #239efc; }\n\nbody\n.root-form-container\n.ui-tabview.ui-tabview-top\n.ui-tabview\n.ui-tabview-nav\nli.ui-state-active:hover {\n  border: 1px solid #007bd9;\n  background-color: #007bd9; }\n\nbody\n.root-form-container\n.ui-tabview-panel\n.ui-tabview.ui-tabview-top\n.ui-tabview-nav\nli {\n  font-size: 12px;\n  margin-top: -2px; }\n\nbody\n.root-form-container\n.ui-tabview.ui-tabview-top\n.ui-tabview\n.ui-tabview\n.ui-tabview-nav\nli.ui-state-active {\n  background-color: #7ac2fa;\n  border: 1px solid #7ac2fa; }\n\nbody\n.root-form-container\n.ui-tabview.ui-tabview-top\n.ui-tabview\n.ui-tabview\n.ui-tabview-nav\nli.ui-state-active:hover {\n  border: 1px solid #239efc;\n  background-color: #239efc; }\n\nbody\n.root-form-container\n.ui-tabview-panel\n.ui-tabview.ui-tabview-top\n.ui-tabview\n.ui-tabview-nav\nli {\n  font-size: 11px;\n  margin-top: -2px; }\n\nbody .form-container .code-editor .editor-container {\n  height: calc(100vh - 230px) !important;\n  width: 100vw;\n  overflow: hidden; }\n\nbody .form-container .code-editor {\n  margin-left: -15px; }\n\n.formgroup-container {\n  padding: 0;\n  margin: 0 !important; }\n\n.form-container .ui-button,\n.form-container p-button {\n  max-width: 100%; }\n\n.formgroup-container .ui-dropdown {\n  width: 100% !important; }\n\n.formgroup-container .ui-button .ui-button-text {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.formgroup-label {\n  font-weight: bold;\n  margin-bottom: 0; }\n\n.ui-sm-1,\n.ui-sm-2,\n.ui-sm-3,\n.ui-sm-4,\n.ui-sm-5,\n.ui-sm-6,\n.ui-sm-7,\n.ui-sm-8,\n.ui-sm-9,\n.ui-sm-10,\n.ui-sm-11,\n.ui-sm-12 {\n  padding: 0.5em; }\n\ndynamic-primeng-form-array .formgroup-container {\n  display: block;\n  float: left;\n  height: auto;\n  width: 100%; }\n\n.form-container\n.formgroup-tabular\n~ .formgroup-tabular\n.formgroup-tabular-child\ndiv\n> div\n> label {\n  display: none; }\n\n.form-container\n.formgroup-tabular-horizontal\n~ .formgroup-tabular-horizontal\n.formgroup-tabular-child\ndiv\n> div\n> label {\n  display: block;\n  visibility: hidden; }\n\n.form-container .formgroup-tabular .formgroup-label {\n  margin-top: 36px; }\n\n.form-container .formgroup-tabular ~ .formgroup-tabular .formgroup-label {\n  margin-top: 0; }\n\n.formgroup-tabular-horizontal {\n  width: auto !important;\n  margin-right: 10px !important;\n  display: inline-block; }\n\n.formgroup-tabular-horizontal .formgroup-tabular-child div > div > label {\n  margin-top: 0; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/form/form-instance.component.ts":
/*!*************************************************!*\
  !*** ./src/app/form/form-instance.component.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/**
 * This component is used to render a tree of DynamicForms recursively. The parent component is JobConfigComponent
 *
 * @export
 * @class JobDynamicFormComponent
 */
let JobDynamicFormComponent = class JobDynamicFormComponent {
    constructor() { }
    ngOnInit() { }
    ngAfterViewInit() { }
    isArray(array) {
        return Array.isArray(array);
    }
    isInArray(key, array) {
        return array.includes(key);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], JobDynamicFormComponent.prototype, "formSchema", void 0);
__decorate([
    core_1.ViewChild("rootElement"),
    __metadata("design:type", core_1.ElementRef)
], JobDynamicFormComponent.prototype, "rootElement", void 0);
JobDynamicFormComponent = __decorate([
    core_1.Component({
        selector: "app-form-instance",
        template: __webpack_require__(/*! ./form-instance.component.html */ "./src/app/form/form-instance.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./form-instance.component.scss */ "./src/app/form/form-instance.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], JobDynamicFormComponent);
exports.JobDynamicFormComponent = JobDynamicFormComponent;


/***/ }),

/***/ "./src/app/form/form-interfaces.ts":
/*!*****************************************!*\
  !*** ./src/app/form/form-interfaces.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 *The following class serves as the root object for a Form
It contains a schemaFactory which generates an array of FormSchemas (IFormSchema),
it contains the Form's possible modes (which can be used to filter IFormSchema and FormControls within the IFormSchema)
and the current form mode.

An instance of this class is passed to the <app-form> component
 *
 * @export
 * @class FormRootModel
 */
class FormRootModel {
    constructor(obj = {}) {
        Object.assign(this, obj);
    }
}
exports.FormRootModel = FormRootModel;


/***/ }),

/***/ "./src/app/form/form-mutable-array/form-mutable-array.component.html":
/*!***************************************************************************!*\
  !*** ./src/app/form/form-mutable-array/form-mutable-array.component.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container [formGroup]=\"group\">\n  <div [ngClass]=\"getClass('grid', 'control')\">\n    <div\n      [formArrayName]=\"model.id\"\n      [id]=\"elementId\"\n      [ngClass]=\"getClass('element', 'control')\"\n    >\n      <div\n        *ngFor=\"let groupModel of model.groups; let idx = index\"\n        role=\"group\"\n        [formGroupName]=\"idx\"\n        [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\"\n        class=\"form-group-control\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"\n        ></ng-container>\n\n        <dynamic-primeng-form-control\n          *ngFor=\"let _model of groupModel.group\"\n          [context]=\"groupModel\"\n          [group]=\"control.at(idx)\"\n          [hidden]=\"_model.hidden\"\n          [layout]=\"layout\"\n          [model]=\"_model\"\n          [templates]=\"templates\"\n          [ngClass]=\"[\n            getClass('element', 'host', _model),\n            getClass('grid', 'host', _model),\n            getClass('element', 'children'),\n            getClass('grid', 'children')\n          ]\"\n          (blur)=\"onBlur($event)\"\n          (change)=\"onChange($event)\"\n          (focus)=\"onFocus($event)\"\n          (pEvent)=\"onCustomEvent($event, null, true)\"\n        ></dynamic-primeng-form-control>\n\n        <ng-container\n          *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"\n        ></ng-container>\n\n        <a class=\"danger-col-outline delete-button\" (click)=\"removeItem(idx)\">\n          <fa-icon [icon]=\"['fas', 'times-circle']\" size=\"sm\"></fa-icon>\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <div [ngClass]=\"getClass('grid', 'label')\">\n    <a class=\"success-col-outline add-button\" (click)=\"addItem()\">\n      <fa-icon [icon]=\"['fas', 'plus-circle']\" size=\"sm\"></fa-icon>\n      Add element{{ model.label ? \" to \" + model.label : \"\" }}\n    </a>\n  </div>\n</ng-container>\n"

/***/ }),

/***/ "./src/app/form/form-mutable-array/form-mutable-array.component.scss":
/*!***************************************************************************!*\
  !*** ./src/app/form/form-mutable-array/form-mutable-array.component.scss ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".delete-button {\n  float: right;\n  position: absolute;\n  right: 0px;\n  bottom: 22px;\n  font-size: 18px; }\n\n.add-button {\n  margin-bottom: 10px !important;\n  display: block; }\n\n.form-group-control {\n  position: relative;\n  padding-right: 20px; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZm9ybS9mb3JtLW11dGFibGUtYXJyYXkvZm9ybS1tdXRhYmxlLWFycmF5LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsWUFBWTtFQUNaLGVBQWUsRUFBQTs7QUFHakI7RUFDRSw4QkFBOEI7RUFDOUIsY0FBYyxFQUFBOztBQUdoQjtFQUNFLGtCQUFrQjtFQUNsQixtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2Zvcm0vZm9ybS1tdXRhYmxlLWFycmF5L2Zvcm0tbXV0YWJsZS1hcnJheS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5kZWxldGUtYnV0dG9uIHtcbiAgZmxvYXQ6IHJpZ2h0O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAwcHg7XG4gIGJvdHRvbTogMjJweDtcbiAgZm9udC1zaXplOiAxOHB4O1xufVxuXG4uYWRkLWJ1dHRvbiB7XG4gIG1hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5mb3JtLWdyb3VwLWNvbnRyb2wge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG59XG4iXX0= */"

/***/ }),

/***/ "./src/app/form/form-mutable-array/form-mutable-array.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/form/form-mutable-array/form-mutable-array.component.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Adapted from ng-form DynamicPrimeNgFormArrayComponent
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
/**
 * The DynamicFormArrayComponent is immutable (in that it doesn't provide options to dynamically resize). This component adds controls (add and delete buttons) to overcome this limitation.
 *
 * @export
 * @class FormMutableArrayComponent
 */
let FormMutableArrayComponent = class FormMutableArrayComponent extends core_2.DynamicFormArrayComponent {
    constructor(layoutService, validationService, formService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.formService = formService;
        this.blur = new core_1.EventEmitter();
        this.change = new core_1.EventEmitter();
        this.customEvent = new core_1.EventEmitter();
        this.focus = new core_1.EventEmitter();
    }
    // From https://github.com/udos86/ng-dynamic-forms#form-arrays
    addItem() {
        this.formService.addFormArrayGroup(this.array, this.model);
    }
    removeItem(index) {
        this.formService.removeFormArrayGroup(index, this.array, this.model);
    }
    clear() {
        this.formService.clearFormArray(this.array, this.model);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", forms_1.FormGroup)
], FormMutableArrayComponent.prototype, "group", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], FormMutableArrayComponent.prototype, "layout", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", core_2.DynamicFormArrayModel)
], FormMutableArrayComponent.prototype, "model", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", core_1.QueryList)
], FormMutableArrayComponent.prototype, "templates", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FormMutableArrayComponent.prototype, "blur", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FormMutableArrayComponent.prototype, "change", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FormMutableArrayComponent.prototype, "customEvent", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], FormMutableArrayComponent.prototype, "focus", void 0);
FormMutableArrayComponent = __decorate([
    core_1.Component({
        selector: "app-form-mutable-array",
        template: __webpack_require__(/*! ./form-mutable-array.component.html */ "./src/app/form/form-mutable-array/form-mutable-array.component.html"),
        styles: [__webpack_require__(/*! ./form-mutable-array.component.scss */ "./src/app/form/form-mutable-array/form-mutable-array.component.scss")]
    }),
    __metadata("design:paramtypes", [core_2.DynamicFormLayoutService,
        core_2.DynamicFormValidationService,
        core_2.DynamicFormService])
], FormMutableArrayComponent);
exports.FormMutableArrayComponent = FormMutableArrayComponent;


/***/ }),

/***/ "./src/app/form/form.component.html":
/*!******************************************!*\
  !*** ./src/app/form/form.component.html ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"root-form-container\" *ngIf=\"visible\">\n  <ng-content select=\".form-header\"></ng-content>\n\n  <div class=\"form-mode-dropdown-container\">\n    <p-dropdown\n      styleClass=\"form-mode-dropdown\"\n      *ngIf=\"availableFormModes.length > 1\"\n      [options]=\"availableFormModes\"\n      [(ngModel)]=\"formMode\"\n      (ngModelChange)=\"initAllFormGroups()\"\n      optionLabel=\"name\"\n    ></p-dropdown>\n  </div>\n\n  <div class=\"form-instance\">\n    <app-form-instance\n      [formSchema]=\"formSchema\"\n      *ngIf=\"formSchema !== undefined\"\n    ></app-form-instance>\n    <div\n      class=\"empty-placeholder\"\n      *ngIf=\"formSchema === undefined || formSchema === []\"\n    >\n      No form elements to display.\n    </div>\n  </div>\n\n  <div class=\"sidebar-padding sidebar-footer\">\n    <ng-content select=\".form-footer\"></ng-content>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/form/form.component.scss":
/*!******************************************!*\
  !*** ./src/app/form/form.component.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".form-instance {\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: hidden; }\n\n.root-form-container {\n  display: grid;\n  grid-template-columns: auto;\n  grid-template-rows: -webkit-min-content auto -webkit-min-content;\n  grid-template-rows: min-content auto min-content;\n  height: 100%;\n  max-width: 100vw;\n  min-width: 300px; }\n\nbody .ui-sidebar .root-form-container .form-header {\n  background-color: #ffffff; }\n\n.form-mode-dropdown-container {\n  position: absolute;\n  top: 28px;\n  right: 10px; }\n\n.form-mode-dropdown.ui-dropdown {\n  min-width: 0;\n  max-width: 150px;\n  background: none;\n  border: none;\n  font-size: 12px; }\n\n.form-mode-dropdown.ui-dropdown .ui-dropdown-label {\n  background: none; }\n\n.form-mode-dropdown.ui-dropdown .ui-dropdown-trigger {\n  background: none; }\n\n.form-mode-dropdown.ui-dropdown .ui-dropdown-panel {\n  right: 0;\n  left: unset !important; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZm9ybS9mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQiw0Q0FBNEM7RUFDNUMsa0JBQWtCLEVBQUE7O0FBR3BCO0VBQ0UsYUFBYTtFQUNiLDJCQUEyQjtFQUMzQixnRUFBZ0Q7RUFBaEQsZ0RBQWdEO0VBQ2hELFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsZ0JBQWdCLEVBQUE7O0FBR2xCO0VBQ0UseUJBQXlCLEVBQUE7O0FBRzNCO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxXQUFXLEVBQUE7O0FBR2I7RUFDRSxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixZQUFZO0VBQ1osZUFBZSxFQUFBOztBQUdqQjtFQUNFLGdCQUFnQixFQUFBOztBQUdsQjtFQUNFLGdCQUFnQixFQUFBOztBQUlsQjtFQUNFLFFBQVE7RUFDUixzQkFBc0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2Zvcm0vZm9ybS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWluc3RhbmNlIHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteTogb3ZlcmxheTtcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cblxuLnJvb3QtZm9ybS1jb250YWluZXIge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG87XG4gIGdyaWQtdGVtcGxhdGUtcm93czogbWluLWNvbnRlbnQgYXV0byBtaW4tY29udGVudDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXgtd2lkdGg6IDEwMHZ3O1xuICBtaW4td2lkdGg6IDMwMHB4O1xufVxuXG5ib2R5IC51aS1zaWRlYmFyIC5yb290LWZvcm0tY29udGFpbmVyIC5mb3JtLWhlYWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG59XG5cbi5mb3JtLW1vZGUtZHJvcGRvd24tY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDI4cHg7XG4gIHJpZ2h0OiAxMHB4O1xufVxuXG4uZm9ybS1tb2RlLWRyb3Bkb3duLnVpLWRyb3Bkb3duIHtcbiAgbWluLXdpZHRoOiAwO1xuICBtYXgtd2lkdGg6IDE1MHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG4gIGZvbnQtc2l6ZTogMTJweDtcbn1cblxuLmZvcm0tbW9kZS1kcm9wZG93bi51aS1kcm9wZG93biAudWktZHJvcGRvd24tbGFiZWwge1xuICBiYWNrZ3JvdW5kOiBub25lO1xufVxuXG4uZm9ybS1tb2RlLWRyb3Bkb3duLnVpLWRyb3Bkb3duIC51aS1kcm9wZG93bi10cmlnZ2VyIHtcbiAgYmFja2dyb3VuZDogbm9uZTtcbn1cblxuLy8gTWFrZSBkcm9wZG93biBtZW51IGFsaWduIHJpZ2h0IGluc3RlYWQgb2YgbGVmdFxuLmZvcm0tbW9kZS1kcm9wZG93bi51aS1kcm9wZG93biAudWktZHJvcGRvd24tcGFuZWwge1xuICByaWdodDogMDtcbiAgbGVmdDogdW5zZXQgIWltcG9ydGFudDtcbn1cbiJdfQ== */"

/***/ }),

/***/ "./src/app/form/form.component.ts":
/*!****************************************!*\
  !*** ./src/app/form/form.component.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const mergeOptions = __webpack_require__(/*! merge-options */ "./node_modules/merge-options/index.js");
const isPlainObject = __webpack_require__(/*! is-plain-obj */ "./node_modules/is-plain-obj/index.js");
const form_interfaces_1 = __webpack_require__(/*! ./form-interfaces */ "./src/app/form/form-interfaces.ts");
const get_form_validation_errors_1 = __webpack_require__(/*! ./get-form-validation-errors */ "./src/app/form/get-form-validation-errors.ts");
const config_service_1 = __webpack_require__(/*! ../services/config.service */ "./src/app/services/config.service.ts");
const auth_service_1 = __webpack_require__(/*! ../services/auth.service */ "./src/app/services/auth.service.ts");
/**
 * This is the 'root' Job Config form component - it wraps up all othe Form components. It also provides helper functions for setting/fetching form value, creating new forms.
 *
 * @export
 * @class JobConfigComponent
 */
let JobConfigComponent = class JobConfigComponent {
    constructor(formService, configService, authService) {
        this.formService = formService;
        this.configService = configService;
        this.authService = authService;
        this.visible = false;
        this.submitOnClose = false;
        this.submit = new core_1.EventEmitter();
        // Are form values valid (for all forms)
        this.isValid = false;
        this.valid = new core_1.EventEmitter();
        this.init = false;
        this.updatingFormValues = false;
        // Does the form need to be updated when next visible? (as form values aren't updated while it is invisible)
        this.updateFormValuesOnVisible = false;
        // Has the user made changes to form values?
        this.valuesChanged = false;
        // Find and update all (nested) formControls
        this.updateFormControlModelValues = (form, formModel, value) => {
            if (typeof value === "undefined") {
                return;
            }
            switch (formModel.type) {
                case core_2.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                    // update FormArrayModels (as NgDynamic form will not automatically populate FormArrayModels)
                    this.updateFormArrayModelValues(form, formModel, value);
                    break;
                case core_2.DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                    // update formGroup children
                    this.updateFormGroupModelValues(form, formModel, value);
                    break;
            }
        };
        this.updateFormGroupModelValues = (form, formModel, value) => {
            // For each element in the value array
            formModel.group.forEach(childFormControl => this.updateFormControlModelValues(form, childFormControl, value[childFormControl.id]));
        };
        this.updateFormArrayModelValues = (form, arrayFormModel, value) => {
            if (!Array.isArray(value)) {
                return;
            }
            // For each element in the value array
            value.forEach((valueElement, idx) => {
                // Get form group for the given index - and if it doesn't not exist, create it
                let arrayFormGroupModel = arrayFormModel.get(idx);
                if (typeof arrayFormGroupModel === "undefined") {
                    arrayFormGroupModel = arrayFormModel.insertGroup(idx);
                }
                // For each group model (each property/field in the Form Group) -> update the value
                arrayFormGroupModel.group.forEach(control => {
                    ;
                    control.valueUpdates.next(valueElement[control.id]);
                });
            });
            // Because we changed the formModel - we must recreate the form group
            this.createFormGroup(form);
        };
    }
    ngOnInit() {
        // If no formMode has been provided -> use default
        if (typeof this.formMode === "undefined") {
            this.formMode = this.form.defaultMode;
        }
        // Update form values when the subject values change
        this.subjectSubscription = this.subject.subscribe(values => {
            if (typeof values !== "undefined") {
                if (typeof this.form.subjectPropertyKey === "string") {
                    this.currentSubjectValues = values[this.form.subjectPropertyKey];
                }
                else {
                    this.currentSubjectValues = values;
                }
                if (!this.init) {
                    this.initAllFormGroups();
                }
                else {
                    this.updateFormValues();
                }
            }
        });
        // Submit form when the submitFormSubject is fired -> this allows submit to be fired outside of the component
        if (typeof this.submitFormSubject !== "undefined") {
            this.submitFormSubscription = this.submitFormSubject.subscribe(submit => {
                if (submit) {
                    this.submitForm();
                    this.submitFormSubject.next(false);
                }
            });
        }
    }
    ngAfterViewInit() { }
    ngOnDestroy() {
        if (typeof this.subjectSubscription !== "undefined") {
            this.subjectSubscription.unsubscribe();
        }
        if (typeof this.submitFormSubject !== "undefined") {
            this.submitFormSubscription.unsubscribe();
        }
        this.clearFormGroups();
    }
    ngOnChanges(changes) {
        if (this.init) {
            if ("visible" in changes) {
                // If visible and updateFormValuesOnVisible -> updateFormValues
                if (changes.visible.currentValue === true) {
                    if (this.updateFormValuesOnVisible) {
                        this.updateFormValues();
                    }
                    // On jobConfig hide -> submit the form if changes have occurred
                }
                else if (this.submitOnClose &&
                    changes.visible.previousValue === true &&
                    this.valuesChanged) {
                    this.submitForm();
                }
            }
            if ("form" in changes || "formMode" in changes) {
                this.initAllFormGroups();
            }
        }
    }
    submitForm() {
        if (typeof this.currentSubjectValues !== "undefined") {
            let newSubject;
            if (typeof this.form.subjectPropertyKey === "string") {
                newSubject = this.subject.getValue();
                newSubject[this.form.subjectPropertyKey] = this.currentSubjectValues;
            }
            else {
                newSubject = this.currentSubjectValues;
            }
            this.subject.next(newSubject);
            this.submit.emit({ values: newSubject });
        }
    }
    // call function on every form instance in the given formSchema
    forEachForm(fn, formSchema = this.formSchema) {
        if (!Array.isArray(formSchema)) {
            return;
        }
        formSchema.forEach((formSchemaChild, index, array) => {
            if (Array.isArray(formSchemaChild.form)) {
                this.forEachForm(fn, formSchemaChild.form);
            }
            else {
                fn(formSchemaChild.form, formSchemaChild, index, array);
            }
        });
    }
    filterFormSchema(fn, formSchema = this.formSchema) {
        const filteredFormSchema = formSchema.filter(fn);
        filteredFormSchema.forEach((form, index) => {
            if (Array.isArray(form.form)) {
                filteredFormSchema[index].form = this.filterFormSchema(fn, form.form);
            }
        });
        return filteredFormSchema;
    }
    initAllFormGroups() {
        if (typeof this.form.schemaFactory === "function") {
            this.formSchema = this.form.schemaFactory(this.formMode, this.configService);
        }
        else {
            this.formSchema = this.form.schemaFactory;
        }
        // Filter formSchema based on form mode and corresponding user roles
        this.formSchema = this.filterFormSchema(formSchema => formSchema.modeKeys.includes(this.formMode.key) &&
            this.formMode.userRoles.includes(this.authService.userRole));
        if (this.configService.debugMode) {
            console.log(this.formSchema);
        }
        // Update available form modes based on user role of logged in user
        if (this.authService.isLoggedIn) {
            this.availableFormModes = this.form.modes.filter(mode => mode.userRoles.includes(this.authService.userRole));
        }
        else {
            this.availableFormModes = [];
        }
        // For each form in tree -> check current formMode (and corresponding user roles) and hide forms which don't apply
        this.forEachForm((form, formSchema, currentIndex, currentArray) => {
            if (formSchema.modeKeys.includes(this.formMode.key) &&
                this.formMode.userRoles.includes(this.authService.userRole)) {
                this.createFormGroup(form);
            }
            else {
                currentArray.splice(currentIndex, 1);
            }
        });
        // UpdateFormValues must come after setting init = true
        this.init = true;
        this.updateFormValues();
    }
    createFormGroup(form) {
        form.formGroup = this.formService.createFormGroup(form.model);
        form.savingValuesChanges = false;
        form.valueChangeSub = form.formGroup.valueChanges.subscribe(values => {
            // If form is visible -> Update now
            if (this.visible) {
                this.saveFormValues(form, values);
                // Else -> mark for update when form is visible
            }
            else {
                this.updateFormValuesOnVisible = true;
            }
        });
    }
    clearFormGroups() {
        this.forEachForm((form, formSchema) => {
            if (typeof form.valueChangeSub !== "undefined") {
                form.valueChangeSub.unsubscribe();
            }
        });
    }
    updateFormValidation() {
        let isValid = true;
        this.forEachForm((form, formSchema) => {
            if (typeof form.formGroup !== "undefined" && form.formGroup.invalid) {
                if (this.configService.debugMode) {
                    console.log("INVALID");
                    console.log(form.formGroup.controls);
                    console.log(get_form_validation_errors_1.getFormValidationErrors(form.formGroup.controls));
                }
                isValid = false;
            }
        });
        this.isValid = isValid;
        this.valid.emit(isValid);
    }
    saveFormValues(form, values) {
        if (typeof this.currentSubjectValues !== "undefined" &&
            this.init &&
            !this.updatingFormValues &&
            !form.savingValuesChanges) {
            form.savingValuesChanges = true;
            this.valuesChanged = true;
            // Mark config is Valid if all form groups are valid
            this.updateFormValidation();
            // If *the current* form group is valid -> assign values to currentJob
            if (form.formGroup.valid) {
                Object.keys(values).forEach(key => {
                    // Fix arrays - a NgDynamicForms will changes array keys to strings (resulting in an Object)
                    if (Array.isArray(this.currentSubjectValues[key]) &&
                        !Array.isArray(values[key])) {
                        values[key] = Object.values(values[key]);
                    }
                });
                // Merge value into currentJob
                Object.keys(values).forEach(key => {
                    if (isPlainObject(values[key])) {
                        if (typeof this.currentSubjectValues[key] !== "undefined" &&
                            this.currentSubjectValues[key] !== null) {
                            this.currentSubjectValues[key] = mergeOptions(this.currentSubjectValues[key], values[key]);
                        }
                        else {
                            this.currentSubjectValues[key] = values[key];
                        }
                    }
                    else {
                        this.currentSubjectValues[key] = values[key];
                    }
                });
            }
            form.savingValuesChanges = false;
        }
    }
    updateFormValues() {
        if (typeof this.currentSubjectValues !== "undefined" &&
            this.init &&
            !this.updatingFormValues) {
            this.updatingFormValues = true;
            try {
                // We have to 'resolve' subject getters/setters as they don't work with NgDynamicForms
                this.forEachForm((form, formSchema) => {
                    // Update Form control models before patching values (eg pre populate form array groups)
                    form.model.forEach(currentFormModel => this.updateFormControlModelValues(form, currentFormModel, this.currentSubjectValues[currentFormModel.id]));
                    form.formGroup.patchValue(
                    // Create an object with the subject properties that are needed for the given form
                    form.model.reduce((jobResolvedProperties, currentFormModel) => {
                        const value = this.currentSubjectValues[currentFormModel.id];
                        if (typeof value !== "undefined") {
                            jobResolvedProperties[currentFormModel.id] = value;
                        }
                        return jobResolvedProperties;
                    }, {}));
                });
            }
            catch (error) {
                console.log(error);
            }
            this.updateFormValidation();
            this.updateFormValuesOnVisible = false;
            this.updatingFormValues = false;
        }
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], JobConfigComponent.prototype, "visible", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], JobConfigComponent.prototype, "submitOnClose", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", form_interfaces_1.FormRootModel)
], JobConfigComponent.prototype, "form", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], JobConfigComponent.prototype, "formMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", rxjs_1.BehaviorSubject)
], JobConfigComponent.prototype, "subject", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", rxjs_1.Subject)
], JobConfigComponent.prototype, "submitFormSubject", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], JobConfigComponent.prototype, "submit", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], JobConfigComponent.prototype, "valid", void 0);
JobConfigComponent = __decorate([
    core_1.Component({
        selector: "app-form",
        template: __webpack_require__(/*! ./form.component.html */ "./src/app/form/form.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./form.component.scss */ "./src/app/form/form.component.scss")]
    }),
    __metadata("design:paramtypes", [core_2.DynamicFormService,
        config_service_1.ConfigService,
        auth_service_1.AuthService])
], JobConfigComponent);
exports.JobConfigComponent = JobConfigComponent;


/***/ }),

/***/ "./src/app/form/get-form-validation-errors.ts":
/*!****************************************************!*\
  !*** ./src/app/form/get-form-validation-errors.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Adapted from https://stackoverflow.com/a/46080244
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
function getFormValidationErrors(controls) {
    let errors = [];
    Object.keys(controls).forEach(key => {
        const control = controls[key];
        if (control instanceof forms_1.FormGroup) {
            errors = errors.concat(getFormValidationErrors(control.controls));
        }
        const controlErrors = controls[key].errors;
        if (controlErrors !== null) {
            Object.keys(controlErrors).forEach(keyError => {
                errors.push({
                    control_name: key,
                    error_name: keyError,
                    error_value: controlErrors[keyError],
                });
            });
        }
    });
    return errors;
}
exports.getFormValidationErrors = getFormValidationErrors;


/***/ }),

/***/ "./src/app/form/monaco-editor/code-editor-model.ts":
/*!*********************************************************!*\
  !*** ./src/app/form/monaco-editor/code-editor-model.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const mergeOptions = __webpack_require__(/*! ../../../../node_modules/merge-options */ "./node_modules/merge-options/index.js");
exports.DYNAMIC_FORM_CONTROL_TYPE_CODE_EDITOR = "CODE_EDITOR";
exports.dynamicCodeEditorConfigDefaults = {
    wordWrap: "on",
    language: "cpp",
    fontSize: 12,
    scrollBeyondLastLine: false,
};
/**
 * DynamicInputControlModel for the Monaco code editor
 *
 * @export
 * @class DynamicCodeEditorModel
 */
class DynamicCodeEditorModel extends core_1.DynamicInputControlModel {
    constructor(config, layout) {
        super(config, layout);
        this.type = exports.DYNAMIC_FORM_CONTROL_TYPE_CODE_EDITOR;
        this.options = mergeOptions(exports.dynamicCodeEditorConfigDefaults, config.options || {});
        // This is needed so the monaco assets are loaded from the correct location
        this.options.baseUrl = "./assets";
    }
}
__decorate([
    core_1.serializable(),
    __metadata("design:type", Object)
], DynamicCodeEditorModel.prototype, "options", void 0);
__decorate([
    core_1.serializable(),
    __metadata("design:type", String)
], DynamicCodeEditorModel.prototype, "type", void 0);
exports.DynamicCodeEditorModel = DynamicCodeEditorModel;


/***/ }),

/***/ "./src/app/form/monaco-editor/form-monaco-editor.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/form/monaco-editor/form-monaco-editor.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container [formGroup]=\"group\">\n  <ngx-monaco-editor\n    class=\"code-editor\"\n    [formControlName]=\"model.id\"\n    [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n    (blur)=\"onBlur($event)\"\n    (change)=\"onChange($event)\"\n    (focus)=\"onFocus($event)\"\n    [(options)]=\"model.options\"\n    #codeEditor\n  >\n  </ngx-monaco-editor>\n  <app-spinner [spinnerTarget]=\"'dynamic-code-editor-component'\"></app-spinner>\n</ng-container>\n"

/***/ }),

/***/ "./src/app/form/monaco-editor/form-monaco-editor.component.scss":
/*!**********************************************************************!*\
  !*** ./src/app/form/monaco-editor/form-monaco-editor.component.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".monaco-aria-container {\n  position: absolute;\n  left: -999em;\n  top: 0;\n  z-index: 1500; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvZm9ybS9tb25hY28tZWRpdG9yL2Zvcm0tbW9uYWNvLWVkaXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osTUFBTTtFQUNOLGFBQWEsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2Zvcm0vbW9uYWNvLWVkaXRvci9mb3JtLW1vbmFjby1lZGl0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubW9uYWNvLWFyaWEtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAtOTk5ZW07XG4gIHRvcDogMDtcbiAgei1pbmRleDogMTUwMDsgLy8gU2FtZSBhcyBkaWFsb2dzXG59XG4iXX0= */"

/***/ }),

/***/ "./src/app/form/monaco-editor/form-monaco-editor.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/form/monaco-editor/form-monaco-editor.component.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const ngx_monaco_editor_1 = __webpack_require__(/*! ngx-monaco-editor */ "./node_modules/ngx-monaco-editor/fesm2015/ngx-monaco-editor.js");
const code_editor_model_1 = __webpack_require__(/*! ./code-editor-model */ "./src/app/form/monaco-editor/code-editor-model.ts");
const spinner_service_service_1 = __webpack_require__(/*! src/app/spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
/**
 * DynamicFormControlComponent for the Monaco code editor.
 *
 * @export
 * @class DynamicCodeEditorComponent
 */
let DynamicCodeEditorComponent = class DynamicCodeEditorComponent extends core_2.DynamicFormControlComponent {
    constructor(layoutService, validationService, spinnerService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.spinnerService = spinnerService;
        this.blur = new core_1.EventEmitter();
        this.change = new core_1.EventEmitter();
        this.customEvent = new core_1.EventEmitter();
        this.focus = new core_1.EventEmitter();
    }
    ngOnInit() {
        this.spinnerService.setSpinner("dynamic-code-editor-component-loading", {
            target: "dynamic-code-editor-component",
            icon: spinner_service_service_1.SpinnerIcon.Ball8Bit,
            name: "Loading editor..",
        });
    }
    ngAfterViewInit() {
        this.codeEditorInitSubscription = this.codeEditor.onInit.subscribe(() => {
            this.spinnerService.removeSpinner("dynamic-code-editor-component-loading");
        });
    }
    ngOnDestroy() {
        this.codeEditorInitSubscription.unsubscribe();
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", forms_1.FormGroup)
], DynamicCodeEditorComponent.prototype, "group", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DynamicCodeEditorComponent.prototype, "layout", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", code_editor_model_1.DynamicCodeEditorModel)
], DynamicCodeEditorComponent.prototype, "model", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DynamicCodeEditorComponent.prototype, "blur", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DynamicCodeEditorComponent.prototype, "change", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DynamicCodeEditorComponent.prototype, "customEvent", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DynamicCodeEditorComponent.prototype, "focus", void 0);
__decorate([
    core_1.ViewChild("codeEditor"),
    __metadata("design:type", ngx_monaco_editor_1.EditorComponent)
], DynamicCodeEditorComponent.prototype, "codeEditor", void 0);
DynamicCodeEditorComponent = __decorate([
    core_1.Component({
        selector: "app-form-monaco-editor",
        template: __webpack_require__(/*! ./form-monaco-editor.component.html */ "./src/app/form/monaco-editor/form-monaco-editor.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./form-monaco-editor.component.scss */ "./src/app/form/monaco-editor/form-monaco-editor.component.scss")]
    }),
    __metadata("design:paramtypes", [core_2.DynamicFormLayoutService,
        core_2.DynamicFormValidationService,
        spinner_service_service_1.SpinnerService])
], DynamicCodeEditorComponent);
exports.DynamicCodeEditorComponent = DynamicCodeEditorComponent;


/***/ }),

/***/ "./src/app/geo-web/geoweb.component.html":
/*!***********************************************!*\
  !*** ./src/app/geo-web/geoweb.component.html ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"geoweb-container\"\n  #geowebContainer>\n  <app-file-drop-upload dropZoneClassName=\"fullscreen-file-drop-upload\">\n\n    <app-spinner spinnerTarget=\"file-drop-upload\"\n      [fullScreenOverlay]=\"true\"\n      zIndex=\"1990\"></app-spinner>\n    <app-spinner [fullScreenOverlay]=\"true\"></app-spinner>\n    <app-file-browser></app-file-browser>\n\n    <div id=\"connection-status\"\n      [ngClass]=\"wsConnected ? 'connected' : 'disconnected'\">\n      {{ wsConnected ? \"connected\" : \"connecting...\" }}\n    </div>\n    <app-map></app-map>\n\n    <p-slideMenu #mainMenu\n      [model]=\"menuItems\"\n      [popup]=\"true\"\n      appendTo=\"body\"\n      styleClass=\"geoweb-menu\"\n      baseZIndex=\"1300\"\n      viewportHeight=\"197\"\n      effectDuration=\"150\"\n      showTransitionOptions=\"150ms ease-out\"\n      hideTransitionOptions=\"150ms ease-in\"></p-slideMenu>\n    <div id=\"top-left-controls\">\n      <div class=\"fake-leaflet-control-lg\">\n        <a title=\"Show Menu\"\n          (click)=\"mainMenu.toggle($event)\">\n          <fa-icon [icon]=\"['fas', 'bars']\"></fa-icon>\n        </a>\n      </div>\n\n      <div class=\"fake-leaflet-control-lg\"\n        *ngIf=\"currentJob === undefined\"\n        [hidden]=\"mainMenu.visible\">\n        <a title=\"Get job\"\n          (click)=\"showGetJobDialog()\">\n          <fa-icon [icon]=\"['fas', 'folder-open']\"></fa-icon>\n        </a>\n      </div>\n\n      <div class=\"fake-leaflet-control-lg\"\n        *ngIf=\"currentJob !== undefined && !currentJob.clientOnly\"\n        [hidden]=\"mainMenu.visible\">\n        <a title=\"Run Simulation\"\n          (click)=\"runJob()\"\n          *ngIf=\"\n            currentJob.status !== 'RUNNING' && currentJob.status !== 'QUEUED'\n          \">\n          <fa-icon [icon]=\"['fas', 'play']\"></fa-icon>\n        </a>\n        <a title=\"Stop Simulation\"\n          (click)=\"stopJob()\"\n          *ngIf=\"\n            currentJob.status === 'RUNNING' || currentJob.status === 'QUEUED'\n          \">\n          <fa-icon [icon]=\"['fas', 'stop']\"></fa-icon>\n        </a>\n      </div>\n    </div>\n\n    <div class=\"command-textbox-container\"\n      [hidden]=\"!showCommandTextbox\">\n      <input type=\"text\"\n        id=\"command-textbox\"\n        placeholder=\"Commands: get-job <job-name>, new-job <job-name> <template-name>\" />\n    </div>\n\n    <p-dialog header=\"New Job\"\n      [(visible)]=\"newJobDialogVisible\"\n      modal=\"true\"\n      styleClass=\"modal-dialog\"\n      [closeOnEscape]=\"false\"\n      [draggable]=\"false\"\n      [resizable]=\"false\"\n      (keyup)=\"onKeypress($event, 'Enter', submitNewJobDialog.bind(this))\"\n      #newJobDialog>\n      <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n        <div class=\"ui-grid-row\">\n          <div class=\"ui-grid-col-12\">\n            <span class=\"label\">Name</span>\n            <input type=\"text\"\n              pInputText\n              placeholder=\"Name\"\n              [(ngModel)]=\"newJob.name\"\n              required\n              [customValidator]=\"\n                customFormValidators.alphaNumericDashesValidator\n              \"\n              #newJobNameInput=\"ngModel\" />\n            <ul *ngIf=\"newJobNameInput.touched && newJobNameInput.errors\">\n              <li *ngIf=\"newJobNameInput.errors.customValidator\"\n                class=\"ui-message ui-messages-error\">\n                {{\n                  customFormValidators.alphaNumericDashesValidator.errorMessage\n                }}\n              </li>\n              <li *ngIf=\"newJobNameInput.errors.required\"\n                class=\"ui-message ui-messages-error\">\n                A job name is required\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"ui-grid-row\">\n          <div class=\"ui-grid-col-12\">\n            <span class=\"label\">Type</span>\n\n            <p-dropdown [options]=\"availableJobTypes\"\n              [(ngModel)]=\"newJobSelectedJobType\"\n              optionLabel=\"value.label\"\n              [autoDisplayFirst]=\"false\"\n              [required]=\"true\">\n            </p-dropdown>\n          </div>\n        </div>\n\n        <div class=\"ui-grid-row\">\n          <div class=\"ui-grid-col-12\">\n            <span class=\"label\">Template<a title=\"Refresh List\"\n                (click)=\"updateJobLists()\"\n                style=\"float:right\">\n                <fa-icon [icon]=\"['fas', 'sync']\"></fa-icon>\n              </a></span>\n            <p-listbox [options]=\"availableJobTemplates\"\n              [(ngModel)]=\"newJobSelectedJobTemplate\">\n              <ng-template let-jobTemplate\n                let-i=\"index\"\n                pTemplate=\"item\">\n                <div class=\"ui-helper-clearfix\">\n                  {{ jobTemplate.value.name\n                  }}<b>\n                    {{ jobTemplate.value.type }}\n                  </b>\n                </div>\n              </ng-template>\n            </p-listbox>\n          </div>\n        </div>\n      </div>\n      <p-footer>\n        <button type=\"button\"\n          pButton\n          icon=\"pi pi-times\"\n          (click)=\"cancelNewJobDialog()\"\n          label=\"Cancel\"\n          class=\"ui-button-secondary\"></button>\n        <button type=\"button\"\n          pButton\n          icon=\"pi pi-check\"\n          (click)=\"submitNewJobDialog(); newJobNameInput.reset()\"\n          label=\"Create Job\"\n          [disabled]=\"newJobNameInput.errors\"></button>\n      </p-footer>\n    </p-dialog>\n\n    <p-dialog header=\"Load Job\"\n      [(visible)]=\"getJobDialogVisible\"\n      modal=\"true\"\n      styleClass=\"modal-dialog\"\n      [closeOnEscape]=\"false\"\n      [draggable]=\"false\"\n      [resizable]=\"false\"\n      (keyup)=\"onKeypress($event, 'Enter', submitGetJobDialog.bind(this))\"\n      #getJobDialog>\n      <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n        <div class=\"ui-grid-row\">\n          <div class=\"ui-grid-col-12\">\n            <span class=\"label\">Jobs<a title=\"Refresh List\"\n                (click)=\"updateJobLists()\"\n                style=\"float:right\">\n                <fa-icon [icon]=\"['fas', 'sync']\"></fa-icon>\n              </a></span>\n            <div class=\"empty-placeholder\"\n              *ngIf=\"availableJobs.length === 0\">\n              No jobs available.\n            </div>\n            <p-listbox *ngIf=\"availableJobs.length > 0\"\n              [options]=\"availableJobs\"\n              [(ngModel)]=\"getJobSelectedJob\"\n              styleClass=\"load-job-list\"\n              (keyup)=\"onKeypress($event, 'Enter', submitGetJobDialog.bind(this))\">\n              <ng-template let-availableJob\n                let-i=\"index\"\n                pTemplate=\"item\">\n                <span>{{ availableJob.value.name\n                  }}<b>\n                    {{ availableJob.value.type }}\n                  </b>\n                  <span class=\"font-italic-light\"\n                    *ngIf=\"debugMode\">\n                    {{ availableJob.value.status }}\n                  </span></span>\n\n                <span>\n                  <p-progressBar [value]=\"availableJob.value.progress\"\n                    *ngIf=\"debugMode && availableJob.value.status === 'RUNNING'\"></p-progressBar>\n                </span>\n                <span>\n                  <span *ngIf=\"isAdmin\">\n                    <a title=\"Run Job\"\n                      (click)=\"runJob(availableJob.value.name)\"\n                      class=\"icon-link\"\n                      *ngIf=\"\n                        !(\n                          availableJob.value.status === 'STARTING' ||\n                          availableJob.value.status === 'QUEUED' ||\n                          availableJob.value.status === 'RUNNING'\n                        )\n                      \">\n                      <fa-icon [icon]=\"['fas', 'play']\"\n                        class=\"icon-link\"></fa-icon>\n                    </a>\n                    <a title=\"Stop Job\"\n                      (click)=\"stopJob(availableJob.value.name)\"\n                      class=\"icon-link\"\n                      *ngIf=\"\n                        availableJob.value.status === 'STARTING' ||\n                        availableJob.value.status === 'QUEUED' ||\n                        availableJob.value.status === 'RUNNING'\n                      \">\n                      <fa-icon [icon]=\"['fas', 'stop']\"></fa-icon>\n                    </a>\n                    <a title=\"Delete Job\"\n                      class=\"icon-link\"\n                      (click)=\"deleteJob(availableJob.value.name)\"\n                      disabled>\n                      <fa-icon [icon]=\"['fas', 'trash']\"></fa-icon>\n                    </a>\n                  </span>\n                  <span class=\"badge\">\n                    <fa-icon [icon]=\"['fas', 'users']\"\n                      style=\"padding-right: 5px\"></fa-icon>{{ availableJob.value.connectedUsers }}\n                  </span>\n                </span>\n              </ng-template>\n            </p-listbox>\n          </div>\n        </div>\n      </div>\n\n      <p-footer>\n        <button type=\"button\"\n          pButton\n          icon=\"pi pi-times\"\n          (click)=\"cancelGetJobDialog()\"\n          label=\"Cancel\"\n          class=\"ui-button-secondary\"></button>\n        <button type=\"button\"\n          pButton\n          icon=\"pi pi-check\"\n          (click)=\"submitGetJobDialog()\"\n          label=\"Load Job\"\n          [disabled]=\"getJobSelectedJob === undefined\"></button>\n      </p-footer>\n    </p-dialog>\n\n    <p-sidebar [(visible)]=\"showConfigController\"\n      position=\"left\"\n      [modal]=\"false\"\n      styleClass=\"width-fit-content\"\n      *ngIf=\"\n        currentJob !== undefined && currentJob.inputFormModel !== undefined\n      \">\n      <app-form [(visible)]=\"showConfigController\"\n        [form]=\"currentJob.inputFormModel\"\n        [formMode]=\"currentJob.inputFormModel.defaultMode\"\n        [subject]=\"jobSubject\"\n        (valid)=\"jobConfigFormIsValid = $event\"\n        [submitOnClose]=\"true\">\n        <div class=\"form-header\">\n          <h1>\n            {{ jobTypeDescriptionsMap[currentJob.type].label }}:&nbsp;<span\n              class=\"font-italic-light\">{{ currentJob.name }}</span>\n          </h1>\n        </div>\n        <div class=\"form-footer\">\n          <button type=\"button\"\n            pButton\n            icon=\"pi pi-caret-right\"\n            iconPos=\"right\"\n            label=\"Run Simulation\"\n            (click)=\"runJob()\"\n            [disabled]=\"!jobConfigFormIsValid || currentJob.clientOnly\"\n            style=\"float:right;\"></button>\n        </div>\n      </app-form>\n    </p-sidebar>\n\n    <p-sidebar [(visible)]=\"showLoggingController\"\n      position=\"left\"\n      [modal]=\"false\"\n      styleClass=\"log-sidebar\"\n      *ngIf=\"currentJob !== undefined\">\n      <h1>Logs</h1>\n\n      <div class=\"sidebar-container sidebar-padding log-messages-container\"\n        *ngIf=\"showLoggingController\">\n        <p *ngFor=\"let log of logs; let i = index\"\n          class=\"log-message\">\n          <b>{{ logs[logs.length - i - 1].name }} ({{\n              logs[logs.length - i - 1].type\n            }}):</b>\n          {{ logs[logs.length - i - 1].output }}\n        </p>\n\n        <br /><br />\n      </div>\n\n      <br />\n\n      <p-button label=\"Download Logs\"\n        icon=\"pi pi-download\"\n        iconPos=\"right\"\n        styleClass=\"ui-button-secondary\"\n        (click)=\"downloadUrl(getMasterJobFilesUrl() + currentJob.logFilePath)\"\n        pTooltip=\"Tab-delimited text file\"\n        tooltipPosition=\"top\"\n        tooltipZIndex=\"1400\"\n        style=\"float: left;\"></p-button>\n\n      <p-button icon=\"pi pi-times\"\n        iconPos=\"right\"\n        label=\"Clear\"\n        (click)=\"jobService.clearLogs()\"\n        styleClass=\"log-clear-button\"\n        style=\"float: right;\"></p-button>\n    </p-sidebar>\n\n    <p-sidebar [(visible)]=\"showServerConfigController\"\n      position=\"left\"\n      [modal]=\"false\"\n      styleClass=\"width-fit-content\"\n      *ngIf=\"serverConfigSubject !== undefined\">\n      <app-form [(visible)]=\"showServerConfigController\"\n        [form]=\"serverConfigForm\"\n        [subject]=\"serverConfigSubject\"\n        [submitFormSubject]=\"serverConfigFormSubmitSubject\"\n        (valid)=\"serverConfigFormIsValid = $event\"\n        (submit)=\"updateServerConfig($event)\">\n        <div class=\"form-header\">\n          <h1>Server Config</h1>\n        </div>\n        <div class=\"form-footer\">\n          <button type=\"button\"\n            pButton\n            icon=\"pi pi-caret-right\"\n            iconPos=\"right\"\n            label=\"Save\"\n            (click)=\"serverConfigFormSubmitSubject.next(true)\"\n            [disabled]=\"!serverConfigFormIsValid\"\n            style=\"float:right;\"></button>\n        </div>\n      </app-form>\n    </p-sidebar>\n  </app-file-drop-upload>\n</div>"

/***/ }),

/***/ "./src/app/geo-web/geoweb.component.scss":
/*!***********************************************!*\
  !*** ./src/app/geo-web/geoweb.component.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".fake-leaflet-control,\n.fake-leaflet-control-lg,\n.fake-leaflet-control-colours,\nbody .ui-sidebar,\n#connection-status,\nbody .geoweb-menu.ui-slidemenu {\n  color: #333;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  border: none;\n  background-clip: padding-box; }\n\n.fake-leaflet-control.active,\n.fake-leaflet-control-lg.active,\n.fake-leaflet-control-colours.active,\nbody .active.ui-sidebar,\n.active#connection-status,\nbody .active.geoweb-menu.ui-slidemenu {\n  background-color: #007ad9;\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n  color: #ffffff; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg {\n  margin-bottom: 10px;\n  position: relative; }\n\n.fake-leaflet-control {\n  height: 30px;\n  width: 30px; }\n\n.fake-leaflet-control-lg {\n  height: 44px;\n  width: 44px; }\n\n.fake-leaflet-control a,\n.fake-leaflet-control-lg a {\n  color: inherit;\n  height: 100%;\n  width: 100%;\n  display: block;\n  line-height: 0; }\n\n.fake-leaflet-control:hover,\n.fake-leaflet-control-lg:hover {\n  background-color: #f4f4f4; }\n\n.fake-leaflet-control a:hover,\n.fake-leaflet-control-lg a:hover {\n  color: #333;\n  cursor: pointer; }\n\n.fake-leaflet-control.active:hover,\n.fake-leaflet-control-lg.active:hover {\n  background-color: #1775bd; }\n\n.fake-leaflet-control.active a:hover,\n.fake-leaflet-control-lg.active a:hover,\n.fake-leaflet-control-colours.active a:hover,\nbody .active.ui-sidebar a:hover,\n.active#connection-status a:hover,\nbody .active.geoweb-menu.ui-slidemenu a:hover {\n  color: #ffffff; }\n\n.fake-leaflet-control fa-icon.ng-fa-icon,\n.fake-leaflet-control-lg fa-icon.ng-fa-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.fake-leaflet-control a {\n  font-size: 12px; }\n\n.fake-leaflet-control-lg a {\n  font-size: 24px; }\n\n* {\n  box-sizing: border-box; }\n\nbody,\nhtml {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px;\n  margin: 0;\n  padding: 0; }\n\n.c3 text {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px; }\n\nh1,\n.h1 {\n  font-size: 24px;\n  font-weight: 600; }\n\nh2,\n.h2 {\n  font-size: 18px;\n  font-weight: 500; }\n\npre {\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  white-space: -moz-pre-wrap;\n  white-space: -pre-wrap;\n  white-space: -o-pre-wrap;\n  word-wrap: break-word; }\n\n.font-italic-light {\n  font-weight: 100;\n  font-style: italic; }\n\n.text-overflow-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.label,\nlabel {\n  display: block;\n  margin-bottom: 10px;\n  margin-top: 20px; }\n\n.badge > .pi {\n  padding-right: 4px; }\n\na.icon-link:last-of-type {\n  padding-right: 10px; }\n\na.icon-link:first-of-type {\n  padding-left: 10px; }\n\na.icon-link {\n  font-size: 0.85em;\n  padding: 0 5px; }\n\nbody .ui-widget-overlay {\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: all linear 0.2s; }\n\n.ui-state-highlight a.icon-link {\n  color: #ffffff; }\n\n.ui-state-highlight a.icon-link:hover {\n  color: #ffffffba; }\n\n.empty-placeholder {\n  color: #999;\n  font-weight: 100;\n  padding: 20px 0;\n  /* height: 100%; */\n  text-align: center; }\n\n.ui-toast {\n  max-height: 100vh;\n  overflow-y: auto; }\n\n.ui-toast-detail {\n  word-break: break-word; }\n\n.modal-dialog.ui-dialog {\n  width: 400px; }\n\n.ui-dialog .ui-grid .ui-grid-row {\n  margin-bottom: 10px; }\n\n.ui-dialog .ui-listbox .ui-listbox-list-wrapper {\n  max-height: calc(100vh - 400px);\n  min-height: 100px; }\n\nbody .ui-dialog .ui-dialog-content {\n  max-height: calc(100vh - 200px);\n  min-height: 200px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar,\nbody .ui-dialog .ui-dialog-footer {\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-top: none; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-bottom: none; }\n\n.ui-dialog .ui-listbox .ui-progressbar {\n  display: inline-block;\n  width: 100%;\n  height: 14px;\n  margin-top: 3px;\n  margin-bottom: -3px;\n  background-color: #0000004a; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-label {\n  font-size: 12px;\n  line-height: 1.25;\n  color: inherit; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-value {\n  background: #0000006b; }\n\nbody .ui-widget,\nbody .ui-autocomplete.ui-autocomplete-multiple .ui-autocomplete-multiple-container .ui-autocomplete-input-token input,\nbody .ui-chips > ul.ui-inputtext .ui-chips-input-token input,\nbody .ui-table .ui-editable-column input,\nbody .ui-treetable .ui-editable-column input,\nbody .ui-terminal .ui-terminal-input {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; }\n\nbody .secondary-col, body .ui-orderlist .ui-orderlist-controls button,\nbody .ui-button.ui-state-default.ui-button-secondary,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #e8e8e8;\n  border-color: #e8e8e8; }\n\nbody .secondary-col:hover, body .ui-orderlist .ui-orderlist-controls button:hover,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:hover,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c8c8c8;\n  color: #333333;\n  border-color: #c8c8c8; }\n\nbody .secondary-col:enabled:focus, body .ui-orderlist .ui-orderlist-controls button:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:focus,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .secondary-col:active, body .ui-orderlist .ui-orderlist-controls button:active,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:active,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:active {\n  background-color: #a0a0a0;\n  color: #333333;\n  border-color: #a0a0a0; }\n\nbody .default-col,\nbody .ui-button.ui-state-default.ui-button-info,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #007ad9;\n  border-color: #007ad9; }\n\nbody .default-col:hover,\nbody .ui-button.ui-state-default.ui-button-info:enabled:hover,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:hover {\n  background-color: #116fbf;\n  color: #ffffff;\n  border-color: #116fbf; }\n\nbody .default-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-info:enabled:focus,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .default-col:active,\nbody .ui-button.ui-state-default.ui-button-info:enabled:active,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:active {\n  background-color: #005b9f;\n  color: #ffffff;\n  border-color: #005b9f; }\n\nbody .success-col,\nbody .ui-button.ui-state-default.ui-button-success,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #34a835;\n  border-color: #34a835; }\n\nbody .success-col:hover,\nbody .ui-button.ui-state-default.ui-button-success:enabled:hover,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:hover {\n  background-color: #107d11;\n  color: #ffffff;\n  border-color: #107d11; }\n\nbody .success-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success:enabled:focus,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col:active,\nbody .ui-button.ui-state-default.ui-button-success:enabled:active,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:active {\n  background-color: #0c6b0d;\n  color: #ffffff;\n  border-color: #0c6b0d; }\n\nbody .success-col-outline,\nbody .ui-button.ui-state-default.ui-button-success-outline,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default {\n  color: #34a835;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .success-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:hover,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #107d11;\n  border-color: #fff; }\n\nbody .success-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:focus,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:active,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #0c6b0d;\n  border-color: #fff; }\n\nbody .warning-col,\nbody .ui-button.ui-state-default.ui-button-warning,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #ffba01;\n  border-color: #ffba01; }\n\nbody .warning-col:hover,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:hover,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:hover {\n  background-color: #ed990b;\n  color: #333333;\n  border-color: #ed990b; }\n\nbody .warning-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:focus,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #ffeab4; }\n\nbody .warning-col:active,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:active,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:active {\n  background-color: #d38b10;\n  color: #333333;\n  border-color: #d38b10; }\n\nbody .danger-col,\nbody .ui-button.ui-state-default.ui-button-danger,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #e91224;\n  border-color: #e91224; }\n\nbody .danger-col:hover,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:hover,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c01120;\n  color: #ffffff;\n  border-color: #c01120; }\n\nbody .danger-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:focus,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col:active,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:active,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:active {\n  background-color: #a90000;\n  color: #ffffff;\n  border-color: #a90000; }\n\nbody .danger-col-outline,\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  color: #e91224;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  border-color: #e91224; }\n\nbody .danger-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #c01120;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  border-color: #c01120; }\n\nbody .danger-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:focus,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #a90000;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  border-color: #a90000; }\n\nbody .ui-dialog .ui-dialog-footer button,\nbody .ui-card .ui-card-footer button {\n  margin: 0 0 0 0.5em !important; }\n\nbody .ui-dialog {\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1) !important; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-radius: 4px 4px 0 0; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-radius: 0 0 4px 4px; }\n\nbody .ui-messages-error {\n  border: none;\n  font-weight: 800;\n  padding: 0;\n  display: block;\n  width: 100%;\n  text-align: right;\n  color: #a80000; }\n\nbody .ng-dirty.ng-invalid + ul {\n  -webkit-padding-start: 0;\n          padding-inline-start: 0; }\n\nbody .ui-inputtext.ng-invalid:enabled:focus,\n.ui-inputtext {\n  border-color: #a80000; }\n\nbody .ui-inputtext,\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  transition: box-shadow 0.2s; }\n\nbody .ui-inputtext.ng-dirty.ng-invalid,\nbody p-dropdown.ng-dirty.ng-invalid > .ui-dropdown,\nbody p-autocomplete.ng-dirty.ng-invalid > .ui-autocomplete > .ui-inputtext,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext,\nbody p-chips.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-inputmask.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-checkbox.ng-dirty.ng-invalid .ui-chkbox-box,\nbody p-radiobutton.ng-dirty.ng-invalid .ui-radiobutton-box,\nbody p-inputswitch.ng-dirty.ng-invalid .ui-inputswitch,\nbody p-listbox.ng-dirty.ng-invalid .ui-inputtext,\nbody p-multiselect.ng-dirty.ng-invalid > .ui-multiselect,\nbody p-spinner.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-selectbutton.ng-dirty.ng-invalid .ui-button,\nbody p-togglebutton.ng-dirty.ng-invalid .ui-button {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  box-shadow: 2px -2.8px 0 #f9b4ba, 2px 2.8px 0 #f9b4ba; }\n\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar.ui-calendar-w-btn {\n  box-shadow: 0 0 0 3px #f9b4ba;\n  border-radius: 4px; }\n\nbody .ui-inputgroup .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-inputgroup-addon,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error),\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-calendar-button {\n  box-shadow: none; }\n\n*:not(.ui-calendar) .ui-inputtext {\n  width: 100%; }\n\nbody .ui-state-disabled,\nbody .ui-widget:disabled {\n  cursor: not-allowed; }\n\n.form dynamic-primeng-form-control > div {\n  margin-bottom: 10px; }\n\n.form .ui-calendar,\n.form .ui-spinner {\n  width: 100%; }\n\n.form .ui-calendar-w-btn input.ui-inputtext {\n  width: calc(100% - 33px); }\n\n.form .ui-datepicker {\n  padding: 0.5em; }\n\n.form .ui-datepicker {\n  font-size: 12px; }\n\n.form .ui-datepicker .ui-timepicker {\n  padding: 10px 0 0 0;\n  font-size: 11px; }\n\n.form .ui-datepicker table {\n  font-size: 11px; }\n\n/* width */\n\n::-webkit-scrollbar {\n  width: 10px; }\n\n/* Track */\n\n::-webkit-scrollbar-track {\n  background: none; }\n\n/* Handle */\n\n::-webkit-scrollbar-thumb {\n  background: #00000033;\n  border: 2px solid rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  border-radius: 5px; }\n\n/* Handle on hover */\n\n::-webkit-scrollbar-thumb:hover {\n  background: #00000055;\n  background-clip: padding-box; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg,\n.fake-leaflet-control-colours,\nbody .ui-sidebar,\n#connection-status,\nbody .geoweb-menu.ui-slidemenu {\n  color: #333;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  border: none;\n  background-clip: padding-box; }\n\n.fake-leaflet-control.active,\n.fake-leaflet-control-lg.active,\n.fake-leaflet-control-colours.active,\nbody .active.ui-sidebar,\n.active#connection-status,\nbody .active.geoweb-menu.ui-slidemenu {\n  background-color: #007ad9;\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n  color: #ffffff; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg {\n  margin-bottom: 10px;\n  position: relative; }\n\n.fake-leaflet-control {\n  height: 30px;\n  width: 30px; }\n\n.fake-leaflet-control-lg {\n  height: 44px;\n  width: 44px; }\n\n.fake-leaflet-control a,\n.fake-leaflet-control-lg a {\n  color: inherit;\n  height: 100%;\n  width: 100%;\n  display: block;\n  line-height: 0; }\n\n.fake-leaflet-control:hover,\n.fake-leaflet-control-lg:hover {\n  background-color: #f4f4f4; }\n\n.fake-leaflet-control a:hover,\n.fake-leaflet-control-lg a:hover {\n  color: #333;\n  cursor: pointer; }\n\n.fake-leaflet-control.active:hover,\n.fake-leaflet-control-lg.active:hover {\n  background-color: #1775bd; }\n\n.fake-leaflet-control.active a:hover,\n.fake-leaflet-control-lg.active a:hover,\n.fake-leaflet-control-colours.active a:hover,\nbody .active.ui-sidebar a:hover,\n.active#connection-status a:hover,\nbody .active.geoweb-menu.ui-slidemenu a:hover {\n  color: #ffffff; }\n\n.fake-leaflet-control fa-icon.ng-fa-icon,\n.fake-leaflet-control-lg fa-icon.ng-fa-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.fake-leaflet-control a {\n  font-size: 12px; }\n\n.fake-leaflet-control-lg a {\n  font-size: 24px; }\n\nbody .ui-sidebar {\n  z-index: 1400 !important;\n  transition: transform 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955);\n  padding: 0;\n  border-radius: 0; }\n\nbody .ui-sidebar-bottom {\n  box-shadow: 0 -8px 0px 2px rgba(0, 0, 0, 0.2); }\n\nbody .ui-sidebar-bottom,\nbody .ui-sidebar-top {\n  height: 320px; }\n\nbody .ui-sidebar-left,\nbody .ui-sidebar-right {\n  width: 313px; }\n\n.ui-sidebar.width-fit-content {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content; }\n\n.ui-sidebar.height-fit-content {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content; }\n\n.ui-sidebar.width-fit-content .sidebar-container {\n  min-width: 313px;\n  max-width: 100vw; }\n\n.sidebar-container {\n  height: calc(100% - 53px);\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: hidden; }\n\n.sidebar-padding {\n  padding-top: 0.571em;\n  padding-right: 1em;\n  padding-bottom: 0.571em;\n  padding-left: 1em; }\n\n.sidebar-footer {\n  border-top: 1px solid #c8c8c8;\n  background: #f4f4f4; }\n\nbody .ui-sidebar .ui-sidebar-close {\n  padding-top: 0.571em;\n  padding-right: 1em;\n  padding-bottom: 0.571em;\n  padding-left: 1em;\n  float: none;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\nbody .ui-sidebar h1 {\n  margin-bottom: 0;\n  margin-top: -8px;\n  padding-top: 23px;\n  padding-left: 15px;\n  padding-bottom: 0.67em;\n  padding-right: 100px;\n  background-color: #f4f4f4;\n  border-bottom: 1px solid #c8c8c8; }\n\n@media (min-width: 768px) {\n  body .sidebar-container .ui-orderlist-controls-right {\n    margin-right: -15px; } }\n\n.ui-state-highlight a.icon-toggle.default-col {\n  background-color: #0065b3; }\n\n#connection-status {\n  position: absolute;\n  top: 10px;\n  left: 50% !important;\n  transform: translateX(-50%);\n  text-align: center;\n  z-index: 1300;\n  padding: 5px 10px;\n  background-clip: padding-box;\n  font-size: 14px; }\n\n#connection-status.disconnected {\n  color: crimson; }\n\n#connection-status.connected {\n  color: #00bb88; }\n\n#top-left-controls {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  z-index: 1300; }\n\nbody .geoweb-menu.ui-slidemenu {\n  width: 190px;\n  margin-top: 14px;\n  border: none; }\n\nbody .ui-slidemenu .ui-slidemenu-content {\n  border-radius: 4px; }\n\n.geoweb-container {\n  overflow: hidden; }\n\n.ui-widget-overlay.ui-dialog-mask {\n  z-index: 1500 !important; }\n\n.ui-dialog {\n  z-index: 1501 !important; }\n\n.log-sidebar .sidebar-container.log-messages-container {\n  max-height: calc(100% - 121px);\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: visible;\n  padding-top: 1em; }\n\n.log-sidebar > p-button {\n  margin-left: 1em !important;\n  margin-right: 1em !important; }\n\n.log-message {\n  line-height: 1.2;\n  margin: 0;\n  font-family: monospace;\n  font-size: 12px;\n  padding-bottom: 10px;\n  word-break: break-word; }\n\n.job-control-buttons {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 50px; }\n\n.ui-listbox.load-job-list li.ui-listbox-item {\n  display: grid !important;\n  grid-template-columns: minmax(-webkit-min-content, auto) auto -webkit-max-content;\n  grid-template-columns: minmax(min-content, auto) auto max-content;\n  grid-gap: 10px; }\n\n.ui-listbox.load-job-list li.ui-listbox-item > span {\n  max-width: 296px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/geo-web/geoweb.component.ts":
/*!*********************************************!*\
  !*** ./src/app/geo-web/geoweb.component.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const web_socket_service_1 = __webpack_require__(/*! ../services/web-socket.service */ "./src/app/services/web-socket.service.ts");
const job_service_service_1 = __webpack_require__(/*! ../services/job-service.service */ "./src/app/services/job-service.service.ts");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const message_api_1 = __webpack_require__(/*! ../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const flash_message_service_1 = __webpack_require__(/*! ../services/flash-message.service */ "./src/app/services/flash-message.service.ts");
const disclaimer_service_1 = __webpack_require__(/*! ../disclaimer/disclaimer-service */ "./src/app/disclaimer/disclaimer-service.ts");
const router_1 = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
const string_1 = __webpack_require__(/*! ../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const keypress_1 = __webpack_require__(/*! ../util/keypress */ "./src/app/util/keypress.ts");
const primeng_1 = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
const auth_service_1 = __webpack_require__(/*! ../services/auth.service */ "./src/app/services/auth.service.ts");
const spinner_service_service_1 = __webpack_require__(/*! ../spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
const config_service_1 = __webpack_require__(/*! ../services/config.service */ "./src/app/services/config.service.ts");
const server_config_form_model_1 = __webpack_require__(/*! ./server-config-form-model */ "./src/app/geo-web/server-config-form-model.ts");
const job_base_1 = __webpack_require__(/*! ../../../../shared/src/job/job-base */ "../shared/src/job/job-base.ts");
const job_types_1 = __webpack_require__(/*! ../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const rest_api_service_1 = __webpack_require__(/*! ../services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const map_component_1 = __webpack_require__(/*! ../geo-web/map/map.component */ "./src/app/geo-web/map/map.component.ts");
/**
 * Main component for Geoweb (after user in authenticated, disclaimer agreed...)
 * Handles job related functionality: Create new job, load job, edit job config form, view logs.
 * It also handles the menu and editing server config.
 * This component contains the FileDropUploadComponent, the main SpinnerComponent and the FileBrowserComponent
 *
 * @export
 * @class GeowebComponent
 */
let GeowebComponent = class GeowebComponent {
    constructor(disclaimerService, router, webSocketService, jobService, flashMessageService, spinnerService, authService, configService, restApiService) {
        this.disclaimerService = disclaimerService;
        this.router = router;
        this.webSocketService = webSocketService;
        this.jobService = jobService;
        this.flashMessageService = flashMessageService;
        this.spinnerService = spinnerService;
        this.authService = authService;
        this.configService = configService;
        this.restApiService = restApiService;
        this.wsConnected = false;
        this.logs = [];
        this.availableJobs = [];
        this.availableJobTemplates = [];
        this.availableJobTypes = [];
        this.jobTypeDescriptionsMap = job_types_1.jobTypeDescriptions.reduce((current, jobTypeDesc) => {
            return Object.assign(current, { [jobTypeDesc.type]: jobTypeDesc });
        }, {});
        this.newJobDialogVisible = false;
        this.newJob = { name: "", type: "", templateName: "" };
        this.getJobDialogVisible = false;
        this.getJob = { name: "" };
        this.showCommandTextbox = false;
        this.showConfigController = false;
        this.showLoggingController = false;
        this.onKeypress = keypress_1.onKeypress;
        this.isAdmin = false;
        this.customFormValidators = {
            integerValidator: string_1.integerValidator,
            floatValidator: string_1.floatValidator,
            alphaNumericDashesValidator: string_1.alphaNumericDashesValidator,
        };
        // Server config form props
        this.serverConfigForm = server_config_form_model_1.serverConfigForm;
        this.serverConfigFormSubmitSubject = new rxjs_1.Subject();
        this.serverConfigFormIsValid = false;
        this.showServerConfigController = false;
        // Check if logged in and disclaimer agreedto
        if (!this.authService.isLoggedIn) {
            this.router.navigate(["/"]);
        }
        else if (!this.disclaimerService.disclaimerAgreedTo) {
            this.router.navigate(["/"]);
        }
        else {
            this.updateMenuItems();
        }
        this.debugMode = this.configService.debugMode;
        this.wsConnectedSubscription = this.webSocketService
            .getAuthenticatedAsObservable()
            .subscribe(authenticated => {
            this.wsConnected = authenticated;
            if (authenticated) {
                this.spinnerService.removeSpinner(`geoweb-component-authenticated`);
                this.isAdmin = this.authService.isAdmin;
                this.serverConfigSubject = this.webSocketService.getServerConfigSubject();
            }
            else {
                this.spinnerService.setSpinner(`geoweb-component-authenticated`, {
                    name: `Connecting to Master`,
                    icon: spinner_service_service_1.SpinnerIcon.RotatingCircle,
                });
            }
        });
        this.jobSubject = this.jobService.getCurrentJobBehaviourSubject();
        this.jobSubscription = this.jobSubject.subscribe(job => {
            if (this.configService.debugMode) {
                console.log(job);
            }
            if (typeof job !== "undefined") {
                this.onJobUpdated(job);
            }
        });
        this.logsSubscription = this.jobService
            .getLogsObservable()
            .subscribe(logs => (this.logs = logs));
        this.availableJobsSubscription = this.jobService
            .getAvailableJobsObservable()
            .subscribe(jobList => {
            this.availableJobs = jobList
                .sort((a, b) => a.name.localeCompare(b.name))
                .map(job => {
                return { value: job };
            });
            if (this.getJobDialogVisible) {
                this.getJobDialog.center();
            }
        });
        this.availableJobTemplatesSubscription = this.jobService
            .getAvailableJobTemplatesObservable()
            .subscribe(templateList => {
            this.availableJobTemplates = templateList
                .sort((a, b) => a.name.localeCompare(b.name))
                .map(template => {
                return { value: template };
            });
            if (this.newJobDialogVisible) {
                this.newJobDialog.center();
            }
        });
        this.availableJobTypes = job_types_1.jobTypeDescriptions.map(jobType => {
            return { value: jobType, label: jobType.label };
        });
        this.newJobSelectedJobType = this.availableJobTypes[0];
    }
    // Handle escape key presses
    handleKeyboardEvent(event) {
        if (event.key === "Escape") {
            if (this.getJobDialogVisible) {
                this.cancelGetJobDialog();
                event.stopImmediatePropagation();
            }
            else if (this.newJobDialogVisible) {
                this.cancelNewJobDialog();
                event.stopImmediatePropagation();
            }
            else if (this.showLoggingController) {
                this.showLoggingController = false;
                event.stopImmediatePropagation();
            }
            else if (this.showConfigController) {
                this.showConfigController = false;
                event.stopImmediatePropagation();
            }
            else if (this.mainMenu.visible) {
                this.mainMenu.hide();
                event.stopImmediatePropagation();
            }
        }
    }
    get debugMode() {
        return this.configService.debugMode;
    }
    set debugMode(mode) {
        this.configService.debugMode = mode;
    }
    ngOnInit() { }
    ngOnDestroy() {
        // unsubscribe to ensure no memory leaks
        this.wsConnectedSubscription.unsubscribe();
        this.jobSubscription.unsubscribe();
        this.logsSubscription.unsubscribe();
        this.availableJobsSubscription.unsubscribe();
        this.availableJobTemplatesSubscription.unsubscribe();
        this.spinnerService.removeSpinner(`current-job-running`);
        this.spinnerService.removeSpinnersStartWith(`geoweb-component`);
    }
    ngAfterViewInit() {
        this.initCommandTextbox();
    }
    onJobUpdated(job) {
        return __awaiter(this, void 0, void 0, function* () {
            const init = typeof this.currentJob === "undefined" ||
                this.currentJob.name !== job.name;
            const statusChanged = typeof this.currentJobStatus !== "undefined" &&
                job.status !== this.currentJobStatus;
            this.currentJob = job;
            this.currentJobStatus = job.status;
            if (init) {
                this.spinnerService.removeSpinnersStartWith(`current-job`);
                this.updateMenuItems();
                if (this.debugMode) {
                    this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                        duration: 6000,
                        severity: "info",
                        title: "Job Loaded",
                        message: "Job " + this.currentJob.name + " is loaded.",
                    }));
                }
                // If job status has changed - show/hide spinner and display messages
            }
            else if (statusChanged) {
                this.updateMenuItems();
                // Display any errors
                if (this.currentJob.status === job_base_1.JobStatus.ERROR) {
                    // Note: this message will show with debugMode = false | true
                    this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                        title: "An Error has occurred",
                        message: `Job ${this.currentJob.name} failed. See Logs for more info.`,
                        sticky: true,
                    }));
                    // If running
                }
                else if (this.currentJob.status === job_base_1.JobStatus.STARTING) {
                    this.showConfigController = false;
                }
                // Otherwise -  only display messages if DebugMode is true
                if (this.debugMode) {
                    if (this.currentJob.status === job_base_1.JobStatus.RUNNING) {
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: "Job running",
                            message: `Job ${this.currentJob.name} has successfully started. See Logs for more info.`,
                            severity: "warn",
                        }));
                    }
                    else if (this.currentJob.status === job_base_1.JobStatus.INACTIVE) {
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: "Job stopped",
                            message: `Job ${this.currentJob.name} is now stopped.`,
                            severity: "info",
                        }));
                    }
                    else if (this.currentJob.status === job_base_1.JobStatus.FINISHED) {
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: "Job finished",
                            message: `Job ${this.currentJob.name} has completed.`,
                            severity: "success",
                        }));
                    }
                    else {
                        this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                            title: "Job status updated",
                            message: `Job ${this.currentJob.name} status updated to ${this.currentJob.status.toString()}`,
                            severity: "info",
                        }));
                    }
                }
            }
            // If job is running, queued or starting -> show spinner
            if (this.currentJob.status === job_base_1.JobStatus.RUNNING ||
                this.currentJob.status === job_base_1.JobStatus.QUEUED ||
                this.currentJob.status === job_base_1.JobStatus.STARTING) {
                this.spinnerService.setSpinner(`current-job-running`, {
                    name: `Job is ${job.status}`,
                    icon: spinner_service_service_1.SpinnerIcon.Fire,
                    progress: job.progress,
                });
            }
            else {
                this.spinnerService.removeSpinner(`current-job-running`);
            }
        });
    }
    showNewJobDialog() {
        this.webSocketService.updateAvailableJobLists();
        this.newJob = { name: "", type: "", templateName: "" };
        this.newJobDialogVisible = true;
    }
    submitNewJobDialog() {
        if (this.newJobNameInput.errors) {
            return false;
        }
        this.newJob.templateName =
            typeof this.newJobSelectedJobTemplate !== "undefined" &&
                this.newJobSelectedJobTemplate !== null &&
                "name" in this.newJobSelectedJobTemplate
                ? this.newJobSelectedJobTemplate.name
                : undefined;
        this.newJob.type = this.newJobSelectedJobType.value.type;
        this.webSocketService.newJob(this.newJob);
        this.newJobDialogVisible = false;
        this.newJob = { name: "", type: "", templateName: "" };
        this.webSocketService.clearUpdateAvailableJobListInterval();
    }
    cancelNewJobDialog() {
        this.newJobDialogVisible = false;
        this.newJob = { name: "", type: "", templateName: "" };
    }
    showGetJobDialog() {
        if (this.isAdmin) {
            this.webSocketService.updateAvailableJobLists(1000);
        }
        this.getJob = { name: "" };
        this.getJobDialogVisible = true;
    }
    cancelGetJobDialog() {
        this.getJobDialogVisible = false;
        this.getJob = { name: "" };
        this.webSocketService.clearUpdateAvailableJobListInterval();
    }
    submitGetJobDialog() {
        if (typeof this.getJobSelectedJob === "undefined") {
            return false;
        }
        this.getJob.name = this.getJobSelectedJob.name;
        this.webSocketService.getJob(this.getJob);
        this.getJobDialogVisible = false;
        this.getJob = { name: "" };
        this.webSocketService.clearUpdateAvailableJobListInterval();
    }
    runJob(name = "") {
        if (typeof this.currentJob === "undefined" || this.currentJob.clientOnly)
            return;
        // if (this.currentJob.canJobRun()) {
        // if (name === "") {
        //   this.webSocketService.runJob({
        //     job: this.currentJob.toJSON(),
        //   })
        // } else {
        //   this.webSocketService.runJob({
        //     job: name,
        //   })
        // }
        // }
        //console.log(this.geoweb.getConfig().region)
        //this.currentJob["region"] = this.geoweb.getConfig().region
        this.finalJobJSON = this.currentJob.toJSON();
        //let config = this.geoweb.getConfig()
        this.geoweb.getConfig().then(config => {
            //console.log("config received" + config.region)
            this.finalJobJSON["region"] = config.region;
            this.finalJobJSON["population"] = config.population;
            this.finalJobJSON["fire"] = config.fire;
            this.finalJobJSON["evacMessage"] = config.evacMessage;
            this.finalJobJSON["speed"] = config.speed;
            this.finalJobJSON["time"] = config.time;
            this.finalJobJSON["crs"] = config.crs;
            this.finalJobJSON["evacMessagelist"] = config.finalMessageList;
            // DSS:Invoke runJob and send the config file to server 
            this.webSocketService.runJob({
                job: this.finalJobJSON,
            });
            //DSS: Load spinner 
            this.spinnerService.setSpinner(`current-job-running`, {
                name: `Job is ${this.currentJob.status}`,
                icon: spinner_service_service_1.SpinnerIcon.Fire,
                progress: this.currentJob.progress,
            });
            //console.log("fina job" + this.finalJobJSON)
        });
    }
    updateJobLists() {
        this.webSocketService.updateAvailableJobLists();
    }
    stopJob(name = "") {
        if (name === "") {
            this.webSocketService.stopJob({
                name: this.currentJob.name,
            });
        }
        else {
            this.webSocketService.stopJob({
                name,
            });
        }
    }
    deleteJob(name = "") {
        if (name === "") {
            this.webSocketService.deleteJob({
                name: this.currentJob.name,
            });
        }
        else {
            this.webSocketService.deleteJob({
                name,
            });
        }
    }
    onServerConfigValid(event) {
        this.serverConfigFormIsValid = event;
    }
    updateServerConfig() {
        this.webSocketService.updateServerConfig();
        this.showServerConfigController = false;
    }
    // This monstrosity is needed to fix doubleclicking menu items redirecting to '#' (and therefore reloading the page)
    menuItemClickHandler(fn) {
        const self = this;
        return evt => {
            evt.originalEvent.target.onclick = clickEvent => clickEvent.preventDefault();
            fn.bind(self)();
            return false;
        };
    }
    updateMenuItems() {
        this.menuItems = [
            {
                label: "Job",
                items: [
                    {
                        label: "New",
                        icon: "pi pi-fw pi-plus",
                        command: this.menuItemClickHandler(this.showNewJobDialog),
                    },
                    {
                        label: "Load",
                        icon: "pi pi-fw pi-folder-open",
                        command: this.menuItemClickHandler(this.showGetJobDialog),
                    },
                    {
                        label: "Edit",
                        icon: "pi pi-fw pi-pencil",
                        command: this.menuItemClickHandler(() => (this.showConfigController = true)),
                        visible: typeof this.currentJob !== "undefined",
                    },
                    {
                        label: "Run",
                        icon: "pi pi-fw pi-caret-right",
                        command: this.menuItemClickHandler(this.runJob),
                        visible: typeof this.currentJob !== "undefined" &&
                            this.currentJob.status !== job_base_1.JobStatus.RUNNING,
                    },
                    {
                        label: "Stop",
                        icon: "pi pi-fw pi-times",
                        command: this.menuItemClickHandler(this.stopJob),
                        visible: typeof this.currentJob !== "undefined" &&
                            this.currentJob.status === job_base_1.JobStatus.RUNNING,
                    },
                ],
            },
            {
                label: "View",
                items: [
                    {
                        label: "Show Logs",
                        icon: "pi pi-fw pi-align-left",
                        command: this.menuItemClickHandler(() => (this.showLoggingController = true)),
                        visible: typeof this.currentJob !== "undefined",
                    },
                    {
                        label: this.debugMode ? "Disable Debug" : "Enable Debug",
                        icon: this.debugMode ? "pi pi-fw pi-eye-slash" : "pi pi-fw pi-eye",
                        command: this.menuItemClickHandler(() => {
                            this.debugMode = !this.debugMode;
                            this.updateMenuItems();
                        }),
                    },
                ],
            },
            {
                label: "Options",
                icon: "pi pi-fw pi-cog",
                command: this.menuItemClickHandler(() => (this.showServerConfigController = true)),
                visible: this.authService.isAdmin,
            },
            {
                label: "Logout",
                icon: "pi pi-fw pi-power-off",
                command: this.menuItemClickHandler(() => {
                    this.authService.logout();
                    setTimeout(() => this.router.navigate(["/"]), 500);
                }),
            },
        ];
    }
    // This isn't used anymore
    initCommandTextbox() {
        const commandTb = (document.getElementById("command-textbox"));
        commandTb.onkeypress = e => {
            if (e.key === "Enter") {
                const commandSplit = commandTb.value.split(" ");
                switch (commandSplit[0]) {
                    case "get-job":
                        if (commandSplit.length < 2) {
                            const invalidCommandErrorMessage = new message_api_1.FlashMessage({
                                title: "Invalid Command",
                                message: `The "get-job" command requires 1 parameter: <job-name>`,
                            });
                            this.flashMessageService.pushFlashMessage(invalidCommandErrorMessage);
                        }
                        else {
                            this.webSocketService.getJob({ name: commandSplit[1] });
                        }
                        break;
                    case "new-job":
                        if (commandSplit.length < 3) {
                            const invalidCommandErrorMessage = new message_api_1.FlashMessage({
                                title: "Invalid Command",
                                message: `The "new-job" command requires 2 parameters: <job-name> <template-name>`,
                            });
                            this.flashMessageService.pushFlashMessage(invalidCommandErrorMessage);
                        }
                        else {
                            this.webSocketService.newJob({
                                name: commandSplit[1],
                                type: commandSplit[2],
                                templateName: commandSplit[3],
                            });
                        }
                        break;
                    default:
                        const invalidCommandErrorMessage = new message_api_1.FlashMessage({
                            title: "Invalid Command",
                            message: `"${commandSplit[0]}" is not a valid command type`,
                        });
                        this.flashMessageService.pushFlashMessage(invalidCommandErrorMessage);
                        break;
                }
                commandTb.value = "";
                return false;
            }
        };
    }
    downloadUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            this.spinnerService.setSpinner(`download-file-${url}`, {
                name: `Downloading ${url}`,
                icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                progress: 0,
            });
            yield this.restApiService.downloadUrl(url, "text/plain", progress => {
                this.spinnerService.setSpinner(`download-file-${url}`, {
                    name: `Downloading ${url}`,
                    icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                    progress,
                });
            });
            this.spinnerService.removeSpinner(`download-file-${url}`);
        });
    }
    // TODO: this is used by download logs button -> instead use this.jobservice.resolveDirTree so it can handle jobs hosted on cloud
    getMasterJobFilesUrl() {
        return `${this.configService.config.MASTER_WEBSERVER_URL}${this.configService.serverConfig.API_JOB_FILES_URL}`;
    }
};
__decorate([
    core_1.HostListener("document:keyup", ["$event"]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], GeowebComponent.prototype, "handleKeyboardEvent", null);
__decorate([
    core_1.ViewChild("mainMenu"),
    __metadata("design:type", primeng_1.SlideMenu)
], GeowebComponent.prototype, "mainMenu", void 0);
__decorate([
    core_1.ViewChild("newJobDialog"),
    __metadata("design:type", primeng_1.Dialog)
], GeowebComponent.prototype, "newJobDialog", void 0);
__decorate([
    core_1.ViewChild("newJobNameInput"),
    __metadata("design:type", Object)
], GeowebComponent.prototype, "newJobNameInput", void 0);
__decorate([
    core_1.ViewChild("getJobDialog"),
    __metadata("design:type", primeng_1.Dialog)
], GeowebComponent.prototype, "getJobDialog", void 0);
__decorate([
    core_1.ViewChild(map_component_1.GeowebMapComponent),
    __metadata("design:type", Object)
], GeowebComponent.prototype, "geoweb", void 0);
GeowebComponent = __decorate([
    core_1.Component({
        selector: "app-geoweb",
        template: __webpack_require__(/*! ./geoweb.component.html */ "./src/app/geo-web/geoweb.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./geoweb.component.scss */ "./src/app/geo-web/geoweb.component.scss")]
    }),
    __metadata("design:paramtypes", [disclaimer_service_1.DisclaimerSerivce,
        router_1.Router,
        web_socket_service_1.WebSocketService,
        job_service_service_1.JobService,
        flash_message_service_1.FlashMessageService,
        spinner_service_service_1.SpinnerService,
        auth_service_1.AuthService,
        config_service_1.ConfigService,
        rest_api_service_1.RestApiService])
], GeowebComponent);
exports.GeowebComponent = GeowebComponent;


/***/ }),

/***/ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts":
/*!************************************************************!*\
  !*** ./src/app/geo-web/map/colour-scheme/colour-scheme.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const plotty_1 = __webpack_require__(/*! plotty */ "./node_modules/plotty/src/plotty.js");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const d3ColorScheme = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/index.js");
class ColourScheme {
    constructor(name) {
        this._reversed = false;
        this._name = name;
    }
    get scale() {
        return this._scale;
    }
    get reversed() {
        return this._reversed;
    }
    set reversed(r) {
        this._reversed = r;
    }
    get type() {
        return this._type;
    }
    get name() {
        return this._name;
    }
    setDomain(min, max) { }
    static normalise(min, max) {
        return val => {
            const a = 1 / (max - min);
            return a * val + -(a * min);
        };
    }
    toD3(features) {
        return undefined;
    }
    toPlotty() {
        return undefined;
    }
}
exports.ColourScheme = ColourScheme;
class D3ColourScheme extends ColourScheme {
    constructor(predefinedName = "interpolatePlasma", name = "D3 Colour Scheme") {
        super(name);
        // d3.interpolate
        this.predefinedSchemes = [
            "interpolateBlues",
            "interpolateBrBG",
            "interpolateBuGn",
            "interpolateBuPu",
            "interpolateCool",
            "interpolateCubehelixDefault",
            "interpolateGnBu",
            "interpolateGreens",
            "interpolateGreys",
            "interpolateInferno",
            "interpolateMagma",
            "interpolateOrRd",
            "interpolateOranges",
            "interpolatePRGn",
            "interpolatePiYG",
            "interpolatePlasma",
            "interpolatePuBu",
            "interpolatePuBuGn",
            "interpolatePuOr",
            "interpolatePuRd",
            "interpolatePurples",
            "interpolateRainbow",
            "interpolateRdBu",
            "interpolateRdGy",
            "interpolateRdPu",
            "interpolateRdYlBu",
            "interpolateRdYlGn",
            "interpolateReds",
            "interpolateSinebow",
            "interpolateSpectral",
            "interpolateTurbo",
            "interpolateViridis",
            "interpolateWarm",
            "interpolateYlGn",
            "interpolateYlGnBu",
            "interpolateYlOrBr",
            "interpolateYlOrRd",
        ].map(key => ({
            name: key,
        }));
        this._type = "D3ColourScheme";
        this.predefinedScheme = { name: predefinedName };
    }
    static isInstanceOf(obj) {
        return obj.type === "D3ColourScheme";
    }
    setDomain(min, max) {
        if (!this.reversed) {
            this._scale = d3_1.scaleSequential(d3ColorScheme[this.predefinedScheme.name]).domain([min, max]);
        }
        else {
            this._scale = d3_1.scaleSequential(d3ColorScheme[this.predefinedScheme.name]).domain([max, min]);
        }
        this._colourLegend = undefined;
    }
    // Note:  setDomain must be called before toD3
    toD3() {
        if (typeof this._scale === "undefined") {
            throw "setDomain() must be called before toD3()";
        }
        return d => this._scale(d.properties.value);
    }
    toMapbox(property) {
        if (typeof this._scale === "undefined") {
            throw "setDomain() must be called before toMapbox()";
        }
        const scheme = [
            "interpolate",
            ["linear"],
            ["get", property],
        ];
        const min = this._scale.domain()[0];
        const max = this._scale.domain()[1];
        for (let i = 0; i <= 20; i++) {
            if (this.reversed) {
                // Push value
                scheme.push(max + (min - max) * (i / 20));
                // Push colour
                scheme.push(d3ColorScheme[this.predefinedScheme.name](1 - i / 20));
            }
            else {
                // Push value
                scheme.push(min + (max - min) * (i / 20));
                // Push colour
                scheme.push(d3ColorScheme[this.predefinedScheme.name](i / 20));
            }
        }
        return scheme;
    }
    // Note:  set Domain is NOT required for toPlotty
    toPlotty() {
        const cols = [];
        const pos = [];
        for (let i = 0; i <= 20; i++) {
            pos.push(i / 20);
            cols.push(d3ColorScheme[this.predefinedScheme.name](i / 20));
        }
        if (this.reversed) {
            cols.reverse();
        }
        plotty_1.addColorScale(this.predefinedScheme.name, cols, pos);
        return this.predefinedScheme.name;
    }
}
exports.D3ColourScheme = D3ColourScheme;
class SolidColourScheme extends ColourScheme {
    static isInstanceOf(obj) {
        return obj.type === "SolidColourScheme";
    }
    constructor(solidColour, name = "Solid colour") {
        super(name);
        this._type = "SolidColourScheme";
        this.solidColour = solidColour;
    }
    toD3(features) {
        return (d) => this.solidColour;
    }
}
exports.SolidColourScheme = SolidColourScheme;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/canvas-layer.ts":
/*!*******************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/canvas-layer.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mapbox_gl_layer_1 = __webpack_require__(/*! ./mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
class CanvasOverlayLayer extends mapbox_gl_layer_1.MapboxGlLayer {
    constructor(name) {
        super(name);
        this._rendered = false;
        this._rendering = false;
        this._rootElement = d3_1.select("body").append("canvas");
        this._mapboxId = `${this.type}-${name}`.replace(" ", "-").toLowerCase();
        this._rootElement.attr("id", this._mapboxId);
        this._rootElement.style("display", "none");
        this._canvasContext = this._rootElement.node().getContext("2d");
        // this._canvasContext.globalCompositeOperation = "lighten"
        this._canvasContext.imageSmoothingEnabled = false;
    }
    static isInstanceOf(obj) {
        return "rootElement" in obj && "render" in obj;
    }
    get rootElement() {
        return this._rootElement;
    }
    render(force = false) {
        const _super = Object.create(null, {
            render: { get: () => super.render }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const bbox = this.getBbox();
            if (typeof bbox === "undefined") {
                return;
            }
            if (typeof this._mapboxGlLayer === "undefined" ||
                typeof this._source === "undefined") {
                this._mapboxGlLayer = {
                    id: this._mapboxId,
                    type: "raster",
                    source: this._mapboxId,
                    paint: {
                        "raster-fade-duration": 0,
                        "raster-resampling": "nearest",
                    },
                };
                this._source = {
                    id: this._mapboxId,
                    source: {
                        type: "canvas",
                        canvas: this._mapboxId,
                        coordinates: [
                            [bbox[0], bbox[3]],
                            [bbox[2], bbox[3]],
                            [bbox[2], bbox[1]],
                            [bbox[0], bbox[1]],
                        ],
                    },
                };
            }
            else if (this._source.source.coordinates[0][0] !== bbox[0] ||
                this._source.source.coordinates[0][1] !== bbox[3] ||
                this._source.source.coordinates[1][0] !== bbox[2] ||
                this._source.source.coordinates[3][1] !== bbox[1]) {
                this._source.source.coordinates = [
                    [bbox[0], bbox[3]],
                    [bbox[2], bbox[3]],
                    [bbox[2], bbox[1]],
                    [bbox[0], bbox[1]],
                ];
                map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._mapboxId).setCoordinates(this._source.source.coordinates);
                console.log("set coords");
            }
            yield _super.render.call(this, force);
        });
    }
    clear() {
        const _super = Object.create(null, {
            clear: { get: () => super.clear }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._rendering) {
                _super.clear.call(this);
                this._rendered = false;
            }
            // TODO: if rendering -> clear after render
        });
    }
    delete() {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.delete.call(this);
            if (typeof this._rootElement !== "undefined" &&
                typeof this._rootElement.remove === "function") {
                this._rootElement.remove();
            }
            // TODO: if rendering -> delete after render
        });
    }
}
exports.CanvasOverlayLayer = CanvasOverlayLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/layer-service.service.ts":
/*!****************************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/layer-service.service.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const spinner_service_service_1 = __webpack_require__(/*! src/app/spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
const flash_message_service_1 = __webpack_require__(/*! src/app/services/flash-message.service */ "./src/app/services/flash-message.service.ts");
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! ./map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const message_api_1 = __webpack_require__(/*! ../../../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const array_1 = __webpack_require__(/*! ../../../../../../shared/src/util/array */ "../shared/src/util/array.ts");
const parseGeoraster = __webpack_require__(/*! georaster */ "./node_modules/georaster/dist/georaster.browser.bundle.min.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const map_popup_service_1 = __webpack_require__(/*! ../map-popup/map-popup.service */ "./src/app/geo-web/map/map-popup/map-popup.service.ts");
const geospatial_projections_1 = __webpack_require__(/*! ../../../../../../shared/src/util/geospatial-projections */ "../shared/src/util/geospatial-projections.ts");
const config_service_1 = __webpack_require__(/*! src/app/services/config.service */ "./src/app/services/config.service.ts");
const proj4x = __webpack_require__(/*! proj4 */ "./node_modules/proj4/lib/index.js");
const proj4 = proj4x.default;
proj4.defs(geospatial_projections_1.proj4defs);
let LayerService = class LayerService {
    constructor(restApiService, spinnerService, flashMessageService, configService, mapPopupService, zone) {
        this.restApiService = restApiService;
        this.spinnerService = spinnerService;
        this.flashMessageService = flashMessageService;
        this.configService = configService;
        this.mapPopupService = mapPopupService;
        this.zone = zone;
        this.fileCacheMaxNum = 100;
        this.geotiffCacheMaxNum = 200;
        this.chartBehaviourSubject = new rxjs_1.BehaviorSubject(undefined);
        this._chartBehaviourObservable = this.chartBehaviourSubject.asObservable();
        this.urlFileMap = {};
        this.geotiffLayerMap = {};
        map_layer_1.MapLayer.setLayerService(this);
    }
    get chartBehaviourObservable() {
        return this._chartBehaviourObservable;
    }
    ngOnDestroy() { }
    getGeotiffData(url, name = url, projectionOverride) {
        const layerKey = `${url}`;
        // If file has not been downloaded before
        if (typeof this.geotiffLayerMap[layerKey] === "undefined") {
            if (Object.keys(this.geotiffLayerMap).length > this.geotiffCacheMaxNum) {
                delete this.geotiffLayerMap[Object.keys(this.geotiffLayerMap)[0]];
            }
            this.geotiffLayerMap[layerKey] = { promises: new Set() };
            // Create promise to return
            const getFilePromise = new Promise((resolve, reject) => {
                this.geotiffLayerMap[layerKey].promises.add({ resolve, reject });
            });
            (() => __awaiter(this, void 0, void 0, function* () {
                try {
                    this.spinnerService.setSpinner(`current-job-geotiff-${layerKey}`, {
                        name: `Rendering ${name} layer`,
                        icon: spinner_service_service_1.SpinnerIcon.GridPulse,
                    });
                    const arrayBuffer = yield this.getFile(url, rest_api_service_1.ResponseType.ArrayBuffer);
                    const result = yield parseGeoraster(arrayBuffer);
                    if (result.noDataValue === null) {
                        result.noDataValue = NaN;
                    }
                    // const result: RasterLayerData = await this.geotiffLoader.run({
                    //   arrayBuffer,
                    //   samples: Array.isArray(band) ? band : [band],
                    //   key: layerKey,
                    // })
                    result.valuesFlat = result.values.map(values => array_1.concatenate(Float32Array, ...values));
                    result.geotiffArrayBuffer = arrayBuffer;
                    let projection = result.projection;
                    if (typeof projectionOverride !== "undefined") {
                        projection = projectionOverride;
                    }
                    if (projection === 4326) {
                        result.bbox4326 = [
                            result.xmin,
                            result.ymin,
                            result.xmax,
                            result.ymax,
                        ];
                    }
                    else {
                        result.bbox4326 = [
                            ...proj4(`EPSG:${projection}`, "EPSG:4326").forward([
                                result.xmin,
                                result.ymin,
                            ]),
                            ...proj4(`EPSG:${projection}`, "EPSG:4326").forward([
                                result.xmax,
                                result.ymax,
                            ]),
                        ];
                    }
                    this.geotiffLayerMap[layerKey].data = result;
                    this.geotiffLayerMap[layerKey].promises.forEach(promiseObj => {
                        promiseObj.resolve(result);
                    });
                    this.geotiffLayerMap[layerKey].promises.clear();
                }
                catch (error) {
                    this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                        message: error,
                        title: `Failed to render ${name} layer`,
                        sticky: true,
                    }));
                    this.geotiffLayerMap[layerKey].promises.forEach(promiseObj => promiseObj.reject(error));
                    this.geotiffLayerMap[layerKey].promises.clear();
                    throw error;
                }
                finally {
                    this.spinnerService.removeSpinner(`current-job-geotiff-${layerKey}`);
                }
            }))();
            return getFilePromise;
        }
        // If file is downloading -> add promise
        if (typeof this.geotiffLayerMap[layerKey].data === "undefined") {
            return new Promise((resolve, reject) => {
                this.geotiffLayerMap[layerKey].promises.add({ reject, resolve });
            });
        }
        // If file data already downloaded -> return data
        return Promise.resolve(this.geotiffLayerMap[layerKey].data);
    }
    geotiffLayerFactory(geotiffSpecs) {
        return __awaiter(this, void 0, void 0, function* () {
            return array_1.flattenArray(yield Promise.all(geotiffSpecs.map((geotiffSpec) => __awaiter(this, void 0, void 0, function* () {
                const downloadData = {
                    action: geotiffSpec.geotiffPath,
                    description: `GeoTIFF with all raster layers`,
                    metadata: ``,
                    disabled: false,
                };
                // Generate geotiff metadata JSON
                downloadData.metadata = JSON.stringify(Object.keys(geotiffSpec.layerSpecs).reduce((accum, current) => {
                    accum[current] = {
                        name: geotiffSpec.layerSpecs[current].name,
                        units: geotiffSpec.layerSpecs[current].units,
                    };
                    return accum;
                }, {}), null, 2);
                return Object.keys(geotiffSpec.layerSpecs).map(key => {
                    const layerSpec = geotiffSpec.layerSpecs[key];
                    layerSpec.downloadData = downloadData;
                    const layer = new map_geotiff_layer_1.RasterLayer(layerSpec.name, geotiffSpec.geotiffPath, parseInt(key, 10));
                    // Assign all other properties to the created Layer
                    Object.assign(layer, layerSpec);
                    return layer;
                });
            }))));
        });
    }
    getFile(url, responseType, urlKey = url, persistentOnClear = false) {
        // If file has not been downloaded before
        if (!(urlKey in this.urlFileMap)) {
            // Only keep 20 files
            if (Object.keys(this.urlFileMap).length > this.fileCacheMaxNum) {
                console.log(`delete ${Object.keys(this.urlFileMap)[0]}`);
                delete this.urlFileMap[Object.keys(this.urlFileMap)[0]];
            }
            this.urlFileMap[urlKey] = {
                promises: new Set(),
                responseType,
                persistentOnClear,
            };
            // Create promise to return
            const getFilePromise = new Promise((resolve, reject) => {
                this.urlFileMap[urlKey].promises.add({ resolve, reject });
            });
            // Download file
            this.restApiService
                .get(url, responseType, progress => {
                this.spinnerService.setSpinner(`geturl-${urlKey}`, {
                    name: `Downloading ${url}`,
                    icon: spinner_service_service_1.SpinnerIcon.GridPulse,
                    progress,
                });
            })
                // Download success
                .then(response => {
                this.urlFileMap[urlKey].data = response;
                this.urlFileMap[urlKey].promises.forEach(promiseObj => promiseObj.resolve(response));
                this.urlFileMap[urlKey].promises.clear();
            })
                // Download error
                .catch(error => {
                const invalidCommandErrorMessage = new message_api_1.FlashMessage({
                    title: `Failed to fetch URL ${url}`,
                    message: "message" in error ? error.message : error,
                    sticky: true,
                });
                this.flashMessageService.pushFlashMessage(invalidCommandErrorMessage);
                this.urlFileMap[urlKey].promises.forEach(promiseObj => promiseObj.reject(error));
                this.urlFileMap[urlKey].promises.clear();
            })
                .finally(() => {
                this.spinnerService.removeSpinner(`geturl-${urlKey}`);
            });
            return getFilePromise;
        }
        // If file is downloading -> add promise
        if (typeof this.urlFileMap[urlKey].data === "undefined") {
            return new Promise((resolve, reject) => {
                this.urlFileMap[urlKey].promises.add({ reject, resolve });
            });
        }
        // If file data already downloaded -> return data
        return Promise.resolve(this.urlFileMap[urlKey].data);
    }
    clearFileCache() {
        this.urlFileMap = Object.keys(this.urlFileMap).reduce((files, currentKey) => {
            if (this.urlFileMap[currentKey].persistentOnClear) {
                files[currentKey] = this.urlFileMap[currentKey];
                console.log(`keep ${currentKey}`);
            }
            return files;
        }, {});
        this.geotiffLayerMap = {};
    }
    createNewChart(obj) {
        this.currentChart = obj.chart;
        this.zone.run(() => this.chartBehaviourSubject.next(obj));
    }
    removeChart() {
        if (typeof this.currentChart !== "undefined") {
            try {
                this.currentChart.destroy();
            }
            catch (_a) { }
        }
        this.chartBehaviourSubject.next(undefined);
    }
    showPopup(message) {
        this.zone.run(() => {
            this.mapPopupService.showPopup(message);
        });
    }
};
LayerService.proj4 = proj4;
LayerService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [rest_api_service_1.RestApiService,
        spinner_service_service_1.SpinnerService,
        flash_message_service_1.FlashMessageService,
        config_service_1.ConfigService,
        map_popup_service_1.PopupFormService,
        core_1.NgZone])
], LayerService);
exports.LayerService = LayerService;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/map-contour-layer.ts":
/*!************************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/map-contour-layer.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const d3_contour_1 = __webpack_require__(/*! d3-contour */ "./node_modules/d3-contour/src/index.js");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const colour_scheme_1 = __webpack_require__(/*! ../colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const geospatial_projections_1 = __webpack_require__(/*! ../../../../../../shared/src/util/geospatial-projections */ "../shared/src/util/geospatial-projections.ts");
const download_file_1 = __webpack_require__(/*! ../../../util/download-file */ "./src/app/util/download-file.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! ./mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
class MapContourLayer extends mapbox_gl_layer_1.MapboxGlLayer {
    constructor(name, geotiffLayer, _layerStyleType = "line") {
        super(name);
        this._layerStyleType = _layerStyleType;
        this._fc = turf_1.featureCollection([]);
        this.contourCacheSteps = 500;
        this.transitionDelayMultiplier = 0;
        this.thresholds = [0];
        this.valueFormatFn = d3_1.format(".2f");
        this._rendering = false;
        this._missedRenderUpdate = false;
        this.sliderEnabled = false;
        this._type = "GeowebMapContourLayer";
        this._geotiffLayer = geotiffLayer;
        this.colourScheme = new colour_scheme_1.SolidColourScheme("#000000");
        this.colourByProperty = { key: "value", label: "Value" };
        this.showValueInPopup = false;
        this.downloadData = {
            action: this.downloadGeoJSON.bind(this),
            description: `GeoJSON of ${this.name} polygons`,
            metadata: "",
            disabled: true,
        };
        this._mapboxId = `${this._type}-${name}`.replace(" ", "-").toLowerCase();
        this._mapboxGlLayer = {
            id: this._mapboxId,
            type: this._layerStyleType,
            source: this._mapboxId,
            paint: this._layerStyleType === "line"
                ? {
                    "line-width": 2,
                }
                : {},
        };
        this._source = {
            id: this._mapboxId,
            source: {
                type: "geojson",
                data: this._fc,
                tolerance: 1,
            },
        };
    }
    get slider() {
        return this._slider;
    }
    set slider(value) {
        if (typeof this._slider !== "undefined") {
            this._slider.subscribers.delete(this);
        }
        this._slider = value;
        this._slider.subscribers.add(this);
    }
    onSliderValueChange(value, date) {
        if (this.sliderEnabled) {
            this.thresholds = [value];
            map_layer_1.MapLayer.layerService.zone.runOutsideAngular((() => {
                this.render();
            }).bind(this));
        }
    }
    downloadGeoJSON() {
        download_file_1.downloadFile(`${this.name}.json`, JSON.stringify(this._fc), "text/json");
    }
    getContourPolygons(thresholds) {
        const contours = d3_contour_1.contours()
            .size([this._geotiffWidth, this._geotiffHeight])
            .thresholds(thresholds)(this._pixelsReversed);
        const features = [];
        // The contour feature coordinates represent the pixel locations of the input GeoTIFF (which is EPSG3857)
        // So to get ESPG4326 we must go from pixel value -> EPSG3857 -> ESPG4326
        for (let i = 0; i < contours.length; i++) {
            const f = turf_1.feature(contours[i]);
            f.properties.value = contours[i].value;
            turf_1.coordEach(f, coord => {
                ;
                [coord[0], coord[1]] = geospatial_projections_1.projectCoords([
                    this._width3857 * (coord[0] / this._geotiffWidth) + this._bbox3857[0],
                    this._bbox3857[3] -
                        this._height3857 * (coord[1] / this._geotiffHeight),
                ]);
            });
            features.push(f);
        }
        return features;
    }
    getContours(thresholds = this.thresholds) {
        const reversedThresholds = thresholds.map(threshold => this.maxValue - threshold);
        if (reversedThresholds.length === 1) {
            const cacheIdx = Math.round((reversedThresholds[0] / this.maxValue) * this.contourCacheSteps);
            if (typeof this._contourCache[cacheIdx] === "undefined") {
                const contours = this.getContourPolygons(reversedThresholds);
                this._contourCache[cacheIdx] = contours[0];
            }
            return [this._contourCache[cacheIdx]];
        }
        return this.getContourPolygons(reversedThresholds);
    }
    render(force = false) {
        const _super = Object.create(null, {
            render: { get: () => super.render }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this._rendering) {
                return;
            }
            this._rendering = true;
            if (!this._initialised) {
                yield this._geotiffLayer.init();
                this._pixels = this._geotiffLayer.data.valuesFlat[0];
                // reverse pixel values
                this._pixelsReversed = this._pixels.map(pixel => {
                    if (pixel >= 0) {
                        return this._geotiffLayer.maxValue - pixel;
                    }
                    return pixel;
                });
                // Because we reverse pixel values -> we must reverse legend labels
                this.legendCells = this.thresholds;
                this.legendLabels = this.legendCells
                    .map(cell => `${this.valueFormatFn(cell)}`)
                    .reverse();
                this.reverseLegendLabels = true;
                this._geotiffWidth = this._geotiffLayer.data.width;
                this._geotiffHeight = this._geotiffLayer.data.height;
                this._bbox4326 = this._geotiffLayer.data.bbox4326;
                this._bbox3857 = geospatial_projections_1.projectBBox(this._bbox4326, geospatial_projections_1.EPSG4326, geospatial_projections_1.EPSG3857);
                this._width3857 = this._bbox3857[2] - this._bbox3857[0];
                this._height3857 = this._bbox3857[3] - this._bbox3857[1];
                this.minValue = this._geotiffLayer.minValue;
                this.maxValue = this._geotiffLayer.maxValue;
                this._contourCache = new Array(this.contourCacheSteps);
            }
            this._data = this.getContours();
            this._fc.features = this._data;
            if (!this._initialised) {
                this._source.source.data = this._fc;
                yield _super.render.call(this, force);
            }
            else {
                yield _super.render.call(this, force);
                yield new Promise(resolve => {
                    const animate = (() => {
                        if (!map_layer_1.MapLayer.layerService.mapboxGl.isSourceLoaded(this._source.id)) {
                            return requestAnimationFrame(animate); // wait until the next frame
                        }
                        ;
                        map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._source.id).setData(this._fc);
                        resolve();
                    }).bind(this);
                    animate();
                });
            }
            this._rendering = false;
            this.downloadData.disabled = false;
        });
    }
}
exports.MapContourLayer = MapContourLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts":
/*!*********************************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! ../colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const download_file_1 = __webpack_require__(/*! src/app/util/download-file */ "./src/app/util/download-file.ts");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const mapbox_gl_layer_1 = __webpack_require__(/*! ./mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const mergeOptions = __webpack_require__(/*! merge-options */ "./node_modules/merge-options/index.js");
var FeatureType;
(function (FeatureType) {
    FeatureType["Point"] = "point";
    FeatureType["Polygon"] = "polygon";
    FeatureType["Line"] = "line";
})(FeatureType = exports.FeatureType || (exports.FeatureType = {}));
class EditableFeatureToolbarButton {
}
exports.EditableFeatureToolbarButton = EditableFeatureToolbarButton;
class EditableFeatureCollectionLayer extends map_layer_1.MapLayer {
    constructor(jobName, name, fc = turf_1.featureCollection([]), colourScheme = new colour_scheme_1.SolidColourScheme("#000000")) {
        super(name);
        this._mapboxLayers = [];
        this.singleFeature = false;
        this.defaultFeatureProperties = { point: {}, line: {}, polygon: {} };
        // Form Models for editing feature properties (separate form for Point, Line and Polygon)
        this.featurePropertiesFormModel = {};
        this.toolbarButtonOptions = {};
        this._featureCollection = turf_1.featureCollection([]);
        this._editFeatureCollection = turf_1.featureCollection([]);
        this._featureCollectionBehaviourSubject = new rxjs_1.BehaviorSubject(this._featureCollection);
        this.onClick = (p) => {
            const mouseTreshold = 20;
            const mousePoint = turf_1.point([p.latlng.lng, p.latlng.lat]);
            const foundFeature = this._featureCollection.features.reduce((closestFeature, current, currentIndex) => {
                const withinMouseThreshold = map_layer_1.MapLayer.layerService.mapboxGl
                    .project(turf_1.centroid(current).geometry.coordinates)
                    .dist(p.layerPoint) < mouseTreshold;
                const distanceToCurrentFeature = turf_1.distance(turf_1.centroid(current), mousePoint);
                const distanceToClosestFeature = typeof closestFeature.feature === "undefined"
                    ? 1000
                    : turf_1.distance(turf_1.centroid(closestFeature.feature), mousePoint);
                // If current feature is closer to mouse than the closest feature
                if (distanceToCurrentFeature < distanceToClosestFeature) {
                    if (
                    // If Point and mouse point is within distance threshold
                    (current.geometry.type === "Point" && withinMouseThreshold) ||
                        // If Line and mouse point is within distance threshold
                        ((current.geometry.type === "LineString" ||
                            current.geometry.type === "MultiLineString") &&
                            turf_1.pointToLineDistance(mousePoint, current) < mouseTreshold &&
                            withinMouseThreshold) ||
                        // If Polygon and the point is within polygon
                        ((current.geometry.type === "Polygon" ||
                            current.geometry.type === "MultiPolygon") &&
                            turf_1.booleanWithin(mousePoint, current))) {
                        return { feature: current, index: currentIndex };
                    }
                }
                return closestFeature;
            }, { feature: undefined, index: undefined });
            if (typeof foundFeature.feature === "undefined") {
                return;
            }
            if (EditableFeatureCollectionLayer.mode === "create") {
                this.editFeatureProperties(foundFeature.feature, foundFeature.index);
            }
            else {
                this.editFeatureGeometry(foundFeature.feature, foundFeature.index);
            }
        };
        this._mapboxId = `fclayer-${jobName}-${name}`
            .replace(" ", "-")
            .toLowerCase();
        this._type = "EditableFeatureCollectionLayer";
        this._opacity = 0.8;
        this.onClickPolicy = "all";
        this.blendModes = [];
        this._featureCollection = fc;
        this.updateFeatureCollection();
        this._colourScheme = colourScheme;
        this.downloadData = {
            action: (() => {
                download_file_1.downloadFile(`${this.name}.json`, JSON.stringify(this._featureCollection), "text/json");
            }).bind(this),
            description: `GeoJSON of ${this.name} features`,
            metadata: "",
            disabled: false,
        };
        const fillLayer = new mapbox_gl_layer_1.MapboxGlLayer(`${this._mapboxId}-fill`, {
            id: `${this._mapboxId}-fill`,
            type: "fill",
            source: this._mapboxId,
        });
        fillLayer.mapboxFilter = ["==", "$type", "Polygon"];
        fillLayer.colourScheme = this.colourScheme;
        const lineLayer = new mapbox_gl_layer_1.MapboxGlLayer(`${this._mapboxId}-line`, {
            id: `${this._mapboxId}-line`,
            type: "line",
            source: this._mapboxId,
            paint: { "line-width": 3 },
        });
        lineLayer.mapboxFilter = ["==", "$type", "LineString"];
        lineLayer.colourScheme = this.colourScheme;
        const pointLayer = new mapbox_gl_layer_1.MapboxGlLayer(`${this._mapboxId}-point`, {
            id: `${this._mapboxId}-point`,
            type: "circle",
            source: this._mapboxId,
            paint: {
                "circle-radius": 10,
            },
        });
        pointLayer.mapboxFilter = ["==", "$type", "Point"];
        pointLayer.colourScheme = this.colourScheme;
        this._mapboxLayers = [fillLayer, pointLayer, lineLayer];
        this.linkedLayers = this._mapboxLayers;
    }
    get featureCollection() {
        return this._featureCollection;
    }
    set featureCollection(fc) {
        this._featureCollection = fc;
        this.updateFeatureCollection();
    }
    get featureCollectionObservable() {
        return this._featureCollectionBehaviourSubject.asObservable();
    }
    get mapboxLayers() {
        return this._mapboxLayers;
    }
    updateLayer(updateLinked = true) {
        const _super = Object.create(null, {
            updateLayer: { get: () => super.updateLayer }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.updateLayer.call(this, updateLinked);
        });
    }
    static isInstanceOf(obj) {
        return obj.type === "EditableFeatureCollectionLayer";
    }
    static enableEditMode() {
        if (!EditableFeatureCollectionLayer.editInProgress) {
            EditableFeatureCollectionLayer.mode = "edit";
            EditableFeatureCollectionLayer.editInProgress = true;
        }
    }
    static disableEditMode(layers, keepChanges = true) {
        if (EditableFeatureCollectionLayer.editInProgress &&
            EditableFeatureCollectionLayer.mode === "edit") {
            if (keepChanges) {
                layers.forEach(l => {
                    l.addFeatures(l._editFeatureCollection.features.map(feature => {
                        // Only update geometery from mapboxDraw features
                        const newFeature = EditableFeatureCollectionLayer.layerService.mapboxDraw.get(feature.properties.mapboxDrawId);
                        feature.geometry = newFeature.geometry;
                        return feature;
                    }));
                    l._editFeatureCollection.features = [];
                });
            }
            else {
                layers.forEach(l => {
                    l.addFeatures(l._editFeatureCollection.features);
                    l._editFeatureCollection.features = [];
                });
            }
            map_layer_1.MapLayer.layerService.mapboxDraw.deleteAll();
            map_layer_1.MapLayer.layerService.mapboxDraw.trash();
            EditableFeatureCollectionLayer.mode = "create";
            EditableFeatureCollectionLayer.editInProgress = false;
        }
    }
    get colourScheme() {
        return this._colourScheme;
    }
    set colourScheme(c) {
        this._colourScheme = c;
        this._mapboxLayers.forEach(l => {
            l.colourScheme = c;
        });
    }
    show() {
        const _super = Object.create(null, {
            show: { get: () => super.show }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._mapboxLayers.map(layer => layer.show()));
            yield _super.show.call(this);
        });
    }
    hide() {
        const _super = Object.create(null, {
            hide: { get: () => super.hide }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._mapboxLayers.map(layer => layer.hide()));
            yield _super.hide.call(this);
        });
    }
    clear() {
        const _super = Object.create(null, {
            clear: { get: () => super.clear }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._mapboxLayers.map((layer) => __awaiter(this, void 0, void 0, function* () { return yield layer.clear(); })));
            if (typeof map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._mapboxId) !==
                "undefined") {
                map_layer_1.MapLayer.layerService.mapboxGl.removeSource(this._mapboxId);
                console.log(`removing source ${this._mapboxId}`);
            }
            yield _super.clear.call(this);
        });
    }
    set opacity(o) {
        super.opacity = o;
        this._mapboxLayers.map(layer => (layer.opacity = o));
    }
    get opacity() {
        return super.opacity;
    }
    resolveFeatureProperties(featureProps) {
        const resolved = {};
        // If any of the properties are functions -> call the function
        Object.keys(featureProps).forEach(key => {
            if (typeof featureProps[key] === "function") {
                resolved[key] = featureProps[key]();
            }
            else {
                resolved[key] = featureProps[key];
            }
        });
        return resolved;
    }
    createNewFeature(type) {
        if (EditableFeatureCollectionLayer.editInProgress) {
            return;
        }
        EditableFeatureCollectionLayer.editInProgress = true;
        switch (type) {
            case FeatureType.Point:
                map_layer_1.MapLayer.layerService.mapboxDraw.changeMode("draw_point");
                this.setOnCreateHandler(this.defaultFeatureProperties.point);
                break;
            case FeatureType.Line:
                map_layer_1.MapLayer.layerService.mapboxDraw.changeMode("draw_line_string");
                this.setOnCreateHandler(this.defaultFeatureProperties.line);
                break;
            case FeatureType.Polygon:
                map_layer_1.MapLayer.layerService.mapboxDraw.changeMode("draw_polygon");
                this.setOnCreateHandler(this.defaultFeatureProperties.polygon);
                break;
        }
    }
    setOnCreateHandler(defaultFeatureProperties) {
        const _self = this;
        const removeHandlers = event => {
            // Remove draw created event handler
            map_layer_1.MapLayer.layerService.mapboxGl.off("draw.modechange", removeHandlers);
            map_layer_1.MapLayer.layerService.mapboxGl.off("draw.create", onCreateHandler);
            map_layer_1.MapLayer.layerService.mapboxDraw.trash();
            EditableFeatureCollectionLayer.editInProgress = false;
        };
        const onCreateHandler = (event) => {
            // Remove draw created event handler
            removeHandlers(event);
            _self.addFeatures(event.features, defaultFeatureProperties);
        };
        map_layer_1.MapLayer.layerService.mapboxGl.on("draw.create", onCreateHandler);
        map_layer_1.MapLayer.layerService.mapboxGl.on("draw.modechange", removeHandlers);
    }
    addFeatures(features, deafultFeatureProperties = {}) {
        const _self = this;
        if (this.singleFeature) {
            this._featureCollection.features = [];
            if (features.length > 1) {
                features = [features.shift()];
            }
        }
        features.forEach(feature => {
            const properties = (feature.properties = feature.properties || {}); // Initialize feature.properties if needed
            Object.assign(properties, this.resolveFeatureProperties(deafultFeatureProperties));
        });
        this._featureCollection.features.push(...features);
        this.updateFeatureCollection();
    }
    /**
     * Call this method after updating this._featureCollection
     *
     * @private
     */
    updateFeatureCollection() {
        const source = map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._mapboxId);
        if (typeof source !== "undefined") {
            source.setData(this._featureCollection);
        }
        else {
            map_layer_1.MapLayer.layerService.mapboxGl.addSource(this._mapboxId, {
                type: "geojson",
                data: this._featureCollection,
            });
        }
        this._featureCollectionBehaviourSubject.next(this._featureCollection);
    }
    editFeature(f, index) { }
    /**
     * Returns array of Toolbar buttons
     */
    getToolbarButtons() {
        return Object.keys(this.toolbarButtonOptions).map(featureType => {
            // If createNewFn is not set -> return default createNewFeature function
            if (typeof this.toolbarButtonOptions[featureType].createNewFn !== "function") {
                return Object.assign({}, this.toolbarButtonOptions[featureType], {
                    createNewFn: this.createNewFeature.bind(this, featureType),
                });
            }
            // Otherwise return function set
            return this.toolbarButtonOptions[featureType];
        });
    }
    editFeatureGeometry(feature, index) {
        const [mapboxDrawId] = map_layer_1.MapLayer.layerService.mapboxDraw.add(JSON.parse(JSON.stringify(turf_1.featureCollection([feature]))));
        const oldFeature = this._featureCollection.features.splice(index, 1)[0];
        oldFeature.properties.mapboxDrawId = mapboxDrawId;
        this._editFeatureCollection.features.push(oldFeature);
        this.updateFeatureCollection();
        map_layer_1.MapLayer.layerService.mapboxDraw.changeMode("simple_select", {
            featureIds: [mapboxDrawId],
        });
    }
    editFeatureProperties(feature, index) {
        // Get formschema for layer type
        let formSchema;
        if (feature.geometry.type === "Point") {
            formSchema = this.featurePropertiesFormModel.point;
        }
        else if (feature.geometry.type === "LineString" ||
            feature.geometry.type === "MultiLineString") {
            formSchema = this.featurePropertiesFormModel.line;
        }
        else if (feature.geometry.type === "Polygon" ||
            feature.geometry.type === "MultiPolygon") {
            formSchema = this.featurePropertiesFormModel.polygon;
        }
        if (typeof formSchema !== "undefined") {
            if (EditableFeatureCollectionLayer.editInProgress) {
                return false;
            }
            map_layer_1.MapLayer.layerService.showPopup({
                title: `Edit ${this.name} feature`,
                model: feature,
                dangerBtn: {
                    label: "Delete",
                    onClickFn: (() => {
                        this._featureCollection.features.splice(index, 1);
                        this.updateFeatureCollection();
                    }).bind(this),
                },
                coordinates: map_layer_1.MapLayer.layerService.mapboxGl.project(turf_1.centroid(feature)
                    .geometry.coordinates),
                formSchema,
                formOnSubmitFn: updatedModel => {
                    // If the form has geometry editing -> update coordinates
                    if ("geometry" in updatedModel) {
                        // Change coordinates to array (as NgDynamicForms will change keys to strings)
                        if (!Array.isArray(updatedModel.geometry.coordinates)) {
                            updatedModel.geometry.coordinates = Object.values(updatedModel.geometry.coordinates).map(coords => parseFloat(coords));
                        }
                        // Check that all coordinates are set
                        if (typeof updatedModel.geometry.coordinates.find(coord => coord === "") === "undefined") {
                            if (feature.geometry.type === "Point") {
                                ;
                                feature.geometry.coordinates =
                                    updatedModel.geometry.coordinates;
                            }
                            else {
                                // TODO: add polygon coordinate editing
                            }
                        }
                    }
                    // (deep) Merge layer feature with form Model
                    this._featureCollection.features[index] = mergeOptions(feature, updatedModel);
                    this.updateFeatureCollection();
                },
                closeOnMapMove: true,
                background: true,
            });
        }
    }
}
EditableFeatureCollectionLayer.editInProgress = false;
EditableFeatureCollectionLayer.mode = "create";
exports.EditableFeatureCollectionLayer = EditableFeatureCollectionLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts":
/*!************************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/map-geotiff-layer.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const plotty_1 = __webpack_require__(/*! plotty */ "./node_modules/plotty/src/plotty.js");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! ../colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const web_worker_1 = __webpack_require__(/*! ../../../util/web-workers/web-worker */ "./src/app/util/web-workers/web-worker.ts");
const canvas_layer_1 = __webpack_require__(/*! ./canvas-layer */ "./src/app/geo-web/map/map-layer/canvas-layer.ts");
const geospatial_projections_1 = __webpack_require__(/*! ../../../../../../shared/src/util/geospatial-projections */ "../shared/src/util/geospatial-projections.ts");
class RasterLayer extends canvas_layer_1.CanvasOverlayLayer {
    constructor(name, data, _band = 0) {
        super(name);
        this._band = _band;
        this.valueFormatFn = d3_1.format(".2f");
        this._type = "RasterLayer";
        this.setData(data);
        this.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateInferno");
    }
    setData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this._data;
            if (typeof data === "function") {
                this._getDataFn = data;
            }
            else if (typeof data === "string") {
                this._getDataFn = () => map_layer_1.MapLayer.layerService.getGeotiffData(data, this.name, this.projectionOverride);
            }
            else {
                this._data = data;
            }
            if (this.visible) {
                yield this.render(true);
            }
        });
    }
    get data() {
        return this._data;
    }
    getBbox() {
        if (typeof this.data === "undefined") {
            return undefined;
        }
        return this.data.bbox4326;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this._data === "undefined") {
                try {
                    this._data = yield this._getDataFn();
                    // If minValue/maxValue wasn't set manually -> use min/max pixel values
                    if (typeof this.maxValue === "undefined" ||
                        typeof this.minValue === "undefined") {
                        // Unfortunately - georaster's min/max values are sometimes wrong (that is this._data.mins/maxs
                        let maxValue = d3_1.max(this._data.valuesFlat[this._band]);
                        let minValue = d3_1.min(this._data.valuesFlat[this._band]);
                        // Check if nodatavalue is min or max -> and then set min/max pixel values accordingly
                        if (this.data.noDataValue === minValue) {
                            minValue = d3_1.min(this._data.valuesFlat[this._band], d => d <= this.data.noDataValue ? maxValue : d);
                        }
                        if (this.data.noDataValue === maxValue) {
                            maxValue = d3_1.max(this._data.valuesFlat[this._band], d => d >= this.data.noDataValue ? minValue : d);
                        }
                        if (typeof this.maxValue === "undefined") {
                            this.maxValue = maxValue;
                        }
                        if (typeof this.minValue === "undefined") {
                            this.minValue = minValue;
                        }
                    }
                }
                catch (error) {
                    if (error !== web_worker_1.WebWorkerErrorMessages.WorkerTerminated) {
                        console.log(`Error occurred while initialising layer ${this.name} (${error})`);
                        console.log(error);
                    }
                    throw error;
                }
            }
        });
    }
    render(force = false) {
        const _super = Object.create(null, {
            render: { get: () => super.render }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if ((this._rendered && !force) || this._rendering) {
                return;
            }
            this._rendering = true;
            try {
                yield this.init();
            }
            catch (error) {
                this._rendering = false;
                return;
            }
            const plot = new plotty_1.plot({
                domain: [this.minValue, this.maxValue],
                canvas: this._rootElement.node(),
                data: this._data.valuesFlat[this._band],
                width: this._data.width,
                height: this._data.height,
                colorScale: this.colourScheme.toPlotty(),
            });
            plot.setNoDataValue(this.data.noDataValue);
            plot.setClamp(false, true);
            plot.render();
            yield _super.render.call(this, force);
            this._rendering = false;
            this._rendered = true;
        });
    }
    clear() {
        super.clear();
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (this._rendered) {
                yield this.hide();
                setTimeout(() => {
                    this._canvasContext.clearRect(0, 0, this._data.width, this._data.height);
                    // this._data.pixels = [] ?????
                    // how to clear georaster
                    this._initialised = false;
                    resolve();
                }, 500);
            }
            else {
                resolve();
            }
        }));
    }
    hide() {
        super.hide();
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (this._rendered) {
                this._rootElement
                    .transition()
                    .duration(400)
                    .style("opacity", 0)
                    .on("end", () => {
                    resolve();
                });
            }
        }));
    }
    show() {
        const _super = Object.create(null, {
            show: { get: () => super.show }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._rendered) {
                yield this.render();
            }
            yield _super.show.call(this);
        });
    }
    getValueAtPoint(point) {
        if (typeof this._data !== "undefined") {
            // Adapted from https://github.com/stuartmatthews/leaflet-geotiff/blob/master/leaflet-geotiff.js
            const EPSG3857coords = geospatial_projections_1.projectCoords([point.latlng.lng, point.latlng.lat], geospatial_projections_1.EPSG4326, geospatial_projections_1.EPSG3857);
            const x = Math.floor((EPSG3857coords[0] - this.data.xmin) / this.data.pixelWidth);
            const y = Math.floor((this.data.ymax - EPSG3857coords[1]) / this.data.pixelHeight);
            // If x and y are outside range return undefined
            if (x < 0 || x > this._data.width || y < 0 || y > this._data.height) {
                return undefined;
            }
            // const i = y * this._data.width + x
            const value = this._data.values[this._band][y][x];
            if (value !== this.data.noDataValue) {
                return this.valueFormatFn(value);
            }
        }
        return undefined;
    }
}
exports.RasterLayer = RasterLayer;
class RasterMultiLayer extends RasterLayer {
    constructor(name, _dimensions, _layerMap) {
        super(name, _layerMap(_dimensions));
        this._dimensions = _dimensions;
        this._layerMap = _layerMap;
        this._type = "RasterMultiLayer";
        this.disableFilter = true;
    }
    static isInstanceOf(obj) {
        return obj.type === "RasterMultiLayer";
    }
    get layerMap() {
        return this._layerMap;
    }
    get dimensions() {
        return this._dimensions;
    }
    get dimensionsArray() {
        return Object.values(this._dimensions);
    }
    updateLayer(updateLinked = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const newData = this._layerMap(this._dimensions);
            yield this.setData(newData);
            if (updateLinked) {
                yield Promise.all(this.linkedLayers.map(layer => layer.updateLayer(false)));
            }
        });
    }
}
exports.RasterMultiLayer = RasterMultiLayer;
const gpu_js_1 = __webpack_require__(/*! gpu.js */ "./node_modules/gpu.js/dist/gpu-browser.js");
const array_1 = __webpack_require__(/*! ../../../../../../shared/src/util/array */ "../shared/src/util/array.ts");
class RasterExpressionLayer extends RasterLayer {
    constructor(name, _layers, _kernalFn) {
        super(name);
        this._layers = _layers;
        this._kernalFn = _kernalFn;
        this._layerUpdating = false;
        this.setData(this.calc);
        this._type = "RasterExpressionLayer";
        if (RasterMultiLayer.isInstanceOf(_layers[0])) {
            this.disableFilter = true;
        }
    }
    calc() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._layers.map(layer => layer.init()));
            const gpu = new gpu_js_1.GPU();
            const kernal = gpu
                .createKernel(this._kernalFn)
                .setOutput([this._layers[0].data.width, this._layers[0].data.height]);
            const results = kernal(this._layers.map(layer => layer.data.values[0]));
            gpu.destroy();
            const newRasterLayerData = Object.assign({}, this._layers[0].data);
            newRasterLayerData.geotiffArrayBuffer = undefined;
            newRasterLayerData.values = [results];
            newRasterLayerData.valuesFlat = newRasterLayerData.values.map(values => array_1.concatenate(Float32Array, ...values));
            return newRasterLayerData;
        });
    }
    get dimensions() {
        if (RasterMultiLayer.isInstanceOf(this._layers[0])) {
            return this._layers[0].dimensions;
        }
        return undefined;
    }
    get dimensionsArray() {
        if (RasterMultiLayer.isInstanceOf(this._layers[0])) {
            return Object.values(this._layers[0].dimensions);
        }
        return undefined;
    }
    updateLayer(updateLinked = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._layerUpdating || this._rendering) {
                return;
            }
            this._layerUpdating = true;
            yield Promise.all(this._layers.map((layer) => __awaiter(this, void 0, void 0, function* () {
                if (RasterMultiLayer.isInstanceOf(layer)) {
                    yield layer.updateLayer(false);
                }
            })));
            yield this.setData(this.calc);
            this._layerUpdating = false;
        });
    }
}
exports.RasterExpressionLayer = RasterExpressionLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/map-layer.ts":
/*!****************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/map-layer.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const d3_svg_legend_1 = __webpack_require__(/*! d3-svg-legend */ "./node_modules/d3-svg-legend/indexRollupNext.js");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const dates_1 = __webpack_require__(/*! ../../../../../../shared/src/util/dates */ "../shared/src/util/dates.ts");
class MapLayer {
    constructor(name) {
        this.reverseLegendLabels = true;
        this.showLegend = true;
        this.hideLayer = false;
        this.downloadData = { disabled: true };
        /**
         * This will format the original value (not transformed through this.valueTransformation) to display on legend and values mouseover popup
         *
         */
        this.valueFormatFn = (value) => value.toString();
        this.blendModes = [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "darken",
            "lighten",
            "color - dodge",
            "color - burn",
            "hard - light",
            "soft - light",
            "exclusion",
            "hue",
            "saturation",
            "color",
            "luminosity",
        ].map(key => ({
            name: key,
        }));
        this.linkedLayers = [];
        this._visible = false;
        /**
         * Opacity (0 to 1)
         *
         */
        this._opacity = 0.6;
        this._on = new rxjs_1.Subject();
        this._onObservable = this._on.asObservable();
        this._initialised = false;
        this._blendMode = { name: "normal" };
        this.showValueInPopup = true;
        this.onClickPolicy = "selected";
        this.name = name;
        this._legendParent = MapLayer.layerService.layerLegendElement;
    }
    static setLayerService(ls) {
        MapLayer.layerService = ls;
    }
    get minValueTransformed() {
        return typeof this.valueTransformation === "undefined"
            ? undefined
            : this.valueTransformation.func(this.minValue);
    }
    get maxValueTransformed() {
        return typeof this.valueTransformation === "undefined"
            ? undefined
            : this.valueTransformation.func(this.maxValue);
    }
    set minValueTransformed(min) {
        this.minValue =
            typeof this.valueTransformation === "undefined"
                ? undefined
                : this.valueTransformation.inverse(min);
    }
    set maxValueTransformed(max) {
        this.maxValue =
            typeof this.valueTransformation === "undefined"
                ? undefined
                : this.valueTransformation.inverse(max);
    }
    get valueFormat() {
        return this._valueFormat;
    }
    /**
     *  This property provides 'helpers' to set the valueFormatFn property.
     *  This allows JSON values to be resolved into certain functions for valueFormatFn
     *
     */
    set valueFormat(valueFormat) {
        this._valueFormat = valueFormat;
        if (typeof valueFormat === "string") {
            switch (valueFormat) {
                case 'secondsToHMString("hm")':
                    this.valueFormatFn = dates_1.secondsToHMString("hm");
                    break;
                case 'secondsToHMString(":")':
                    this.valueFormatFn = dates_1.secondsToHMString(":");
                    break;
            }
        }
        else {
            // Find max key value in layer.valueFormat
            const maxLayerValue = d3_1.max(Object.keys(valueFormat).map(k => parseFloat(k)));
            this.valueFormatFn = (d) => valueFormat[Math.round(Math.max(Math.min(d, maxLayerValue), 0))];
        }
    }
    get onObservable() {
        return this._onObservable;
    }
    get type() {
        return this._type;
    }
    get visible() {
        return this._visible;
    }
    render(forceRerender) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this.colourScheme === "undefined" ||
                this.colourScheme.type !== "D3ColourScheme" ||
                typeof this.minValue === "undefined" ||
                typeof this.maxValue === "undefined") {
                return;
            }
            if (this.showLegend &&
                (typeof this._legend === "undefined" || forceRerender)) {
                if (typeof this._legend !== "undefined") {
                    this._legend.remove();
                }
                this.colourScheme.setDomain(this.minValue, this.maxValue);
                // Render legend
                const colorLegendInit = d3_svg_legend_1.legendColor()
                    .labels((args) => this.valueFormatFn(parseFloat(args.generatedLabels[args.i])))
                    .labelFormat(d3_1.format(""))
                    .title(`${this.legendTitle || this.name}${typeof this.units !== "undefined" ? ` (${this.units})` : ""}`);
                if (typeof this.legendCells !== "undefined") {
                    colorLegendInit.cells(this.legendCells);
                }
                else {
                    colorLegendInit.cells(6);
                }
                if (typeof this.legendLabels !== "undefined") {
                    colorLegendInit.labels(this.legendLabels);
                }
                // The colour legends must be revesed - as the labels are converted to strings  - they aren't sorted properly
                if ((this.colourScheme.reversed && !this.reverseLegendLabels) ||
                    (!this.colourScheme.reversed && this.reverseLegendLabels)) {
                    colorLegendInit.ascending(true);
                }
                const colorLegend = colorLegendInit.scale(this.colourScheme.scale);
                this._legend = this._legendParent.append("svg");
                this._legend.attr("class", "legend");
                const legendG = this._legend.append("g");
                legendG.call(colorLegend);
                const legendBounds = legendG.node().getBoundingClientRect();
                this._legend
                    .attr("width", legendBounds.width)
                    .attr("height", legendBounds.height);
                if (!this.visible) {
                    this._legend.attr("display", "none");
                }
                else {
                    this._legend.selectAll(".swatch").style("opacity", this._opacity);
                }
            }
        });
    }
    updateLayer(updateLinked = true) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.render(true);
            if (updateLinked) {
                yield Promise.all(this.linkedLayers.map(layer => layer.updateLayer(false)));
            }
        });
    }
    show() {
        return __awaiter(this, void 0, void 0, function* () {
            // Set legend swatch opacity (to match layer opacity)
            if (typeof this._legend !== "undefined") {
                if (typeof this._legend !== "undefined") {
                    this._legend.style("display", "initial");
                }
                this._legend.selectAll(".swatch").style("opacity", this._opacity);
            }
            this._visible = true;
            this._on.next("show");
        });
    }
    hide() {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this._legend !== "undefined") {
                this._legend.style("display", "none");
            }
            this._visible = false;
            this._on.next("hide");
        });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this._legend !== "undefined") {
                this._legend
                    .transition()
                    .duration(750)
                    .style("margin-bottom", "-100%")
                    .style("height", "0px")
                    .style("opacity", 0)
                    .on("end", (() => this._legend.remove()).bind(this));
            }
            this._on.next("clear");
        });
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.clear();
            this._on.next("delete");
        });
    }
    setZIndex(z) {
        return false;
    }
    /**
     * Get opacity (0 to 100)
     *
     */
    get opacity() {
        return this._opacity * 100;
    }
    /**
     * Set opacity (0 to 100)
     *
     */
    set opacity(o) {
        this._opacity = o / 100;
        if (this.visible) {
            // Set legend swatch opacity (to match layer opacity)
            if (typeof this._legend !== "undefined") {
                this._legend.selectAll(".swatch").style("opacity", this._opacity);
            }
        }
    }
    get blendMode() {
        return this._blendMode;
    }
    set blendMode(b) {
        this._blendMode = b;
    }
    getFeaturesAtPoint(point) {
        return undefined;
    }
    getValueAtPoint(point) {
        return undefined;
    }
}
exports.MapLayer = MapLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts":
/*!**********************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const map_layer_1 = __webpack_require__(/*! ./map-layer */ "./src/app/geo-web/map/map-layer/map-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! ../colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
class MapboxGlLayer extends map_layer_1.MapLayer {
    constructor(name, _mapboxGlLayer, _source) {
        super(name);
        this._mapboxGlLayer = _mapboxGlLayer;
        this._source = _source;
        this.filterValuesArray = [];
        /**
         * This will disable setting the mapbox filter with the dimensionsArray
         *
         */
        this.disableFilter = false;
        this.blendMode = undefined;
        this.blendModes = [];
        this._opacityPreHide = 1;
        this._onRenderSubject = new rxjs_1.Subject();
        this._onRenderObservable = this._onRenderSubject.asObservable();
        if (typeof this._mapboxGlLayer !== "undefined" &&
            typeof this._mapboxGlLayer.id === "undefined") {
            throw `New MapboxGlLayer ${name}: _mapboxGlLayer.id is undefined`;
        }
        if (typeof this._mapboxGlLayer !== "undefined" &&
            typeof _mapboxGlLayer.filter !== "undefined") {
            this.mapboxFilter = _mapboxGlLayer.filter;
        }
    }
    static isInstanceOf(obj) {
        return "mapboxGlLayer" in obj;
    }
    get colourByProperty() {
        return this._colourByProperty;
    }
    set colourByProperty(colorByProperty) {
        if ("options" in colorByProperty &&
            Array.isArray(colorByProperty.options)) {
            this._colourByProperty = colorByProperty;
        }
        else {
            this._colourByProperty = {
                options: [colorByProperty],
                selected: colorByProperty,
            };
        }
    }
    //Setup getter for population
    get population() {
        return this._population;
    }
    //Set population values
    set population(population) {
        if ("options" in population &&
            Array.isArray(population.options)) {
            this._population = population;
        }
        else {
            this._population = {
                options: [population],
                selected: population,
            };
        }
    }
    //Setup getter for fires
    get fire() {
        return this._fire;
    }
    //Set population values
    set fire(fire) {
        if ("options" in fire &&
            Array.isArray(fire.options)) {
            this._fire = fire;
        }
        else {
            this._fire = {
                options: [fire],
                selected: fire,
            };
        }
    }
    //Setup getter for evac messages
    get evacMessage() {
        return this._evacMessage;
    }
    //Set evacuation message values
    set evacMessage(message) {
        if ("options" in message &&
            Array.isArray(message.options)) {
            this._evacMessage = message;
        }
        else {
            this._evacMessage = {
                options: [message],
                selected: message,
            };
        }
    }
    // Return maximum speed on road network
    get speed() {
        return this._speed;
    }
    //setup maximum speed on road network
    set speed(speed) {
        this._speed = speed;
    }
    // Return animationspeed for simulation
    get animationSpeed() {
        return this._animationSpeed;
    }
    //setup animationspeed for simulation
    set animationSpeed(speed) {
        this._animationSpeed = speed;
    }
    // Return value in time slider
    get time() {
        return this._time;
    }
    //setup value in time slider
    set time(time) {
        this._time = time;
    }
    get onRenderObservable() {
        return this._onRenderObservable;
    }
    get minValue() {
        return this._minValue;
    }
    set minValue(v) {
        this._minValue = v;
        if (typeof this._colourByProperty !== "undefined" &&
            typeof this._colourByProperty.selected.minValue !== "undefined") {
            this._colourByProperty.selected.minValue = v;
        }
    }
    get maxValue() {
        return this._maxValue;
    }
    set maxValue(v) {
        this._maxValue = v;
        if (typeof this._colourByProperty !== "undefined" &&
            typeof this._colourByProperty.selected.maxValue !== "undefined") {
            this._colourByProperty.selected.maxValue = v;
        }
    }
    get mapboxGlLayer() {
        return this._mapboxGlLayer;
    }
    get sourceId() {
        return this._source.id;
    }
    render(force = false) {
        const _super = Object.create(null, {
            render: { get: () => super.render }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this._mapboxGlLayer === "undefined") {
                return;
            }
            if (typeof this._mapboxGlLayer.paint === "undefined") {
                this._mapboxGlLayer.paint = {};
            }
            const addedToMap = typeof map_layer_1.MapLayer.layerService.mapboxGl.getLayer(this.mapboxGlLayer.id) !==
                "undefined";
            if (!this._initialised || force) {
                // Initialise filter
                this._mapboxGlLayer.filter =
                    typeof this.mapboxFilter === "undefined"
                        ? ["all"]
                        : ["all", this.mapboxFilter];
                // Set Filter from dimensionsArray
                if (typeof this.dimensionsArray !== "undefined" && !this.disableFilter) {
                    this._mapboxGlLayer.filter.push(...this.dimensionsArray.map(dim => [
                        "==",
                        ["get", dim.key],
                        dim.selected.value,
                    ]));
                }
                // Set Filter from valu
                this._mapboxGlLayer.filter.push(...this.filterValuesArray.reduce((filter, current) => {
                    if (typeof current.minValue !== "undefined") {
                        filter.push([">=", ["get", current.key], current.minValue]);
                    }
                    if (typeof current.maxValue !== "undefined") {
                        filter.push(["<=", ["get", current.key], current.maxValue]);
                    }
                    return filter;
                }, []));
                // Set colour scale
                if (typeof this.colourScheme !== "undefined" &&
                    colour_scheme_1.D3ColourScheme.isInstanceOf(this.colourScheme) &&
                    typeof this._colourByProperty !== "undefined") {
                    const selectedColByProp = this._colourByProperty.selected;
                    // Update min/max values if defined in colorByProperty
                    if (typeof selectedColByProp.minValue !== "undefined") {
                        this.minValue = selectedColByProp.minValue;
                    }
                    if (typeof selectedColByProp.maxValue !== "undefined") {
                        this.maxValue = selectedColByProp.maxValue;
                    }
                    this.colourScheme.setDomain(this.minValue, this.maxValue);
                    let colourExpression;
                    // If data has been provided to colour by -> see https://docs.mapbox.com/mapbox-gl-js/example/data-join/
                    if (typeof selectedColByProp.dataToJoin !== "undefined") {
                        colourExpression = ["match", ["get", selectedColByProp.key]];
                        // Calculate color for each data value
                        selectedColByProp.dataToJoin.forEach(value => {
                            colourExpression.push(value.featureValue, this.colourScheme.scale(value.dataValue));
                        });
                        // Last value is the default, used where there is no data
                        colourExpression.push("rgba(0,0,0,0)");
                        // Otherwise, we are colouring by a property contained in each feature
                    }
                    else {
                        colourExpression = this.colourScheme.toMapbox(selectedColByProp.key);
                        // Set filter to remove null values
                        this._mapboxGlLayer.filter.push([
                            "!=",
                            ["get", selectedColByProp.key],
                            null,
                        ]);
                    }
                    // Update map layer
                    if (addedToMap) {
                        map_layer_1.MapLayer.layerService.mapboxGl.setPaintProperty(this.mapboxGlLayer.id, `${this.mapboxGlLayer.type}-color`, colourExpression);
                    }
                    else {
                        this._mapboxGlLayer.paint[`${this.mapboxGlLayer.type}-color`] = colourExpression;
                    }
                }
                else if (typeof this.colourScheme !== "undefined" &&
                    colour_scheme_1.SolidColourScheme.isInstanceOf(this.colourScheme)) {
                    if (addedToMap) {
                        map_layer_1.MapLayer.layerService.mapboxGl.setPaintProperty(this.mapboxGlLayer.id, `${this.mapboxGlLayer.type}-color`, this.colourScheme.solidColour);
                    }
                    else {
                        this._mapboxGlLayer.paint[`${this.mapboxGlLayer.type}-color`] = this.colourScheme.solidColour;
                    }
                }
                // Delete filter if === ["all"]
                if (this._mapboxGlLayer.filter.length === 1 &&
                    this._mapboxGlLayer.filter[0] === "all") {
                    delete this._mapboxGlLayer.filter;
                }
                if (addedToMap && typeof this._mapboxGlLayer.filter !== "undefined") {
                    map_layer_1.MapLayer.layerService.mapboxGl.setFilter(this.mapboxGlLayer.id, this._mapboxGlLayer.filter);
                }
            }
            if (!addedToMap) {
                this._mapboxGlLayer.paint[`${this.mapboxGlLayer.type}-opacity`] = this._opacity;
                if (typeof this._source !== "undefined") {
                    if (typeof map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._source.id) !==
                        "undefined") {
                        map_layer_1.MapLayer.layerService.mapboxGl.removeSource(this._source.id);
                    }
                    map_layer_1.MapLayer.layerService.mapboxGl.addSource(this._source.id, this._source.source);
                }
                map_layer_1.MapLayer.layerService.mapboxGl.addLayer(this.mapboxGlLayer);
                this._initialised = true;
            }
            yield _super.render.call(this, force);
            this._onRenderSubject.next();
        });
    }
    updateLayerFilter() {
        map_layer_1.MapLayer.layerService.mapboxGl.setFilter(this.mapboxGlLayer.id, this.mapboxGlLayer.filter);
    }
    show() {
        const _super = Object.create(null, {
            show: { get: () => super.show }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.render();
            if (this.opacity === 0) {
                this.opacity = this._opacityPreHide * 100;
            }
            yield _super.show.call(this);
        });
    }
    hide() {
        const _super = Object.create(null, {
            hide: { get: () => super.hide }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this._opacityPreHide = this._opacity;
            this.opacity = 0;
            yield _super.hide.call(this);
        });
    }
    clear() {
        const _super = Object.create(null, {
            clear: { get: () => super.clear }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this.mapboxGlLayer !== "undefined" &&
                typeof map_layer_1.MapLayer.layerService.mapboxGl.getLayer(this.mapboxGlLayer.id) !==
                    "undefined") {
                map_layer_1.MapLayer.layerService.mapboxGl.removeLayer(this.mapboxGlLayer.id);
            }
            if (typeof this._source !== "undefined" &&
                typeof map_layer_1.MapLayer.layerService.mapboxGl.getSource(this._source.id) !==
                    "undefined") {
                map_layer_1.MapLayer.layerService.mapboxGl.removeSource(this._source.id);
            }
            yield _super.clear.call(this);
        });
    }
    /**
     * FIXME: sometimes this hangs before a layer has been added.
     *
     */
    set opacity(o) {
        super.opacity = o;
        if (typeof map_layer_1.MapLayer.layerService.mapboxGl.getLayer(this.mapboxGlLayer.id) !==
            "undefined") {
            map_layer_1.MapLayer.layerService.mapboxGl.setPaintProperty(this.mapboxGlLayer.id, `${this.mapboxGlLayer.type}-opacity`, o / 100);
        }
    }
    get opacity() {
        return this._opacity * 100;
    }
    getPolygonAtPoint(pointOrBox) {
        if (typeof this.idByProperty === "undefined") {
            throw "Layer idByProperty must be defined to call getPolygonAtPoint()";
        }
        let filter = this._mapboxGlLayer.filter;
        // Get one feature under mouse
        const renderedFeatures = map_layer_1.MapLayer.layerService.mapboxGl.queryRenderedFeatures(pointOrBox, { layers: [this.mapboxGlLayer.id] })[0];
        if (typeof renderedFeatures === "undefined") {
            return undefined;
        }
        // Create new filter which merges current filter, with idByProperty (to find parts of the feature under mouse)
        if (typeof filter === "undefined") {
            filter = ["all"];
        }
        const found = map_layer_1.MapLayer.layerService.mapboxGl.queryRenderedFeatures(undefined, {
            layers: [this.mapboxGlLayer.id],
            filter: [
                ...filter,
                [
                    "==",
                    ["get", this.idByProperty],
                    renderedFeatures.properties[this.idByProperty],
                ],
            ],
        });
        if (found.length === 0) {
            return undefined;
        }
        // Return merged polygon
        return [turf_1.union(...found)];
    }
    getPointFeatureAtPoint(pointOrBox) {
        const f = map_layer_1.MapLayer.layerService.mapboxGl.queryRenderedFeatures(pointOrBox, {
            layers: [this.mapboxGlLayer.id],
        });
        return f;
    }
    getFeaturesAtPoint(point, buffer = 0) {
        let pointOrBox = map_layer_1.MapLayer.layerService.mapboxGl.project(point.latlng);
        if (buffer !== 0) {
            pointOrBox = [
                [pointOrBox.x - buffer, pointOrBox.y - buffer],
                [pointOrBox.x + buffer, pointOrBox.y + buffer],
            ];
        }
        if (this.mapboxGlLayer.type === "fill" ||
            this.mapboxGlLayer.type === "line") {
            return this.getPolygonAtPoint(pointOrBox);
        }
        if (this.mapboxGlLayer.type === "circle" ||
            this.mapboxGlLayer.type === "symbol") {
            return this.getPointFeatureAtPoint(pointOrBox);
        }
        return undefined;
    }
    getValueAtPoint(point) {
        if (typeof this._colourByProperty === "undefined") {
            return undefined;
        }
        const layer = map_layer_1.MapLayer.layerService.mapboxGl.queryRenderedFeatures(map_layer_1.MapLayer.layerService.mapboxGl.project(point.latlng), { layers: [this.mapboxGlLayer.id] })[0];
        if (typeof layer === "undefined") {
            return undefined;
        }
        if (typeof this._colourByProperty.selected.dataToJoin === "undefined") {
            return layer.properties[this._colourByProperty.selected.key];
        }
        const value = this._colourByProperty.selected.dataToJoin.find(data => data.featureValue ===
            layer.properties[this._colourByProperty.selected.key]);
        return typeof value === "undefined" ? undefined : value.dataValue;
    }
}
exports.MapboxGlLayer = MapboxGlLayer;


/***/ }),

/***/ "./src/app/geo-web/map/map-layer/time-slider.ts":
/*!******************************************************!*\
  !*** ./src/app/geo-web/map/map-layer/time-slider.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class TimeSlider {
    constructor() {
        this.subscribers = new Set();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this._valueDate = new Date(this.minDate.getTime() + this._value * 1000);
        this.subscribers.forEach(sub => sub.onSliderValueChange(this._value, this._valueDate));
    }
    get valueDate() {
        return this._valueDate;
    }
    set valueDate(value) {
        this._valueDate = value;
        this._value = (this._valueDate.getTime() - this.minDate.getTime()) / 1000;
        this.subscribers.forEach(sub => sub.onSliderValueChange(this._value, this._valueDate));
    }
    timeSliderValueChange(event) { }
    timeSliderDateChange(event) { }
}
exports.TimeSlider = TimeSlider;
function instanceOfTimeSliderSubscriber(object) {
    return ("slider" in object &&
        "sliderEnabled" in object &&
        "onSliderValueChange" in object);
}
exports.instanceOfTimeSliderSubscriber = instanceOfTimeSliderSubscriber;


/***/ }),

/***/ "./src/app/geo-web/map/map-popup/map-popup-component.ts":
/*!**************************************************************!*\
  !*** ./src/app/geo-web/map/map-popup/map-popup-component.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const map_popup_service_1 = __webpack_require__(/*! ./map-popup.service */ "./src/app/geo-web/map/map-popup/map-popup.service.ts");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
let PopupFormComponent = class PopupFormComponent {
    constructor(popupService, formService) {
        this.popupService = popupService;
        this.formService = formService;
        // Amount of X pixels to translate the caret (so it aligns with the original coordinates)
        this.caretTranslateX = 0;
        this.onEnterKeyPress = e => {
            if (e.key === "Enter") {
                this.save();
                e.srcElement.blur();
            }
        };
        this._popupSubject = popupService
            .getPopupSubject()
            .subscribe(popupMessage => this.updatePopup(popupMessage));
    }
    set visible(v) {
        this._visible = v;
    }
    get visible() {
        return this._visible;
    }
    ngOnDestroy() {
        this._popupSubject.unsubscribe();
    }
    updatePopup(popupMessage) {
        if (typeof popupMessage === "undefined") {
            this._visible = false;
        }
        else {
            this.currentPopup = popupMessage;
            // Position the popup above or below the cformOnCancelFnoordinates if y-value is above/below middle of screen
            this.position =
                this.currentPopup.coordinates.y >
                    Math.max(document.documentElement.clientHeight, window.innerHeight || 0) /
                        2
                    ? "top"
                    : "bottom";
            // Update coordinates and caret (triangle) position if they are outidse the bounds (160px, 100%-160px)
            const minX = 160;
            const maxX = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) -
                minX;
            this.caretTranslateX = 0;
            if (this.currentPopup.coordinates.x < minX) {
                this.caretTranslateX = Math.min(minX - this.currentPopup.coordinates.x, 135);
                this.currentPopup.coordinates.x = minX;
            }
            else if (this.currentPopup.coordinates.x > maxX) {
                this.caretTranslateX = Math.max(maxX - this.currentPopup.coordinates.x, -135);
                this.currentPopup.coordinates.x = maxX;
            }
            // If the form model/schema has changed -> create new form
            if (this.formModel !== popupMessage.formSchema) {
                this.formModel = popupMessage.formSchema;
                if (typeof this.formModel !== "undefined") {
                    this.formGroup = this.formService.createFormGroup(this.formModel);
                }
            }
            if (typeof this.formGroup !== "undefined" &&
                typeof this.currentPopup.model !== "undefined") {
                // Must be patchValue and not setValue - as setValue will throw an error if the model contains keys which don't exist in the form
                this.formGroup.patchValue(this.currentPopup.model);
            }
            this._visible = true;
        }
    }
    save() {
        if (typeof this.currentPopup.formOnSubmitFn === "function") {
            this.currentPopup.formOnSubmitFn(typeof this.formGroup !== "undefined" ? this.formGroup.value : undefined);
        }
        this._visible = false;
        this.currentPopup = undefined;
    }
    cancel() {
        if (typeof this.currentPopup.formOnCancelFn === "function") {
            this.currentPopup.formOnCancelFn();
        }
        this._visible = false;
        this.currentPopup = undefined;
    }
    dangerBtnClick() {
        if (typeof this.currentPopup.dangerBtn !== "undefined" &&
            typeof this.currentPopup.dangerBtn.onClickFn === "function") {
            this.currentPopup.dangerBtn.onClickFn();
            this.cancel();
        }
    }
};
__decorate([
    core_1.ViewChild("popupContainer"),
    __metadata("design:type", core_1.ElementRef)
], PopupFormComponent.prototype, "mainMenu", void 0);
PopupFormComponent = __decorate([
    core_1.Component({
        selector: "app-map-popup",
        template: __webpack_require__(/*! ./map-popup.component.html */ "./src/app/geo-web/map/map-popup/map-popup.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./map-popup.component.scss */ "./src/app/geo-web/map/map-popup/map-popup.component.scss")]
    }),
    __metadata("design:paramtypes", [map_popup_service_1.PopupFormService,
        core_2.DynamicFormService])
], PopupFormComponent);
exports.PopupFormComponent = PopupFormComponent;


/***/ }),

/***/ "./src/app/geo-web/map/map-popup/map-popup.component.html":
/*!****************************************************************!*\
  !*** ./src/app/geo-web/map/map-popup/map-popup.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"popup-background\"\n  [hidden]=\"!visible || currentPopup === undefined || !currentPopup.background\"></div>\n<div [class]=\"'popup-container popup-container-' + position\"\n  [ngClass]=\"{'background': currentPopup.background}\"\n  [style.left]=\"currentPopup.coordinates.x + 'px'\"\n  [style.top]=\"currentPopup.coordinates.y + 'px'\"\n  *ngIf=\"visible && currentPopup !== undefined\"\n  #popupContainer>\n  <div class=\"caret-up\"\n    [style.left]=\"'calc(50% - ' + caretTranslateX + 'px)'\">\n    <fa-icon [icon]=\"['fas', 'caret-up']\"\n      size=\"sm\"></fa-icon>\n  </div>\n  <p-card [header]=\"currentPopup.title\"\n    styleClass=\"ui-card-shadow\">\n    <div class=\"form\"\n      *ngIf=\"formGroup !== undefined\">\n      <form [formGroup]=\"formGroup\">\n        <dynamic-primeng-form [group]=\"formGroup\"\n          [model]=\"formModel\"\n          (keyup)=\"onEnterKeyPress($event)\"></dynamic-primeng-form>\n      </form>\n    </div>\n    <p-footer>\n      <button type=\"button\"\n        pButton\n        icon=\"pi pi-trash\"\n        (click)=\"dangerBtnClick()\"\n        [label]=\"currentPopup.dangerBtn.label\"\n        class=\"ui-button-danger-outline\"\n        style=\"float: left;margin-left: 0 !important;\"\n        *ngIf=\"currentPopup.dangerBtn !== undefined\"></button>\n      <button pButton\n        *ngIf=\"!currentPopup.hideCancelBtn\"\n        type=\"button\"\n        [label]=\"currentPopup.cancelBtnLabel || 'Cancel'\"\n        icon=\"pi pi-times\"\n        class=\"ui-button-secondary\"\n        (click)=\"cancel()\"></button>\n      <button pButton\n        type=\"button\"\n        [label]=\"currentPopup.submitBtnLabel || 'Save'\"\n        icon=\"pi pi-check\"\n        style=\"margin-right: .25em\"\n        (click)=\"save()\"\n        [disabled]=\"formGroup !== undefined && !formGroup.valid\"></button>\n    </p-footer>\n  </p-card>\n</div>"

/***/ }),

/***/ "./src/app/geo-web/map/map-popup/map-popup.component.scss":
/*!****************************************************************!*\
  !*** ./src/app/geo-web/map/map-popup/map-popup.component.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".fake-leaflet-control,\n.fake-leaflet-control-lg,\n.fake-leaflet-control-colours,\n.popup-container .ui-card {\n  color: #333;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  border: none;\n  background-clip: padding-box; }\n\n.fake-leaflet-control.active,\n.fake-leaflet-control-lg.active,\n.fake-leaflet-control-colours.active,\n.popup-container .active.ui-card {\n  background-color: #007ad9;\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n  color: #ffffff; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg {\n  margin-bottom: 10px;\n  position: relative; }\n\n.fake-leaflet-control {\n  height: 30px;\n  width: 30px; }\n\n.fake-leaflet-control-lg {\n  height: 44px;\n  width: 44px; }\n\n.fake-leaflet-control a,\n.fake-leaflet-control-lg a {\n  color: inherit;\n  height: 100%;\n  width: 100%;\n  display: block;\n  line-height: 0; }\n\n.fake-leaflet-control:hover,\n.fake-leaflet-control-lg:hover {\n  background-color: #f4f4f4; }\n\n.fake-leaflet-control a:hover,\n.fake-leaflet-control-lg a:hover {\n  color: #333;\n  cursor: pointer; }\n\n.fake-leaflet-control.active:hover,\n.fake-leaflet-control-lg.active:hover {\n  background-color: #1775bd; }\n\n.fake-leaflet-control.active a:hover,\n.fake-leaflet-control-lg.active a:hover,\n.fake-leaflet-control-colours.active a:hover,\n.popup-container .active.ui-card a:hover {\n  color: #ffffff; }\n\n.fake-leaflet-control fa-icon.ng-fa-icon,\n.fake-leaflet-control-lg fa-icon.ng-fa-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.fake-leaflet-control a {\n  font-size: 12px; }\n\n.fake-leaflet-control-lg a {\n  font-size: 24px; }\n\n* {\n  box-sizing: border-box; }\n\nbody,\nhtml {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px;\n  margin: 0;\n  padding: 0; }\n\n.c3 text {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px; }\n\nh1,\n.h1 {\n  font-size: 24px;\n  font-weight: 600; }\n\nh2,\n.h2 {\n  font-size: 18px;\n  font-weight: 500; }\n\npre {\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  white-space: -moz-pre-wrap;\n  white-space: -pre-wrap;\n  white-space: -o-pre-wrap;\n  word-wrap: break-word; }\n\n.font-italic-light {\n  font-weight: 100;\n  font-style: italic; }\n\n.text-overflow-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.label, label,\nlabel {\n  display: block;\n  margin-bottom: 10px;\n  margin-top: 20px; }\n\n.badge > .pi {\n  padding-right: 4px; }\n\na.icon-link:last-of-type {\n  padding-right: 10px; }\n\na.icon-link:first-of-type {\n  padding-left: 10px; }\n\na.icon-link {\n  font-size: 0.85em;\n  padding: 0 5px; }\n\nbody .ui-widget-overlay {\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: all linear 0.2s; }\n\n.ui-state-highlight a.icon-link {\n  color: #ffffff; }\n\n.ui-state-highlight a.icon-link:hover {\n  color: #ffffffba; }\n\n.empty-placeholder {\n  color: #999;\n  font-weight: 100;\n  padding: 20px 0;\n  /* height: 100%; */\n  text-align: center; }\n\n.ui-toast {\n  max-height: 100vh;\n  overflow-y: auto; }\n\n.ui-toast-detail {\n  word-break: break-word; }\n\n.modal-dialog.ui-dialog {\n  width: 400px; }\n\n.ui-dialog .ui-grid .ui-grid-row {\n  margin-bottom: 10px; }\n\n.ui-dialog .ui-listbox .ui-listbox-list-wrapper {\n  max-height: calc(100vh - 400px);\n  min-height: 100px; }\n\nbody .ui-dialog .ui-dialog-content {\n  max-height: calc(100vh - 200px);\n  min-height: 200px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar,\nbody .ui-dialog .ui-dialog-footer {\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-top: none; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-bottom: none; }\n\n.ui-dialog .ui-listbox .ui-progressbar {\n  display: inline-block;\n  width: 100%;\n  height: 14px;\n  margin-top: 3px;\n  margin-bottom: -3px;\n  background-color: #0000004a; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-label {\n  font-size: 12px;\n  line-height: 1.25;\n  color: inherit; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-value {\n  background: #0000006b; }\n\nbody .ui-widget,\nbody .ui-autocomplete.ui-autocomplete-multiple .ui-autocomplete-multiple-container .ui-autocomplete-input-token input,\nbody .ui-chips > ul.ui-inputtext .ui-chips-input-token input,\nbody .ui-table .ui-editable-column input,\nbody .ui-treetable .ui-editable-column input,\nbody .ui-terminal .ui-terminal-input {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; }\n\nbody .secondary-col,\nbody .ui-button.ui-state-default.ui-button-secondary,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #e8e8e8;\n  border-color: #e8e8e8; }\n\nbody .secondary-col:hover,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:hover,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c8c8c8;\n  color: #333333;\n  border-color: #c8c8c8; }\n\nbody .secondary-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:focus,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .secondary-col:active,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:active,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:active {\n  background-color: #a0a0a0;\n  color: #333333;\n  border-color: #a0a0a0; }\n\nbody .default-col,\nbody .ui-button.ui-state-default.ui-button-info,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #007ad9;\n  border-color: #007ad9; }\n\nbody .default-col:hover,\nbody .ui-button.ui-state-default.ui-button-info:enabled:hover,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:hover {\n  background-color: #116fbf;\n  color: #ffffff;\n  border-color: #116fbf; }\n\nbody .default-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-info:enabled:focus,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .default-col:active,\nbody .ui-button.ui-state-default.ui-button-info:enabled:active,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:active {\n  background-color: #005b9f;\n  color: #ffffff;\n  border-color: #005b9f; }\n\nbody .success-col,\nbody .ui-button.ui-state-default.ui-button-success,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #34a835;\n  border-color: #34a835; }\n\nbody .success-col:hover,\nbody .ui-button.ui-state-default.ui-button-success:enabled:hover,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:hover {\n  background-color: #107d11;\n  color: #ffffff;\n  border-color: #107d11; }\n\nbody .success-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success:enabled:focus,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col:active,\nbody .ui-button.ui-state-default.ui-button-success:enabled:active,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:active {\n  background-color: #0c6b0d;\n  color: #ffffff;\n  border-color: #0c6b0d; }\n\nbody .success-col-outline,\nbody .ui-button.ui-state-default.ui-button-success-outline,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default {\n  color: #34a835;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .success-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:hover,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #107d11;\n  border-color: #fff; }\n\nbody .success-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:focus,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:active,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #0c6b0d;\n  border-color: #fff; }\n\nbody .warning-col,\nbody .ui-button.ui-state-default.ui-button-warning,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #ffba01;\n  border-color: #ffba01; }\n\nbody .warning-col:hover,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:hover,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:hover {\n  background-color: #ed990b;\n  color: #333333;\n  border-color: #ed990b; }\n\nbody .warning-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:focus,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #ffeab4; }\n\nbody .warning-col:active,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:active,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:active {\n  background-color: #d38b10;\n  color: #333333;\n  border-color: #d38b10; }\n\nbody .danger-col,\nbody .ui-button.ui-state-default.ui-button-danger,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #e91224;\n  border-color: #e91224; }\n\nbody .danger-col:hover,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:hover,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c01120;\n  color: #ffffff;\n  border-color: #c01120; }\n\nbody .danger-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:focus,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col:active,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:active,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:active {\n  background-color: #a90000;\n  color: #ffffff;\n  border-color: #a90000; }\n\nbody .danger-col-outline,\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  color: #e91224;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  border-color: #e91224; }\n\nbody .danger-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #c01120;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  border-color: #c01120; }\n\nbody .danger-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:focus,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #a90000;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  border-color: #a90000; }\n\nbody .ui-dialog .ui-dialog-footer button,\nbody .ui-card .ui-card-footer button {\n  margin: 0 0 0 0.5em !important; }\n\nbody .ui-dialog {\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1) !important; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-radius: 4px 4px 0 0; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-radius: 0 0 4px 4px; }\n\nbody .ui-messages-error {\n  border: none;\n  font-weight: 800;\n  padding: 0;\n  display: block;\n  width: 100%;\n  text-align: right;\n  color: #a80000; }\n\nbody .ng-dirty.ng-invalid + ul {\n  -webkit-padding-start: 0;\n          padding-inline-start: 0; }\n\nbody .ui-inputtext.ng-invalid:enabled:focus,\n.ui-inputtext {\n  border-color: #a80000; }\n\nbody .ui-inputtext,\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  transition: box-shadow 0.2s; }\n\nbody .ui-inputtext.ng-dirty.ng-invalid,\nbody p-dropdown.ng-dirty.ng-invalid > .ui-dropdown,\nbody p-autocomplete.ng-dirty.ng-invalid > .ui-autocomplete > .ui-inputtext,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext,\nbody p-chips.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-inputmask.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-checkbox.ng-dirty.ng-invalid .ui-chkbox-box,\nbody p-radiobutton.ng-dirty.ng-invalid .ui-radiobutton-box,\nbody p-inputswitch.ng-dirty.ng-invalid .ui-inputswitch,\nbody p-listbox.ng-dirty.ng-invalid .ui-inputtext,\nbody p-multiselect.ng-dirty.ng-invalid > .ui-multiselect,\nbody p-spinner.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-selectbutton.ng-dirty.ng-invalid .ui-button,\nbody p-togglebutton.ng-dirty.ng-invalid .ui-button {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  box-shadow: 2px -2.8px 0 #f9b4ba, 2px 2.8px 0 #f9b4ba; }\n\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar.ui-calendar-w-btn {\n  box-shadow: 0 0 0 3px #f9b4ba;\n  border-radius: 4px; }\n\nbody .ui-inputgroup .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-inputgroup-addon,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error),\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-calendar-button {\n  box-shadow: none; }\n\n*:not(.ui-calendar) .ui-inputtext {\n  width: 100%; }\n\nbody .ui-state-disabled,\nbody .ui-widget:disabled {\n  cursor: not-allowed; }\n\n.form dynamic-primeng-form-control > div {\n  margin-bottom: 10px; }\n\n.form .ui-calendar,\n.form .ui-spinner {\n  width: 100%; }\n\n.form .ui-calendar-w-btn input.ui-inputtext {\n  width: calc(100% - 33px); }\n\n.form .ui-datepicker {\n  padding: 0.5em; }\n\n.form .ui-datepicker {\n  font-size: 12px; }\n\n.form .ui-datepicker .ui-timepicker {\n  padding: 10px 0 0 0;\n  font-size: 11px; }\n\n.form .ui-datepicker table {\n  font-size: 11px; }\n\n/* width */\n\n::-webkit-scrollbar {\n  width: 10px; }\n\n/* Track */\n\n::-webkit-scrollbar-track {\n  background: none; }\n\n/* Handle */\n\n::-webkit-scrollbar-thumb {\n  background: #00000033;\n  border: 2px solid rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  border-radius: 5px; }\n\n/* Handle on hover */\n\n::-webkit-scrollbar-thumb:hover {\n  background: #00000055;\n  background-clip: padding-box; }\n\n.popup-container {\n  z-index: 1502;\n  position: absolute;\n  top: 5px;\n  left: 0;\n  transform: translateX(-50%);\n  width: 300px; }\n\n.popup-container-top {\n  transform: translate(-50%, -100%); }\n\n.popup-container.background .ui-card {\n  box-shadow: none; }\n\n.popup-container .caret-up {\n  color: white;\n  font-size: 36px;\n  position: absolute;\n  left: 50%;\n  -webkit-filter: drop-shadow(0px -2px 0px rgba(0, 0, 0, 0.4));\n          filter: drop-shadow(0px -2px 0px rgba(0, 0, 0, 0.4)); }\n\n.popup-container-bottom .caret-up {\n  top: -25px;\n  transform: translateX(-50%); }\n\n.popup-container-top .caret-up {\n  bottom: -25px;\n  transform: translateX(-50%) rotate(180deg); }\n\n.popup-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  pointer-events: all;\n  z-index: 1500;\n  background: rgba(0, 0, 0, 0.4);\n  transition: all 0.5s cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n.ui-card-shadow {\n  z-index: 1501; }\n\n.ui-card-footer {\n  text-align: right; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/geo-web/map/map-popup/map-popup.service.ts":
/*!************************************************************!*\
  !*** ./src/app/geo-web/map/map-popup/map-popup.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
let PopupFormService = class PopupFormService {
    constructor() {
        this._currentPopup = undefined;
        this.subject = new rxjs_1.Subject();
    }
    get currentPopup() {
        return this._currentPopup;
    }
    getPopupSubject() {
        return this.subject.asObservable();
    }
    showPopup(popupMessage) {
        this._currentPopup = popupMessage;
        this.subject.next(popupMessage);
    }
    hidePopup() {
        if (typeof this.currentPopup.formOnCancelFn === "function") {
            this.currentPopup.formOnCancelFn();
        }
        this._currentPopup = undefined;
        this.subject.next(undefined);
    }
};
PopupFormService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [])
], PopupFormService);
exports.PopupFormService = PopupFormService;


/***/ }),

/***/ "./src/app/geo-web/map/map.component.html":
/*!************************************************!*\
  !*** ./src/app/geo-web/map/map.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-map-popup #mapPopup></app-map-popup>\n\n<div id=\"map-container\" #mapContainer>\n  <div id=\"top-right-controls\" [ngClass]=\"{ 'layer-sidebar-visble': showLayerController }\">\n    <div class=\"fake-leaflet-control-lg\">\n      <a title=\"Edit Layers\" (click)=\"showLayerController = !showLayerController\">\n        <fa-icon [icon]=\"['fas', 'layer-group']\"></fa-icon>\n      </a>\n    </div>\n\n    <div class=\"fake-leaflet-control\" [ngClass]=\"{ active: showLayerValues }\">\n      <a title=\"Show Layer Values\" (click)=\"showLayerValues = !showLayerValues\">\n        <fa-icon [icon]=\"['fas', 'crosshairs']\"></fa-icon>\n      </a>\n    </div>\n\n    <!-- <div class=\"fake-leaflet-control\"\n      [ngClass]=\"{\n        active:\n          leafletMeasureDrawHandler !== undefined &&\n          leafletMeasureDrawHandler._enabled\n      }\">\n      <a title=\"Activate Ruler\"\n        (click)=\"toggleLeafletMeasurePlugin()\">\n        <fa-icon [icon]=\"['fas', 'ruler']\"></fa-icon>\n      </a>\n    </div> -->\n\n    <div id=\"layer-legends\"></div>\n  </div>\n\n  <p-sidebar [(visible)]=\"showLayerController\" position=\"right\" [modal]=\"false\" styleClass=\"layer-sidebar\">\n    <h1>Regions</h1>\n\n    <div class=\"sidebar-container sidebar-padding layer-sidebar-container\">\n      <!-- <h2>Map Base Layer</h2>\n\n      <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n        <div class=\"ui-grid-row\">\n          <div class=\"ui-grid-col-12\">\n            <p-dropdown [options]=\"baseLayers\"\n              [(ngModel)]=\"baseLayerSelected\"\n              (ngModelChange)=\"updateLeafletLayers()\"\n              optionLabel=\"name\"></p-dropdown>\n          </div>\n        </div>\n      </div>\n\n      <br /> -->\n\n      <div [hidden]=\"currentJob === undefined || jobLayers.length === 0\">\n        <h2>Select a region</h2>\n\n        <p-orderList [value]=\"jobLayers\" [(selection)]=\"selectedLayers\" dragdrop=\"true\" dragdropScope=\"jobLayers\"\n          [listStyle]=\"{ height: 'fit-content', 'min-height': '150px' }\" controlsPosition=\"right\" (onReorder)=\"setLayerZOrder()\"\n          (click)=\"getSelectedLayer($event)\">\n          <ng-template let-layer pTemplate=\"item\">\n            <div class=\"ui-helper-clearfix\">\n              <a class=\"icon-toggle\" (click)=\"toggleLayerOpacity($event, layer)\" [ngClass]=\"layer.visible ? 'default-col' : 'secondary-col'\">\n                <fa-icon [icon]=\"['fas', 'eye']\" size=\"sm\" *ngIf=\"layer.visible\"></fa-icon>\n                <fa-icon [icon]=\"['fas', 'eye-slash']\" size=\"sm\" *ngIf=\"!layer.visible\"></fa-icon>\n              </a>\n              {{ layer.name }}\n            </div>\n          </ng-template>\n        </p-orderList>\n      </div>\n\n      <div *ngFor=\"let selectedLayer of selectedLayers\">\n        <h2>\n          <a style=\"color: inherit;\" (click)=\"toggleLayerOpacity($event, selectedLayer)\">\n            {{ selectedLayer.name }}\n          </a>\n          <a class=\"icon-toggle\" (click)=\"toggleLayerOpacity($event, selectedLayer)\" [ngClass]=\"selectedLayer.visible ? 'default-col' : 'secondary-col'\">\n            <fa-icon [icon]=\"['fas', 'eye']\" size=\"sm\" *ngIf=\"selectedLayer.visible\"></fa-icon>\n            <fa-icon [icon]=\"['fas', 'eye-slash']\" size=\"sm\" *ngIf=\"!selectedLayer.visible\"></fa-icon>\n          </a>\n        </h2>\n\n        <div *ngIf=\"selectedLayer.dimensionsArray !== undefined\">\n          <div *ngFor=\"let dimension of selectedLayer.dimensionsArray\">\n            <span class=\"label\">{{ dimension.label }}</span>\n            <p-dropdown [options]=\"dimension.options\" optionLabel=\"label\" [(ngModel)]=\"dimension.selected\"\n              (ngModelChange)=\"selectedLayer.updateLayer()\" [filter]=\"true\" [appendTo]=\"mapContainer\" baseZIndex=\"1400\">\n            </p-dropdown>\n          </div>\n        </div>\n\n        <div *ngIf=\"selectedLayer.filterValuesArray !== undefined\">\n          <div *ngFor=\"let filerValue of selectedLayer.filterValuesArray\">\n            <span class=\"label\"><b>{{ filerValue.label }}</b></span>\n            <div class=\"ui-grid\">\n              <div class=\"ui-grid-col-6\" style=\"padding-right: 5px\">\n                <span class=\"label\" style=\"margin-top: 0;\">Min value</span>\n                <input type=\"number\" pInputText placeholder=\"Minimum value\" [(ngModel)]=\"filerValue.minValue\"\n                  (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" [customValidator]=\"customFormValidators.floatValidator\" />\n              </div>\n              <div class=\"ui-grid-col-6\" style=\"padding-left: 5px\">\n                <span class=\"label\" style=\"margin-top: 0;\">Max value</span>\n                <input type=\"number\" pInputText placeholder=\"Maximum value\" [(ngModel)]=\"filerValue.maxValue\"\n                  (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" [customValidator]=\"customFormValidators.floatValidator\" />\n              </div>\n            </div>\n          </div>\n\n        </div>\n\n        <div *ngIf=\"\n            selectedLayer.downloadData !== undefined &&\n            !selectedLayer.downloadData.disabled\n          \">\n          <p-button *ngIf=\"isString(selectedLayer.downloadData.action)\" label=\"Download\" icon=\"pi pi-download\" iconPos=\"left\"\n            styleClass=\"ui-button-secondary\" (click)=\"\n              downloadUrl(selectedLayer.downloadData.action, 'image/tiff')\n            \"\n            pTooltip=\"{{ selectedLayer.downloadData.description }}\" tooltipPosition=\"top\" tooltipZIndex=\"1400\"></p-button>\n          <p-button *ngIf=\"isFunction(selectedLayer.downloadData.action)\" label=\"Download\" icon=\"pi pi-download\"\n            iconPos=\"left\" styleClass=\"ui-button-secondary\" (click)=\"selectedLayer.downloadData.action($event)\"\n            pTooltip=\"{{ selectedLayer.downloadData.description }}\" tooltipPosition=\"top\" tooltipZIndex=\"1400\"></p-button>\n\n          <span *ngIf=\"\n              isString(selectedLayer.downloadData.metadata) &&\n              selectedLayer.downloadData.metadata !== ''\n            \">\n            <p-dialog header=\"{{ selectedLayer.name }} metadata\" [(visible)]=\"showLayerMetadataPopup\" appendTo=\"body\"\n              baseZIndex=\"1500\" modal=\"true\" styleClass=\"modal-dialog\" dismissableMask=\"true\" [closeOnEscape]=\"false\">\n              <pre>{{ selectedLayer.downloadData.metadata }}</pre>\n            </p-dialog>\n            &nbsp;\n\n            <p-button type=\"button\" (click)=\"showLayerMetadataPopup = !showLayerMetadataPopup\" icon=\"pi pi-info-circle\"\n              label=\"View metadata\" iconPos=\"left\" styleClass=\"ui-button-secondary\"></p-button>\n          </span>\n        </div>\n        <div class=\"line_break\"></div>\n        <h3>Scenario Settings</h3>\n        <div *ngIf=\"\n        selectedLayer.fire !== undefined &&\n        selectedLayer.fire.options.length > 0\n        \">\n          <span class=\"label\">Fire</span>\n          <p-dropdown [options]=\"selectedLayer.fire.options\" optionLabel=\"name\" [filter]=\"true\" [appendTo]=\"mapContainer\"\n            baseZIndex=\"1400\" (onChange)=\"getSelectedFire($event)\">\n          </p-dropdown>\n        </div>\n\n        <div *ngIf=\"\n        selectedLayer.population !== undefined &&\n        selectedLayer.population.options.length > 0\n      \">\n          <span class=\"label\">Population</span>\n          <p-dropdown [options]=\"selectedLayer.population.options\" optionLabel=\"name\" [filter]=\"true\" [appendTo]=\"mapContainer\"\n            baseZIndex=\"1400\" (onChange)=\"getSelectedPopulation($event)\">\n          </p-dropdown>\n        </div>\n\n        <div *ngIf=\"\n        selectedLayer.time !== undefined\">\n          <span class=\"label\">Time {{timeFromSlider}}</span>\n\n          <p-slider [(ngModel)]=\"timeSliderStep\" [min]=\"0\" [max]=\"1440\" [step]=\"10\" (onChange)=\"getSelectedTime($event)\"></p-slider>\n        </div>\n\n        <div>\n          <a class=\"icon-toggle\" (click)=\"showZoneLayers()\">\n            <fa-icon [icon]=\"['fas', 'eye']\" size=\"sm\" *ngIf=\"zoneVisibility\"></fa-icon>\n            <fa-icon [icon]=\"['fas', 'eye-slash']\" size=\"sm\" style=\"color:gray\" *ngIf=\"!zoneVisibility\"></fa-icon>\n          </a>\n          <span class=\"label\"> Show Evacuation Zones</span>\n        </div>\n\n        <div [hidden]=\"currentJob === undefined || jobLayers.length === 0\">\n          <h2>Evacuation Plan</h2>\n\n          <p-listbox [options]=\"messageListOptions\" [(ngModel)]=\"selectedMessage\" [style]=\"{'width':'100%','height':\n            '100px' }\"\n            [listStyle]=\"{'max-height': '100px'}\">\n            <ng-template let-enteredEvacMessage let-i=\"index\" pTemplate=\"item\">\n              <div class=\"ui-helper-clearfix\">\n\n                <a class=\"icon-link\" (click)=\"highlightZone(i)\" (dblclick)=\"editMessageDialog(i)\">\n                  {{enteredEvacMessage.label}} : {{enteredEvacMessage.type}}\n                </a>\n                <a title=\"Delete Message\" class=\"icon-link\" (click)=\"deleteMessage(i)\" disabled>\n                  <fa-icon [icon]=\"['fas', 'trash']\"></fa-icon>\n                </a>\n              </div>\n            </ng-template>\n          </p-listbox>\n        </div>\n\n\n\n        <div *ngIf=\"\n            selectedLayer.speed !== undefined\">\n          <span class=\"label\">Maximum speed on roads {{selectedLayer.speed}}%</span>\n\n          <p-slider [(ngModel)]=\"selectedLayer.speed\" [min]=\"0\" [max]=\"100\" [step]=\"10\" (onChange)=\"getMaxSpeed($event)\"></p-slider>\n        </div>\n        <h3>Map & Layers Settings</h3>\n        <div>\n          <span class=\"ui-grid-col-4\" style=\"margin-bottom: 4px\">Map Style </span>\n          <p-dropdown class=\"ui-grid-col-8\" [options]=\"mapStyles.options\" optionLabel=\"style\" baseZIndex=\"1400\"\n            (onChange)=\"changeMapStyle($event)\" [appendTo]=\"mapContainer\" [style]=\"{'margin-bottom': '5px'}\">\n          </p-dropdown>\n        </div>\n        <div>\n          <span class=\"label\">Road Network Opacity</span>\n\n          <p-slider [(ngModel)]=\"selectedLayer.opacity\" [min]=\"0\" [max]=\"100\"></p-slider>\n        </div>\n        <!-- <div *ngIf=\"\n        selectedLayer.evacMessage!== undefined &&\n        selectedLayer.evacMessage.options.length > 0\n        \">\n          <span class=\"label\">Evacuation Message</span>\n          <p-dropdown [options]=\"selectedLayer.evacMessage.options\" optionLabel=\"message\" [filter]=\"true\" [appendTo]=\"mapContainer\"\n            baseZIndex=\"1400\" (onChange)=\"getEvacMessage($event)\">\n          </p-dropdown>\n        </div> -->\n\n\n\n        <div *ngIf=\"\n            selectedLayer.blendMode !== undefined &&\n            selectedLayer.blendModes.length > 0\n          \">\n          <span class=\"label\">Blend mode</span>\n          <p-dropdown [options]=\"selectedLayer.blendModes\" optionLabel=\"name\" [(ngModel)]=\"selectedLayer.blendMode\"\n            (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" [filter]=\"true\" [appendTo]=\"mapContainer\" baseZIndex=\"1400\">\n          </p-dropdown>\n        </div>\n\n\n        <div *ngIf=\"\n            selectedLayer.colourScheme !== undefined &&\n            selectedLayer.colourScheme.type === 'SolidColourScheme'\n          \">\n          <span class=\"label\"><b>Colour scale</b></span>\n          <p-colorPicker [(ngModel)]=\"selectedLayer.colourScheme.solidColour\" (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\"\n            [appendTo]=\"mapContainer\" baseZIndex=\"1400\"></p-colorPicker>\n        </div>\n\n        <div *ngIf=\"\n            selectedLayer.colourScheme !== undefined &&\n            selectedLayer.colourScheme.type === 'D3ColourScheme'\n          \">\n          <span class=\"label\"><b>Colour scale</b></span>\n          <p-dropdown [options]=\"selectedLayer.colourScheme.predefinedSchemes\" optionLabel=\"name\" [(ngModel)]=\"selectedLayer.colourScheme.predefinedScheme\"\n            (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" [filter]=\"true\" [appendTo]=\"mapContainer\" baseZIndex=\"1400\">\n            <!-- <ng-template let-colourScheme pTemplate=\"item\">\n            {{colourScheme.name}}\n          </ng-template> -->\n          </p-dropdown>\n          <br /><br />\n          <p-toggleButton onLabel=\"Reversed\" offLabel=\"Reverse\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" [(ngModel)]=\"selectedLayer.colourScheme.reversed\"\n            (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\"></p-toggleButton>\n        </div>\n\n        <div *ngIf=\"\n            selectedLayer.colourByProperty !== undefined &&\n            selectedLayer.colourByProperty.options.length > 0\n          \">\n          <span class=\"label\">Colour by</span>\n\n          <p-dropdown [options]=\"selectedLayer.colourByProperty.options\" [(ngModel)]=\"selectedLayer.colourByProperty.selected\"\n            (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" optionLabel=\"label\"></p-dropdown>\n        </div>\n\n        <div *ngIf=\"\n            selectedLayer.minValue !== undefined &&\n            selectedLayer.maxValue !== undefined\n          \">\n          <div *ngIf=\"selectedLayer.valueTransformation !== undefined\">\n            <span class=\"label\">Min value</span>\n            <input type=\"number\" pInputText placeholder=\"Minimum value\" [(ngModel)]=\"selectedLayer.minValueTransformed\"\n              (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" required [customValidator]=\"customFormValidators.floatValidator\" />\n            <br /><span class=\"label\">Max value</span>\n            <input type=\"number\" pInputText placeholder=\"Maximum value\" [(ngModel)]=\"selectedLayer.maxValueTransformed\"\n              (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" required [customValidator]=\"customFormValidators.floatValidator\" />\n          </div>\n          <div *ngIf=\"selectedLayer.valueTransformation === undefined\">\n            <span class=\"label\">Min value</span>\n            <input type=\"number\" pInputText placeholder=\"Minimum value\" [(ngModel)]=\"selectedLayer.minValue\"\n              (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" required [customValidator]=\"customFormValidators.floatValidator\" />\n            <br /><span class=\"label\">Max value</span>\n            <input type=\"number\" pInputText placeholder=\"Maximum value\" [(ngModel)]=\"selectedLayer.maxValue\"\n              (ngModelChange)=\"renderUpdatedLayer(selectedLayer)\" required [customValidator]=\"customFormValidators.floatValidator\" />\n          </div>\n        </div>\n\n      </div>\n\n      <br /><br />\n    </div>\n  </p-sidebar>\n\n  <p-sidebar [(visible)]=\"showChartController\" position=\"bottom\" [modal]=\"false\" styleClass=\"chart-sidebar height-fit-content\">\n    <h3>Result</h3>\n\n    <div id=\"chart-container\">\n      <div id=\"chart\"></div>\n    </div>\n  </p-sidebar>\n\n  <!-- \n  \n        <a  *ngIf=\"currentJob !== undefined\"\n          class=\"leaflet-toolbar-icon leaflet-toolbar-icon-custom\"\n          title=\"Zoom to extent\"\n          (click)=\"zoomToJobBbox()\">\n          <fa-icon [icon]=\"['fas', 'search']\"\n            size=\"sm\"></fa-icon>\n        </a>\n     -->\n\n\n  <div id=\"edit-feature-controller\" [ngClass]=\"{\n      hidden: jobLayers.length === 0 || currentJob === undefined\n    }\">\n    <div class=\"fake-leaflet-control-lg\" *ngIf=\"currentChart !== undefined\">\n      <a title=\"Show Chart\" (click)=\"showChartController = !showChartController\">\n        <fa-icon [icon]=\"['fas', 'poll']\"></fa-icon>\n      </a>\n    </div>\n\n    <!-- <div class=\"mapboxgl-ctrl mapboxgl-ctrl-group\">\n      <button class=\"mapboxgl-ctrl-icon\"></button>\n      </div> -->\n    <div class=\"mapboxgl-ctrl mapboxgl-ctrl-group\">\n      <button *ngFor=\"let toolbarButton of editableFeatureToolbarButtons\" class=\"mapboxgl-ctrl-icon\" [title]=\"toolbarButton.title\"\n        (click)=\"toolbarButton.createNewFn()\">\n        <fa-icon [icon]=\"toolbarButton.primaryFaIcon\" size=\"sm\" [ngClass]=\"{\n                'draw-fire-icon': toolbarButton.secondaryFaIcon !== undefined\n              }\"></fa-icon>\n        <fa-icon *ngIf=\"toolbarButton.secondaryFaIcon !== undefined\" [icon]=\"toolbarButton.secondaryFaIcon\" size=\"xs\"\n          class=\"secondary-draw-fire-icon\"></fa-icon>\n      </button>\n    </div>\n\n    <div class=\"mapboxgl-ctrl mapboxgl-ctrl-group\" *ngIf=\"editableFeatureToolbarButtons.length > 0\">\n      <button class=\"mapboxgl-ctrl-icon\" title=\"Edit features\" (click)=\"toggleFeatureEdit()\" #mapboxDrawEditButton>\n        <fa-icon [icon]=\"['fas', 'pen']\" size=\"sm\"></fa-icon>\n\n      </button>\n    </div>\n  </div>\n  <div class=\"legend-overlay\" *ngIf=\"activities != null\">\n    <div class=\"legend-overlay-inner\">\n      <table id=\"pop-legend\" cellspacing=\"3px\">\n        <tbody>\n          <tr *ngFor=\"let data of activities | keyvalue\">\n            <td class=\"p-2\">\n              <input type=\"color\" disabled=\"disabled\" value={{data.value}}>\n            </td>\n            <td>\n              {{data.key}}\n            </td>\n          </tr>\n        </tbody>\n\n      </table>\n    </div>\n  </div>\n\n  <!-- Play button + Digital clock-->\n  <div id=\"simulation-play\" class=\"\" [ngStyle]=\"{'bottom': showChartController ? '300px' : '10px'}\" *ngIf=\"currentJob !== undefined &&  jobType =='emv2' && currentJob.status == 'FINISHED' \">\n    <a title=\"Play\" (click)=\"playSimulation()\">\n      <fa-icon [icon]=\"['fas','stop']\" *ngIf=\"isPlaying\"></fa-icon>\n      <fa-icon [icon]=\"['fas', 'play']\" *ngIf=\"!isPlaying\"></fa-icon> {{simulationStatus}} {{clock}}\n    </a>\n    <br><br>animation speed {{animationSpeed}}x<br><br>\n    <div class=\"\" *ngIf=\"currentJob !== undefined &&  jobType =='emv2' && currentJob.status == 'FINISHED' \">\n\n\n      <p-slider [(ngModel)]=\"this.animationSpeed\" [min]=\"0\" [max]=\"100\" [step]=\"10\" (onChange)=\"setAnimationSpeed($event)\"></p-slider>\n\n\n    </div>\n  </div>\n  <!-- Animation speed controller -->\n\n\n  <div id=\"timeline-controller\" class=\"fake-leaflet-control-colours\" [ngStyle]=\"{'bottom': showChartController ? '300px' : '10px'}\"\n    *ngIf=\"currentJob !== undefined && timeSliders.length !== 0\">\n    <div class=\"timeline\" [ngClass]=\"{\n        hidden: !(\n          currentJob.status === 'FINISHED' &&\n          arrivalTimeContourLayer !== undefined\n        )\n      }\"\n      *ngFor=\"let timeSlider of timeSliders\">\n      <span class=\"time-slider-label\">\n        <fa-icon [icon]=\"['fas', 'clock']\" size=\"sm\"></fa-icon>\n        &nbsp;Time\n      </span>\n      <p-slider [(ngModel)]=\"timeSlider.value\" [min]=\"timeSlider.min\" [max]=\"timeSlider.max\" [step]=\"timeSlider.step\"\n        class=\"time-slider\"></p-slider>\n      <!-- <input class=\"time-input\" type=\"number\" pInputText [(ngModel)]=\"timeSliderValue\" (ngModelChange)=\"timeSliderChange($event)\"/>\n    <span class=\"time-slider-label\">&nbsp; second{{(timeSliderValue !== 1) ? 's' : ''}}</span> -->\n      <!-- (ngModelChange)=\"timeSliderDateChange($event)\" -->\n      <p-calendar [(ngModel)]=\"timeSlider.valueDate\" showTime=\"true\" hourFormat=\"24\" showIcon=\"true\" class=\"p-autocomplete\"\n        inputStyleClass=\"time-input\" [minDate]=\"timeSlider.minDate\" [maxDate]=\"timeSlider.maxDate\" appendTo=\"body\"></p-calendar>\n    </div>\n  </div>\n  <p-dialog header=\"Evacuation Messages\" [(visible)]=\"emergencyMessageDialog\" widgetVar=\"dlg2\" modal=\"true\" appendTo=\"body\"\n    position=\"top\" [closable]=\"false\">\n    <h3 *ngIf=\"!updateMessage\"> List your messages here </h3>\n    <h3 *ngIf=\"updateMessage\"> Update message</h3>\n\n    <div class=\"ui-inputgroup\">\n      <input type=\"text\" pInputText [(ngModel)]=\"broadcastZoneString\" disabled=\"true\" [style]=\"{'margin':'2px'}\" />\n    </div>\n    <div class=\"ui-inputgroup\">\n      <span class=\"ui-grid-col-8\" [style]=\"{'margin':'2px'}\">Time </span>\n      <p-calendar class=\"ui-grid-col-4\" [(ngModel)]=\"selectedMessageSendTime\" showTime=\"true\" hourFormat=\"24\" timeOnly=\"true\"\n        [style]=\"{'margin':'2px','margin-right':'-9%' }\" (ngModelChange)=\"updateErrorMessagesTime()\" [stepMinute]=\"15\"></p-calendar><br>\n    </div>\n    <div class=\"ui-inputgroup\">\n      <span class=\"ui-grid-col-8\" [style]=\"{'margin': '0px'}\">Message Type </span>\n      <p-dropdown class=\"ui-grid-col-4\" [(ngModel)]=\"selectedEvacMessage\" [options]=\"evacMessages.options\" optionLabel=\"message\"\n        baseZIndex=\"1400\" [style]=\"{'margin-left': '-11px'}\" (ngModelChange)=\"updateErrorMessagesType()\">\n      </p-dropdown> <br>\n    </div>\n    <div class=\"ui-inputgroup\">\n      <textarea [rows]=\"3\" [cols]=\"60\" pInputTextarea autoResize=\"autoResize\" [(ngModel)]=\"messageContent\" placeholder=\"Content\"></textarea>\n    </div>\n    <ul>\n      <li *ngIf=\"Errors.messageType\" class=\"ui-message ui-messages-error\">\n        Please select a Evacuation Message type\n      </li>\n      <li *ngIf=\"Errors.time\" class=\"ui-message ui-messages-error\">\n        Please select a Time\n      </li>\n      <li *ngIf=\"Errors.content\" class=\"ui-message ui-messages-error\">\n        Please add a content to this message\n      </li>\n      <li *ngIf=\"Errors.duplicate\" class=\"ui-message ui-messages-error\">\n        Duplicate Entry\n      </li>\n    </ul>\n\n    <!-- <p-listbox *ngIf=\"!updateMessage\" [options]=\"enteredEvacMessages\">\n      <ng-template let-enteredEvacMessage let-i=\"index\" pTemplate=\"item\">\n        <div class=\"ui-helper-clearfix\">\n          <span>{{i+1}}) </span>\n          <span>{{enteredEvacMessage.broadcastHHMM}} </span>\n          <span>{{enteredEvacMessage.type}} </span>\n          <span>{{enteredEvacMessage.broadcastZones}} </span>\n\n          <a title=\"Delete Message\" class=\"icon-link\" (click)=\"deleteMessage(i)\" disabled>\n            <fa-icon [icon]=\"['fas', 'trash']\"></fa-icon>\n          </a>\n        </div>\n      </ng-template>\n    </p-listbox> -->\n    <p-footer>\n      <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"showEmergencyMessageDialog()\" label=\"Close \" class=\"ui-button-secondary\"></button>\n      <button *ngIf=\"!updateMessage\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addNewMessage()\" label=\"Add\"></button>\n      <button *ngIf=\"updateMessage\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"updateSingleMessage()\" label=\"Update\"></button>\n    </p-footer>\n  </p-dialog>\n\n  <div id=\"map\"></div>\n\n  <svg class=\"svg-overlay\"></svg>\n\n  <!-- https://research.csiro.au/geoweb/ -->\n  <div class=\"map-logo\">\n\n\n    <img src=\"assets/img/logo/favicon.ico\" alt=\"INDRA Logo\" class=\"map-logo-img\" />\n    <div class=\"logo-text\"></div>\n  </div>\n</div>"

/***/ }),

/***/ "./src/app/geo-web/map/map.component.scss":
/*!************************************************!*\
  !*** ./src/app/geo-web/map/map.component.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".fake-leaflet-control,\n.fake-leaflet-control-lg,\n.fake-leaflet-control-colours,\nbody .ui-sidebar,\n#layer-legends .legend,\n.layer-values-popup .leaflet-popup-content-wrapper,\n.layer-values-popup .leaflet-popup-tip,\n#simulation-play {\n  color: #333;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  border: none;\n  background-clip: padding-box; }\n\n.fake-leaflet-control.active,\n.fake-leaflet-control-lg.active,\n.fake-leaflet-control-colours.active,\nbody .active.ui-sidebar,\n#layer-legends .active.legend,\n.layer-values-popup .active.leaflet-popup-content-wrapper,\n.layer-values-popup .active.leaflet-popup-tip,\n.active#simulation-play {\n  background-color: #007ad9;\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n  color: #ffffff; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg {\n  margin-bottom: 10px;\n  position: relative; }\n\n.fake-leaflet-control {\n  height: 30px;\n  width: 30px; }\n\n.fake-leaflet-control-lg {\n  height: 44px;\n  width: 44px; }\n\n.fake-leaflet-control a,\n.fake-leaflet-control-lg a {\n  color: inherit;\n  height: 100%;\n  width: 100%;\n  display: block;\n  line-height: 0; }\n\n.fake-leaflet-control:hover,\n.fake-leaflet-control-lg:hover {\n  background-color: #f4f4f4; }\n\n.fake-leaflet-control a:hover,\n.fake-leaflet-control-lg a:hover {\n  color: #333;\n  cursor: pointer; }\n\n.fake-leaflet-control.active:hover,\n.fake-leaflet-control-lg.active:hover {\n  background-color: #1775bd; }\n\n.fake-leaflet-control.active a:hover,\n.fake-leaflet-control-lg.active a:hover,\n.fake-leaflet-control-colours.active a:hover,\nbody .active.ui-sidebar a:hover,\n#layer-legends .active.legend a:hover,\n.layer-values-popup .active.leaflet-popup-content-wrapper a:hover,\n.layer-values-popup .active.leaflet-popup-tip a:hover,\n.active#simulation-play a:hover {\n  color: #ffffff; }\n\n.fake-leaflet-control fa-icon.ng-fa-icon,\n.fake-leaflet-control-lg fa-icon.ng-fa-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.fake-leaflet-control a {\n  font-size: 12px; }\n\n.fake-leaflet-control-lg a {\n  font-size: 24px; }\n\n* {\n  box-sizing: border-box; }\n\nbody,\nhtml {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px;\n  margin: 0;\n  padding: 0; }\n\n.c3 text {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  font-size: 14px; }\n\nh1,\n.h1 {\n  font-size: 24px;\n  font-weight: 600; }\n\nh2,\n.h2 {\n  font-size: 18px;\n  font-weight: 500; }\n\npre {\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  white-space: -moz-pre-wrap;\n  white-space: -pre-wrap;\n  white-space: -o-pre-wrap;\n  word-wrap: break-word; }\n\n.font-italic-light {\n  font-weight: 100;\n  font-style: italic; }\n\n.text-overflow-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.label,\nlabel {\n  display: block;\n  margin-bottom: 10px;\n  margin-top: 20px; }\n\n.badge > .pi {\n  padding-right: 4px; }\n\na.icon-link:last-of-type {\n  padding-right: 10px; }\n\na.icon-link:first-of-type {\n  padding-left: 10px; }\n\na.icon-link {\n  font-size: 0.85em;\n  padding: 0 5px; }\n\nbody .ui-widget-overlay {\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: all linear 0.2s; }\n\n.ui-state-highlight a.icon-link {\n  color: #ffffff; }\n\n.ui-state-highlight a.icon-link:hover {\n  color: #ffffffba; }\n\n.empty-placeholder {\n  color: #999;\n  font-weight: 100;\n  padding: 20px 0;\n  /* height: 100%; */\n  text-align: center; }\n\n.ui-toast {\n  max-height: 100vh;\n  overflow-y: auto; }\n\n.ui-toast-detail {\n  word-break: break-word; }\n\n.modal-dialog.ui-dialog {\n  width: 400px; }\n\n.ui-dialog .ui-grid .ui-grid-row {\n  margin-bottom: 10px; }\n\n.ui-dialog .ui-listbox .ui-listbox-list-wrapper {\n  max-height: calc(100vh - 400px);\n  min-height: 100px; }\n\nbody .ui-dialog .ui-dialog-content {\n  max-height: calc(100vh - 200px);\n  min-height: 200px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar,\nbody .ui-dialog .ui-dialog-footer {\n  border-left: none;\n  border-right: none; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-top: none; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-bottom: none; }\n\n.ui-dialog .ui-listbox .ui-progressbar {\n  display: inline-block;\n  width: 100%;\n  height: 14px;\n  margin-top: 3px;\n  margin-bottom: -3px;\n  background-color: #0000004a; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-label {\n  font-size: 12px;\n  line-height: 1.25;\n  color: inherit; }\n\n.ui-dialog .ui-listbox .ui-progressbar .ui-progressbar-value {\n  background: #0000006b; }\n\nbody .ui-widget,\nbody .ui-autocomplete.ui-autocomplete-multiple .ui-autocomplete-multiple-container .ui-autocomplete-input-token input,\nbody .ui-chips > ul.ui-inputtext .ui-chips-input-token input,\nbody .ui-table .ui-editable-column input,\nbody .ui-treetable .ui-editable-column input,\nbody .ui-terminal .ui-terminal-input {\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; }\n\nbody .secondary-col, body .ui-orderlist .ui-orderlist-controls button,\nbody .ui-button.ui-state-default.ui-button-secondary,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #e8e8e8;\n  border-color: #e8e8e8; }\n\nbody .secondary-col:hover, body .ui-orderlist .ui-orderlist-controls button:hover,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:hover,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c8c8c8;\n  color: #333333;\n  border-color: #c8c8c8; }\n\nbody .secondary-col:enabled:focus, body .ui-orderlist .ui-orderlist-controls button:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:focus,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .secondary-col:active, body .ui-orderlist .ui-orderlist-controls button:active,\nbody .ui-button.ui-state-default.ui-button-secondary:enabled:active,\nbody .ui-buttonset.ui-button-secondary > .ui-button.ui-state-default:enabled:active {\n  background-color: #a0a0a0;\n  color: #333333;\n  border-color: #a0a0a0; }\n\nbody .default-col,\nbody .ui-button.ui-state-default.ui-button-info,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #007ad9;\n  border-color: #007ad9; }\n\nbody .default-col:hover,\nbody .ui-button.ui-state-default.ui-button-info:enabled:hover,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:hover {\n  background-color: #116fbf;\n  color: #ffffff;\n  border-color: #116fbf; }\n\nbody .default-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-info:enabled:focus,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #8dcdff; }\n\nbody .default-col:active,\nbody .ui-button.ui-state-default.ui-button-info:enabled:active,\nbody .ui-buttonset.ui-button-info > .ui-button.ui-state-default:enabled:active {\n  background-color: #005b9f;\n  color: #ffffff;\n  border-color: #005b9f; }\n\nbody .success-col,\nbody .ui-button.ui-state-default.ui-button-success,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #34a835;\n  border-color: #34a835; }\n\nbody .success-col:hover,\nbody .ui-button.ui-state-default.ui-button-success:enabled:hover,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:hover {\n  background-color: #107d11;\n  color: #ffffff;\n  border-color: #107d11; }\n\nbody .success-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success:enabled:focus,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col:active,\nbody .ui-button.ui-state-default.ui-button-success:enabled:active,\nbody .ui-buttonset.ui-button-success > .ui-button.ui-state-default:enabled:active {\n  background-color: #0c6b0d;\n  color: #ffffff;\n  border-color: #0c6b0d; }\n\nbody .success-col-outline,\nbody .ui-button.ui-state-default.ui-button-success-outline,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default {\n  color: #34a835;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .success-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:hover,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #107d11;\n  border-color: #fff; }\n\nbody .success-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:focus,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #aae5aa; }\n\nbody .success-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-success-outline:enabled:active,\nbody .ui-buttonset.ui-button-success-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #0c6b0d;\n  border-color: #fff; }\n\nbody .warning-col,\nbody .ui-button.ui-state-default.ui-button-warning,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default {\n  color: #333333;\n  background-color: #ffba01;\n  border-color: #ffba01; }\n\nbody .warning-col:hover,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:hover,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:hover {\n  background-color: #ed990b;\n  color: #333333;\n  border-color: #ed990b; }\n\nbody .warning-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:focus,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #ffeab4; }\n\nbody .warning-col:active,\nbody .ui-button.ui-state-default.ui-button-warning:enabled:active,\nbody .ui-buttonset.ui-button-warning > .ui-button.ui-state-default:enabled:active {\n  background-color: #d38b10;\n  color: #333333;\n  border-color: #d38b10; }\n\nbody .danger-col,\nbody .ui-button.ui-state-default.ui-button-danger,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default {\n  color: #ffffff;\n  background-color: #e91224;\n  border-color: #e91224; }\n\nbody .danger-col:hover,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:hover,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:hover {\n  background-color: #c01120;\n  color: #ffffff;\n  border-color: #c01120; }\n\nbody .danger-col:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:focus,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col:active,\nbody .ui-button.ui-state-default.ui-button-danger:enabled:active,\nbody .ui-buttonset.ui-button-danger > .ui-button.ui-state-default:enabled:active {\n  background-color: #a90000;\n  color: #ffffff;\n  border-color: #a90000; }\n\nbody .danger-col-outline,\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  color: #e91224;\n  background-color: #fff;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default {\n  border-color: #e91224; }\n\nbody .danger-col-outline:hover,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  background-color: #fff;\n  color: #c01120;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:hover,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:hover {\n  border-color: #c01120; }\n\nbody .danger-col-outline:enabled:focus,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:focus,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:focus {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .danger-col-outline:active,\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  background-color: #fff;\n  color: #a90000;\n  border-color: #fff; }\n\nbody .ui-button.ui-state-default.ui-button-danger-outline:enabled:active,\nbody .ui-buttonset.ui-button-danger-outline > .ui-button.ui-state-default:enabled:active {\n  border-color: #a90000; }\n\nbody .ui-dialog .ui-dialog-footer button,\nbody .ui-card .ui-card-footer button {\n  margin: 0 0 0 0.5em !important; }\n\nbody .ui-dialog {\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1) !important; }\n\nbody .ui-dialog .ui-dialog-titlebar {\n  border-radius: 4px 4px 0 0; }\n\nbody .ui-dialog .ui-dialog-footer {\n  border-radius: 0 0 4px 4px; }\n\nbody .ui-messages-error {\n  border: none;\n  font-weight: 800;\n  padding: 0;\n  display: block;\n  width: 100%;\n  text-align: right;\n  color: #a80000; }\n\nbody .ng-dirty.ng-invalid + ul {\n  -webkit-padding-start: 0;\n          padding-inline-start: 0; }\n\nbody .ui-inputtext.ng-invalid:enabled:focus,\n.ui-inputtext {\n  border-color: #a80000; }\n\nbody .ui-inputtext,\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  transition: box-shadow 0.2s; }\n\nbody .ui-inputtext.ng-dirty.ng-invalid,\nbody p-dropdown.ng-dirty.ng-invalid > .ui-dropdown,\nbody p-autocomplete.ng-dirty.ng-invalid > .ui-autocomplete > .ui-inputtext,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext,\nbody p-chips.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-inputmask.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-checkbox.ng-dirty.ng-invalid .ui-chkbox-box,\nbody p-radiobutton.ng-dirty.ng-invalid .ui-radiobutton-box,\nbody p-inputswitch.ng-dirty.ng-invalid .ui-inputswitch,\nbody p-listbox.ng-dirty.ng-invalid .ui-inputtext,\nbody p-multiselect.ng-dirty.ng-invalid > .ui-multiselect,\nbody p-spinner.ng-dirty.ng-invalid > .ui-inputtext,\nbody p-selectbutton.ng-dirty.ng-invalid .ui-button,\nbody p-togglebutton.ng-dirty.ng-invalid .ui-button {\n  box-shadow: 0 0 0 0.2em #f9b4ba; }\n\nbody .ui-inputgroup .ui-inputtext.ng-dirty.ng-invalid + .ui-inputgroup-addon {\n  box-shadow: 2px -2.8px 0 #f9b4ba, 2px 2.8px 0 #f9b4ba; }\n\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar.ui-calendar-w-btn {\n  box-shadow: 0 0 0 3px #f9b4ba;\n  border-radius: 4px; }\n\nbody .ui-inputgroup .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-inputgroup-addon,\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error),\nbody p-calendar.ng-dirty.ng-invalid > .ui-calendar > .ui-inputtext:enabled:focus:not(.ui-state-error) + .ui-calendar-button {\n  box-shadow: none; }\n\n*:not(.ui-calendar) .ui-inputtext {\n  width: 100%; }\n\nbody .ui-state-disabled,\nbody .ui-widget:disabled {\n  cursor: not-allowed; }\n\n.form dynamic-primeng-form-control > div {\n  margin-bottom: 10px; }\n\n.form .ui-calendar,\n.form .ui-spinner {\n  width: 100%; }\n\n.form .ui-calendar-w-btn input.ui-inputtext {\n  width: calc(100% - 33px); }\n\n.form .ui-datepicker {\n  padding: 0.5em; }\n\n.form .ui-datepicker {\n  font-size: 12px; }\n\n.form .ui-datepicker .ui-timepicker {\n  padding: 10px 0 0 0;\n  font-size: 11px; }\n\n.form .ui-datepicker table {\n  font-size: 11px; }\n\n/* width */\n\n::-webkit-scrollbar {\n  width: 10px; }\n\n/* Track */\n\n::-webkit-scrollbar-track {\n  background: none; }\n\n/* Handle */\n\n::-webkit-scrollbar-thumb {\n  background: #00000033;\n  border: 2px solid rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  border-radius: 5px; }\n\n/* Handle on hover */\n\n::-webkit-scrollbar-thumb:hover {\n  background: #00000055;\n  background-clip: padding-box; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg,\n.fake-leaflet-control-colours,\nbody .ui-sidebar,\n#layer-legends .legend,\n.layer-values-popup .leaflet-popup-content-wrapper,\n.layer-values-popup .leaflet-popup-tip,\n#simulation-play {\n  color: #333;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  border: none;\n  background-clip: padding-box; }\n\n.fake-leaflet-control.active,\n.fake-leaflet-control-lg.active,\n.fake-leaflet-control-colours.active,\nbody .active.ui-sidebar,\n#layer-legends .active.legend,\n.layer-values-popup .active.leaflet-popup-content-wrapper,\n.layer-values-popup .active.leaflet-popup-tip,\n.active#simulation-play {\n  background-color: #007ad9;\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n  color: #ffffff; }\n\n.fake-leaflet-control,\n.fake-leaflet-control-lg {\n  margin-bottom: 10px;\n  position: relative; }\n\n.fake-leaflet-control {\n  height: 30px;\n  width: 30px; }\n\n.fake-leaflet-control-lg {\n  height: 44px;\n  width: 44px; }\n\n.fake-leaflet-control a,\n.fake-leaflet-control-lg a {\n  color: inherit;\n  height: 100%;\n  width: 100%;\n  display: block;\n  line-height: 0; }\n\n.fake-leaflet-control:hover,\n.fake-leaflet-control-lg:hover {\n  background-color: #f4f4f4; }\n\n.fake-leaflet-control a:hover,\n.fake-leaflet-control-lg a:hover {\n  color: #333;\n  cursor: pointer; }\n\n.fake-leaflet-control.active:hover,\n.fake-leaflet-control-lg.active:hover {\n  background-color: #1775bd; }\n\n.fake-leaflet-control.active a:hover,\n.fake-leaflet-control-lg.active a:hover,\n.fake-leaflet-control-colours.active a:hover,\nbody .active.ui-sidebar a:hover,\n#layer-legends .active.legend a:hover,\n.layer-values-popup .active.leaflet-popup-content-wrapper a:hover,\n.layer-values-popup .active.leaflet-popup-tip a:hover,\n.active#simulation-play a:hover {\n  color: #ffffff; }\n\n.fake-leaflet-control fa-icon.ng-fa-icon,\n.fake-leaflet-control-lg fa-icon.ng-fa-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n.fake-leaflet-control a {\n  font-size: 12px; }\n\n.fake-leaflet-control-lg a {\n  font-size: 24px; }\n\nbody .ui-sidebar {\n  z-index: 1400 !important;\n  transition: transform 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955);\n  padding: 0;\n  border-radius: 0; }\n\nbody .ui-sidebar-bottom {\n  box-shadow: 0 -8px 0px 2px rgba(0, 0, 0, 0.2); }\n\nbody .ui-sidebar-bottom,\nbody .ui-sidebar-top {\n  height: 320px; }\n\nbody .ui-sidebar-left,\nbody .ui-sidebar-right {\n  width: 313px; }\n\n.ui-sidebar.width-fit-content {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content; }\n\n.ui-sidebar.height-fit-content {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content; }\n\n.ui-sidebar.width-fit-content .sidebar-container {\n  min-width: 313px;\n  max-width: 100vw; }\n\n.sidebar-container {\n  height: calc(100% - 53px);\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: hidden; }\n\n.sidebar-padding {\n  padding-top: 0.571em;\n  padding-right: 1em;\n  padding-bottom: 0.571em;\n  padding-left: 1em; }\n\n.sidebar-footer {\n  border-top: 1px solid #c8c8c8;\n  background: #f4f4f4; }\n\nbody .ui-sidebar .ui-sidebar-close {\n  padding-top: 0.571em;\n  padding-right: 1em;\n  padding-bottom: 0.571em;\n  padding-left: 1em;\n  float: none;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\nbody .ui-sidebar h1 {\n  margin-bottom: 0;\n  margin-top: -8px;\n  padding-top: 23px;\n  padding-left: 15px;\n  padding-bottom: 0.67em;\n  padding-right: 100px;\n  background-color: #f4f4f4;\n  border-bottom: 1px solid #c8c8c8; }\n\n@media (min-width: 768px) {\n  body .sidebar-container .ui-orderlist-controls-right {\n    margin-right: -15px; } }\n\n.ui-state-highlight a.icon-toggle.default-col {\n  background-color: #0065b3; }\n\n/* Notes on z-index (in this order)\n1 = Leaflet\n\nGeowebMap Layers (Canvas, SVG...)\n\n500 = Geoweb/CSIRO Logo\n\n600 = Leaflet Layers (editable features - polygons...)\n\n650 = Leaflet tooltip (shows layer values on click)\n\n700 = Leaflet draw guides (graphical elements shown while drawing shapes)\n\n900 = Leaflet controls (buttons) + zoom controller\n\n1000 = Time slider\n\n\n1100 = File browser Dialog (so it is below drop upload...)\n\n1200 = Spinner\n\n1250 = File Drop Upload Component\n\n1300 = GeowebMap controls (config, start, log, connected status...)\n\n1350 = Chart sidebar\n\n1400 = Log Sidebar, Layer Sidebar, Config Sidebar\n\n1500 = Dialogs\n\n1900 = file upload spinner\n\n2000 = toast (message popups in top right corner) \n\n\n*/\n\na:hover {\n  color: #116fbf;\n  cursor: pointer; }\n\n#map-container {\n  overflow: hidden;\n  position: relative; }\n\n#map,\n#map-overlay,\n.svg-overlay {\n  height: calc(100vh);\n  width: 100vw; }\n\n.svg-overlay {\n  position: absolute;\n  pointer-events: none;\n  z-index: 500;\n  top: 0;\n  transform-origin: top left; }\n\n#layer-legends {\n  position: absolute;\n  right: -2px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  touch-action: none;\n  pointer-events: none;\n  padding: 2px; }\n\n#layer-legends .legend {\n  box-sizing: content-box;\n  display: block;\n  float: right;\n  clear: both;\n  padding: 8px;\n  margin-bottom: 10px;\n  font-size: 14px; }\n\n#layer-legends .legend > g {\n    transform: translate(0, 14px); }\n\n#layer-legends .legend text {\n    fill: #333; }\n\n#layer-legends .legend .legendTitle {\n    font-weight: bold; }\n\n.disable-pointer {\n  pointer-events: none !important;\n  touch-action: none !important; }\n\n.leaflet-canvas-overlay,\n.leaflet-svg-overlay {\n  overflow: visible;\n  transform-origin: top left; }\n\n.leaflet-tile-pane,\n.leaflet-overlay-pane {\n  z-index: auto; }\n\n.leaflet-draw-guides {\n  position: absolute;\n  z-index: 700; }\n\n/* OVERRIDE LEAFLET zoom and fade animations */\n\n.leaflet-fade-anim .leaflet-tile {\n  will-change: opacity; }\n\n.leaflet-fade-anim .leaflet-popup {\n  opacity: 0;\n  transition: opacity 0.15s linear; }\n\n.leaflet-zoom-anim .leaflet-zoom-animated,\n.leaflet {\n  transition: transform 0.15s cubic-bezier(0, 0, 0.25, 1) !important; }\n\n.leaflet-zoom-anim .leaflet-canvas-overlay,\n.leaflet-zoom-anim .leaflet-svg-overlay {\n  transition: transform 0.15s cubic-bezier(0, 0, 0.25, 1); }\n\n.leaflet-fade-anim .leaflet-map-pane .leaflet-popup {\n  opacity: 1; }\n\n.leaflet-zoom-animated {\n  transform-origin: 0 0; }\n\n.leaflet-zoom-anim .leaflet-zoom-animated,\n.leaflet-canvas-overlay,\n.leaflet-svg-overlay {\n  will-change: transform; }\n\n.leaflet-zoom-anim .leaflet-tile,\n.leaflet-pan-anim .leaflet-tile {\n  transition: none; }\n\n.leaflet-zoom-anim .leaflet-zoom-hide {\n  visibility: hidden; }\n\n#svg-overlay.control,\n.control {\n  pointer-events: all; }\n\n.leaflet-top {\n  top: 50% !important;\n  transform: translateY(-50%); }\n\n#top-right-controls {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  z-index: 900;\n  transition: right 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n#top-right-controls.layer-sidebar-visble {\n  right: 325px; }\n\n#top-right-controls .fake-leaflet-control {\n  right: -14px; }\n\n#top-right-controls.hidden {\n  right: -60px; }\n\n#top-left-controls,\n#edit-feature-controller,\n#zoom-controller {\n  position: absolute;\n  left: 10px;\n  transition: left 0.5s cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n#top-left-controls.hidden,\n#edit-feature-controller.hidden,\n#zoom-controller.hidden {\n  left: -60px; }\n\n#edit-feature-controller {\n  z-index: 999;\n  bottom: 0; }\n\n#edit-feature-controller .mapboxgl-ctrl.mapboxgl-ctrl-group {\n  margin: 0 0 10px 0;\n  float: left; }\n\n#top-left-controls {\n  z-index: 1300;\n  top: 10px; }\n\n#edit-feature-controller a:hover,\n#zoom-controller a:hover,\n.leaflet-control-layers-toggle {\n  cursor: pointer; }\n\n.mapboxgl-ctrl-group > button {\n  position: relative; }\n\n.map-logo {\n  position: absolute;\n  top: 6px;\n  left: 61px;\n  z-index: 500;\n  opacity: 0.5;\n  transition: opacity cubic-bezier(0.455, 0.03, 0.515, 0.955) 0.2s;\n  text-align: center;\n  text-align: center;\n  text-shadow: 0 0 3px white, 0 0 3px white, 0 0 3px white, 0 0 3px white;\n  font-size: 25px;\n  font-weight: 600; }\n\n.map-logo .map-logo-img {\n  height: 77px;\n  margin: auto;\n  display: block;\n  font-family: Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; }\n\n.map-logo:hover {\n  opacity: 0.7; }\n\n#timeline-controller {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: calc(100vw - 650px);\n  min-width: 500px;\n  max-width: 1000px;\n  height: auto;\n  font-size: 14px;\n  z-index: 1000;\n  transition: bottom 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n.timeline {\n  grid-template-columns: -webkit-min-content auto 164px;\n  grid-template-columns: min-content auto 164px;\n  display: grid;\n  padding: 5px; }\n\n.timeline.hidden {\n  bottom: -100px; }\n\n.timeline .ui-calendar-w-btn input.ui-inputtext {\n  width: calc(100% - 33px); }\n\n.time-slider-label {\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  margin: 0 5px; }\n\n.time-slider {\n  transform: translate(0, 50%);\n  padding: 0 14px;\n  top: -1px;\n  position: relative; }\n\n.time-input {\n  width: 130px; }\n\n.leaflet-toolbar-0 {\n  width: 34px;\n  margin-bottom: 10px; }\n\n.leaflet-control-toolbar > li:first-child > .leaflet-toolbar-icon {\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px; }\n\n.leaflet-control-toolbar > li:last-child > .leaflet-toolbar-icon {\n  border-bottom-left-radius: 2px;\n  border-bottom-right-radius: 2px; }\n\n.leaflet-toolbar-icon-custom {\n  text-decoration: none !important;\n  color: #333 !important; }\n\n.leaflet-toolbar-icon-custom:hover {\n  color: #222 !important;\n  cursor: pointer; }\n\n.icon-toggle {\n  height: 100%;\n  width: 30px;\n  display: block;\n  float: right;\n  margin: -1px 0;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 12px; }\n\n.icon-toggle:hover {\n  cursor: pointer; }\n\n.ui-state-highlight .icon-toggle.default-col {\n  color: #fff; }\n\n.ui-state-highlight .icon-toggle.default-col:hover {\n  color: #ffffffcc; }\n\n.ui-orderlist-item:not(.ui-state-highlight):hover a.icon-toggle.secondary-col {\n  background-color: #d2cfcf; }\n\n.ui-orderlist-item:not(.ui-state-highlight):hover a.icon-toggle.secondary-col:hover {\n  background-color: #c3c3c3; }\n\n.draw-fire-icon {\n  position: absolute;\n  top: 3px;\n  left: 7px; }\n\n.secondary-draw-fire-icon {\n  position: absolute;\n  color: #aaa;\n  top: 8px;\n  right: 6px;\n  font-size: 15px;\n  -webkit-filter: drop-shadow(-1px -1px 0px #fff);\n          filter: drop-shadow(-1px -1px 0px #fff); }\n\n.layer-sidebar-container .ui-widget-content.ui-orderlist-list {\n  min-height: 200px;\n  height: auto; }\n\n.layer-values-popup .mapboxgl-popup-content {\n  pointer-events: none; }\n\n.layer-values-popup .leaflet-popup-content-wrapper,\n.layer-values-popup .leaflet-popup-tip {\n  box-shadow: none; }\n\n.leaflet-popup-tip {\n  bottom: -18px;\n  border: none !important;\n  border-radius: 0;\n  -webkit-filter: drop-shadow(0px -2px 0px rgba(0, 0, 0, 0.2));\n  filter: drop-shadow(2px 2px 0px rgba(0, 0, 0, 0.2));\n  pointer-events: none; }\n\n.leaflet-popup-tip-container {\n  bottom: -18px; }\n\n.layer-values-popup .leaflet-popup-content-wrapper {\n  border-radius: 3px; }\n\n.layer-values-popup .leaflet-popup-content {\n  margin: 0;\n  padding: 12px; }\n\n.layer-values-popup p:not(:last-child) {\n  margin: 0 0 4px 0; }\n\n.layer-values-popup p:last-child {\n  margin: 0; }\n\n#chart-container {\n  padding: 0 10px 10px 10px; }\n\n#chart {\n  height: 250px; }\n\nbody .ui-sidebar.chart-sidebar {\n  background: rgba(255, 255, 255, 0.9);\n  z-index: 1350 !important;\n  margin: 0;\n  margin-bottom: -4px;\n  z-index: 1011;\n  width: calc(100vw - 650px);\n  min-width: 500px;\n  max-width: 1000px;\n  opacity: 1;\n  left: 50%;\n  transform: translate(-50%, 100%);\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\nbody .ui-sidebar.chart-sidebar.ui-sidebar-active {\n  transform: translate(-50%, 0); }\n\nbody .ui-sidebar.chart-sidebar h3 {\n  margin: 0;\n  padding-top: 10px;\n  text-align: center;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px; }\n\n.mapboxgl-ctrl-bottom-left {\n  top: 50%;\n  bottom: unset;\n  left: 0;\n  transform: translate(0, -50%); }\n\n#simulation-play {\n  position: absolute;\n  bottom: 10px;\n  left: 50% !important;\n  transform: translateX(-50%);\n  text-align: center;\n  z-index: 1300;\n  padding: 5px 10px;\n  background-clip: padding-box;\n  font-size: 14px;\n  opacity: 50%; }\n\n#simulation-speed {\n  position: absolute;\n  bottom: 5px;\n  left: 50% !important;\n  z-index: 1400; }\n\n.legend-overlay {\n  position: absolute;\n  width: 6%;\n  bottom: 100px;\n  right: 0;\n  height: auto;\n  overflow: visible;\n  padding: 0 0 0 0;\n  margin: 0 0 0 0;\n  z-index: 100;\n  margin-right: 3%; }\n\n.legend-overlay .legend-overlay-inner {\n  color: rgba(255, 255, 255, 0.8);\n  padding: 0;\n  overflow: visible; }\n\n.legend-overlay-inner table td {\n  text-transform: capitalize; }\n\n.line_break {\n  padding: 0.5px;\n  border: none;\n  border-bottom: 1px solid gray; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/geo-web/map/map.component.ts":
/*!**********************************************!*\
  !*** ./src/app/geo-web/map/map.component.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const MapboxDraw = __webpack_require__(/*! @mapbox/mapbox-gl-draw */ "./node_modules/@mapbox/mapbox-gl-draw/index.js");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const job_service_service_1 = __webpack_require__(/*! ../../services/job-service.service */ "./src/app/services/job-service.service.ts");
const map_popup_service_1 = __webpack_require__(/*! ./map-popup/map-popup.service */ "./src/app/geo-web/map/map-popup/map-popup.service.ts");
const map_editable_feature_layer_1 = __webpack_require__(/*! ./map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const spinner_service_service_1 = __webpack_require__(/*! src/app/spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
const job_base_1 = __webpack_require__(/*! ../../../../../shared/src/job/job-base */ "../shared/src/job/job-base.ts");
const array_1 = __webpack_require__(/*! ../../../../../shared/src/util/array */ "../shared/src/util/array.ts");
const time_slider_1 = __webpack_require__(/*! ./map-layer/time-slider */ "./src/app/geo-web/map/map-layer/time-slider.ts");
const string_1 = __webpack_require__(/*! ../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const layer_service_service_1 = __webpack_require__(/*! ./map-layer/layer-service.service */ "./src/app/geo-web/map/map-layer/layer-service.service.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const mapboxGl = __webpack_require__(/*! mapbox-gl */ "./node_modules/mapbox-gl/dist/mapbox-gl.js");
const mapbox_gl_layer_1 = __webpack_require__(/*! ./map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const mapbox_draw_styles_1 = __webpack_require__(/*! ./mapbox-draw-styles */ "./src/app/geo-web/map/mapbox-draw-styles.ts");
/**
 * This component wraps up Mapbox GL and all map related functionality: map layers, charts...
 *
 * @export
 * @class GeowebMapComponent
 */
let GeowebMapComponent = class GeowebMapComponent {
    constructor(jobService, restApiService, layerService, mapPopupService, zone, spinnerService, cdr) {
        this.jobService = jobService;
        this.restApiService = restApiService;
        this.layerService = layerService;
        this.mapPopupService = mapPopupService;
        this.zone = zone;
        this.spinnerService = spinnerService;
        this.cdr = cdr;
        this.showLayerValues = false;
        this.showLayerController = false;
        this.showChartController = false;
        this.showLayerMetadataPopup = false;
        this.jobLayers = [];
        this.jobInputLayers = [];
        this.jobOutputLayers = [];
        this.selectedLayers = [];
        this.editableFeatureToolbarButtons = [];
        this.timeSliders = [];
        this.mapStyle = "mapbox://styles/mapbox/light-v10";
        this.mapStyleChanged = false;
        this.isPlaying = false;
        this.simulationStatus = "play";
        this.clockStartTime = -1;
        this.timeFromSlider = "00:00";
        this.timeSliderStep = 0;
        this.customFormValidators = {
            floatValidator: string_1.floatValidator,
        };
        this.configForEES = { region: "", population: "any", fire: "any", evacMessage: "NONE", speed: "60", time: "00:00", crs: "", finalMessageList: {} };
        this.activities = {};
        // Emergency messages
        this.emergencyMessageDialog = false;
        this.zoneVisibility = false;
        this.messageList = false;
        this.messageListDialog = false;
        this.updateMessage = false;
        this.evacMessages = {
            options: [
                {
                    message: "NONE"
                },
                {
                    message: "ADVICE",
                },
                {
                    message: "WATCH&ACT",
                },
                {
                    message: "EMERGENCY_WARNING",
                },
                {
                    message: "EVACUATE_NOW",
                },
            ]
        };
        this.mapStyles = {
            options: [
                {
                    style: "dark-v10"
                },
                {
                    style: "outdoors-v11"
                },
                {
                    style: "light-v10"
                },
                {
                    style: "streets-v11"
                },
                {
                    style: "satellite-v9"
                },
            ]
        };
        this.enteredEvacMessages = [];
        this.messageListOptions = [];
        this.highlightedZones = [];
        this.Errors = { "messageType": false, "time": false, "content": false, "duplicate": false };
        this.finalMessageList = {
            "help": [
                "List of emergency messages to inject into the simulation",
                "{",
                "type: one of ADVICE, WATCH_AND_ACT, EVACUATE_NOW",
                "broadcastHHMM : the time in HHMM format when this mesage is to be sent",
                "broadcastZones: list of zones IDs to which this message should be sent",
                "}"
            ],
            "spatialReferenceEPSG": "EPSG:28355",
            "messages": []
        };
        this.regionData = {
            "mount_alexander_shire": {
                center: [144.212304, -37.064737],
                crs: "EPSG:28355"
            },
            "surf_coast_shire": {
                center: [144.326271, -38.332386],
                crs: "EPSG:32754"
            }
        };
        this.chartSubscription = this.layerService.chartBehaviourObservable.subscribe(message => {
            if (typeof message === "undefined") {
                this.currentChart = undefined;
                this.showChartController = false;
            }
            else {
                this.currentChart = message.chart;
                this.showChartController = !message.hide;
            }
        });
        this.jobSubscription = this.jobService
            .getCurrentJobObservable()
            .subscribe(job => {
            if (typeof job !== "undefined") {
                this.onJobUpdated(job);
                this.jobType = job.type;
                this.jobName = job.name;
                console.log("job loaded");
            }
        });
    }
    /**
     * Handle escape key presses
     *
     * @param event
     */
    handleKeyboardEvent(event) {
        if (event.key === "Escape") {
            if (this.showLayerMetadataPopup) {
                this.showLayerMetadataPopup = false;
                event.stopImmediatePropagation();
            }
            else if (typeof this.mapPopupService.currentPopup !== "undefined" &&
                this.mapPopupService.currentPopup !== null) {
                this.mapPopupService.hidePopup();
                event.stopImmediatePropagation();
            }
            else if (this.showLayerController) {
                this.showLayerController = false;
                event.stopImmediatePropagation();
            }
            else if (this.showChartController) {
                this.showChartController = false;
                event.stopImmediatePropagation();
            }
            else if (this.showLayerValues) {
                this.showLayerValues = false;
                event.stopImmediatePropagation();
            }
        }
    }
    ngOnInit() {
    }
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            this.configForEES.finalMessageList = {};
            yield this.createFinalMessagesList();
            this.configForEES.finalMessageList = this.finalMessageList;
            return this.configForEES;
        });
    }
    /**
     * DSS : EVENT handler for play button at the bottom
     */
    playSimulation() {
        console.log("play simulation" + this.currentJob.getAnimationSpeed());
        console.log(this.currentJob.mapboxStyle);
        if (this.isPlaying) {
            this.isPlaying = false;
            this.simulationStatus = "play";
            this.currentJob.setupStop();
            this.currentJob.stopAnimation();
            this.setupRunClock();
            this.stopClock();
        }
        else {
            this.isPlaying = true;
            this.simulationStatus = "pause";
            this.currentJob.setupStop();
            this.currentJob.animateMaldonTest();
            this.setupRunClock();
            this.startClock();
        }
        // if(this.currentJob.animateMaldonTest())
    }
    /**
     * Start the clock when play button clicked
     */
    startClock() {
        setInterval(() => {
            if (this.clockStartTime == -1) //change this condition to true in first iteration
             {
                this.clockStartTime = Date.now();
            }
            let start = this.currentJob.getTimeStamps().start;
            let finish = this.currentJob.getTimeStamps().finish;
            const loopLength = finish - start;
            let animationSpeed = this.animationSpeed;
            var timestamp;
            var loopTime;
            let totalSeconds;
            timestamp = (Date.now() - this.clockStartTime) / 1000;
            loopTime = loopLength / animationSpeed;
            let time1 = new Date().getTime();
            totalSeconds = Math.round(((timestamp % loopTime) / loopTime) * loopLength + start);
            let hours = Math.floor(totalSeconds / 3600);
            totalSeconds %= 3600;
            let minutes = Math.floor(totalSeconds / 60);
            let seconds = totalSeconds % 60;
            let minutesSTR = String(minutes).padStart(2, "0");
            let hoursSTR = String(hours).padStart(2, "0");
            let secondsSTR = String(seconds).padStart(2, "0");
            if (this.runClock) {
                this.clock = hoursSTR + ":" + minutesSTR + ":" + secondsSTR;
            }
        }, 1000);
    }
    /**
     * Setup initial time on the clock
     */
    setupInitialTime() {
        let totalSeconds = this.currentJob.getTimeStamps().start;
        console.log("time start" + totalSeconds);
        let hours = Math.floor(totalSeconds / 3600);
        totalSeconds %= 3600;
        let minutes = Math.floor(totalSeconds / 60);
        let seconds = totalSeconds % 60;
        let minutesSTR = String(minutes).padStart(2, "0");
        let hoursSTR = String(hours).padStart(2, "0");
        let secondsSTR = String(seconds).padStart(2, "0");
        this.clock = hoursSTR + ":" + minutesSTR + ":" + secondsSTR;
        let totalMinutes = minutes + (hours * 60);
        //console.log("total" + totalMinutes)
        this.currentJob.simulateFireLayer(totalMinutes);
        console.log("setup clock" + this.clock);
    }
    /**
     * Save the current simulataion time when clock stops
     */
    stopClock() {
        let currentTime = this.clock;
        this.clock = currentTime;
        console.log("currentTime" + currentTime);
    }
    /**
     * handle stop and start state of the clock
     */
    setupRunClock() {
        if (this.runClock) {
            this.runClock = false;
        }
        else {
            this.runClock = true;
        }
    }
    ngAfterViewInit() {
        this.initMapbox();
        this.layerService.layerLegendElement = d3_1.select("#layer-legends");
    }
    ngOnDestroy() {
        this.chartSubscription.unsubscribe();
        this.jobSubscription.unsubscribe();
        this.cdr.detach();
    }
    initMapbox() {
        this.zone.runOutsideAngular(() => {
            this.spinnerService.setSpinner(`mapbox-init`, {
                name: `Initialising Mapbox`,
                icon: spinner_service_service_1.SpinnerIcon.Square,
            });
            mapboxGl.accessToken =
                "pk.eyJ1Ijoibmlja2ZvcmJlc3NtaXRoIiwiYSI6ImNrMHl2eXF4ejA4aGozYmp4YmlkOTBnbjEifQ.qGNT0EV6MmPtyQa4ifGzYA";
            const map = new mapboxGl.Map({
                container: "map",
                style: this.mapStyle,
                zoom: 4,
                logoPosition: "bottom-right",
                center: [133.46191406250003, -26.23430203240673],
            });
            map.once("load", () => {
                this.spinnerService.removeSpinner(`mapbox-init`);
            });
            map.on("load", () => {
                map.on('mousemove', 'zone-hover', (e) => {
                    // console.log("mousemove")
                    if (e.features.length > 0) {
                        //console.log("mousemove1")
                        if (hoveredStateId) {
                            console.log("mousemove hover false");
                            map.setFeatureState({ source: 'zonehover', id: hoveredStateId }, { hover: false });
                        }
                        //this.layerService.mapboxGl
                        //console.log("mousemove3")
                        //console.log(e.features[0])
                        //console.log(e.features[0].id)
                        hoveredStateId = e.features[0].id;
                        console.log(hoveredStateId);
                        map.setFeatureState({ source: 'zonehover', id: hoveredStateId }, { hover: true });
                    }
                });
                // When the mouse leaves the state-fill layer, update the feature state of the
                // previously hovered feature.
                map.on('mouseleave', 'zone-hover', () => {
                    // console.log("mouseleave")
                    if (hoveredStateId) {
                        map.setFeatureState({ source: 'zonehover', id: hoveredStateId }, { hover: false });
                    }
                    hoveredStateId = null;
                });
            });
            const nav = new mapboxGl.NavigationControl({
                visualizePitch: true,
            });
            map.addControl(nav, "bottom-left");
            const geolocate = new mapboxGl.GeolocateControl();
            map.addControl(geolocate, "bottom-left");
            // const scaleControl = new mapboxGl.ScaleControl()
            // map.addControl(scaleControl, "bottom-right")
            map.on("error", event => {
                if (event.error.message !== "Unauthorized") {
                    console.error(event);
                }
            });
            map.on("click", event => {
                // fire onClick for all layers where onClickPolicy === 'all'
                ;
                [...this.jobLayers, ...this.jobInputLayers].forEach(l => {
                    // Fire onClick if not currently editing a editableFeatureColLayer AND:
                    // - onClickPolicy is 'all'
                    // - OR onClickPolicy is 'selected' and layer is selected
                    // OR EditableFeatureCollectionLayer.mode === 'edit' && l is editableFeatureColLayer (TODO: this should not be here...)
                    if ((!map_editable_feature_layer_1.EditableFeatureCollectionLayer.editInProgress &&
                        typeof l.onClick !== "undefined" &&
                        (l.onClickPolicy === "all" ||
                            (l.onClickPolicy === "selected" &&
                                this.selectedLayers.findIndex(s => s.name === l.name) !==
                                    -1))) ||
                        (map_editable_feature_layer_1.EditableFeatureCollectionLayer.mode === "edit" &&
                            l.type === "EditableFeatureCollectionLayer")) {
                        // l.onClick can be three things: undefined, function or EditableFeatureCollectionLayer
                        const point = {
                            layerPoint: event.point,
                            latlng: event.lngLat,
                        };
                        if (typeof l.onClick === "function") {
                            l.onClick(point);
                            return;
                        }
                        // Else l.onClick is a EditableFeatureCollectionLayer
                        const features = l.getFeaturesAtPoint(point);
                        if (Array.isArray(features) && features.length > 0) {
                            const feature = turf_1.clone(features[0]);
                            feature.properties = {};
                            l.onClick.addFeatures([feature]);
                        }
                    }
                });
                //Remove highlighted zones
                this.highlightedZones.forEach(function (value) {
                    map.setPaintProperty(value, 'fill-color', 'rgba(200, 100, 240, 0.5)');
                });
                this.highlightedZones = [];
            });
            // Hide popups on map {move, zoom}
            map.on("movestart", () => {
                this.zone.run(() => {
                    if (typeof this.mapPopupService.currentPopup !== "undefined" &&
                        this.mapPopupService.currentPopup.closeOnMapMove) {
                        this.mapPopupService.hidePopup();
                    }
                });
            });
            //Handle click event of population sub groups
            map.on('click', 'subgroups-layer', (e) => {
                //console.log(e.features[0])
                console.log(e.features[0].properties.SA1_MAIN16);
                // this.emergencyMessageDialog = true
                //console.log(this.emergencyMessageDialog)
                this.showEmergencyMessageDialog();
                this.selectedZone = e.features[0];
                this.broadcastZones = e.features[0].properties.SA1_MAIN16;
                this.broadcastZoneString = "Broadcast Zone " + e.features[0].properties.SA1_MAIN16;
                // this.mapPopupService.showPopup("here")
                // this.showPop()
            });
            var zonePopup = new mapboxGl.Popup({
                closeButton: false,
                closeOnClick: false
            });
            map.on('mousemove', 'subgroups-layer', function (e) {
                // Change the cursor style as a UI indicator.
                //map.getCanvas().style.cursor = 'pointer';
                var coordinates = e.features[0].geometry["coordinates"][0][0];
                var description = "Zone : " + e.features[0].properties.SA1_MAIN16 + "<br>" + e.features[0].properties.SA3_NAME16;
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                // Populate the popup and set its coordinates
                // based on the feature found.
                zonePopup
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });
            map.on('mouseleave', 'subgroups-layer', function () {
                map.getCanvas().style.cursor = '';
                zonePopup.remove();
            });
            // Handle hover feature on zones.
            var hoveredStateId = null;
            map.on("zoomstart", () => {
                this.zone.run(() => {
                    if (typeof this.mapPopupService.currentPopup !== "undefined" &&
                        this.mapPopupService.currentPopup.closeOnMapMove) {
                        this.mapPopupService.hidePopup();
                    }
                });
            });
            // Handle layer values popup - this is activated using the crosshairs button in the top right
            let popupVisible = false;
            const popup = new mapboxGl.Popup({
                className: "layer-values-popup",
                closeButton: false,
                closeOnClick: false,
            });
            popup.on("close", (() => {
                popupVisible = false;
                this.showLayerValues = false;
            }).bind(this));
            map.on("mousemove", event => {
                // let fs = map.queryRenderedFeatures(event.point, { layers: ['myiconlayer']});
                if (this.showLayerValues) {
                    const point = {
                        layerPoint: event.point,
                        latlng: event.lngLat,
                    };
                    const values = [];
                    values.push({
                        value: `${d3_1.format(".5f")(point.latlng.lng)}° ${d3_1.format(".5f")(point.latlng.lat)}°`,
                        name: "Long/Lat",
                        units: "",
                    });
                    [...this.jobLayers, ...this.jobInputLayers]
                        .filter(l => l.showValueInPopup)
                        .forEach(l => {
                        const value = l.getValueAtPoint(point);
                        if (typeof value !== "undefined") {
                            values.push({ value, name: l.name, units: l.units });
                        }
                    });
                    if (values.length > 0) {
                        popup
                            .setLngLat(point.latlng)
                            .setHTML(values.reduce((accum, current) => `${accum}<p><b>${current.name}</b><br/>${current.value} ${typeof current.units !== "undefined" ? current.units : ""}</p>`, ""));
                        if (!popupVisible) {
                            popupVisible = true;
                            this.showLayerValues = true;
                            popup.addTo(map);
                        }
                        // If no values and popup is visible -> close popup
                    }
                    else if (popupVisible) {
                        popupVisible = false;
                        popup.remove();
                    }
                }
                else if (popupVisible) {
                    popupVisible = false;
                    this.showLayerValues = false;
                    popup.remove();
                }
            });
            map.on("style.load", event => {
                console.log("style changed");
                if (this.mapStyleChanged) {
                    this.currentJob.createInputLayers();
                    this.currentJob.setMapStyle(this.mapStyle);
                }
            });
            this.layerService.mapboxGl = map;
            //Hover filter start
            //Hover filter end
            // this.layerService.mapboxDraw = new MapboxDraw({
            //   displayControlsDefault: false,
            //   controls: {
            //     polygon: true,
            //     trash: true
            //   },
            //   styles: mapboxDrawStyles,
            // })
            let draw = new MapboxDraw({
                displayControlsDefault: false,
                controls: {
                    polygon: true,
                    trash: true
                },
                styles: mapbox_draw_styles_1.mapboxDrawStyles,
            });
            map.addControl(draw, 'bottom-right');
            map.on('draw.create', mapDrawHandle);
            function mapDrawHandle(e) {
                let data = draw.getAll();
                console.log("draw");
                console.log(data);
                console.log(data.features[0].properties);
            }
        });
    }
    isString(s) {
        return typeof s === "string";
    }
    isFunction(f) {
        return typeof f === "function";
    }
    onJobUpdated(job) {
        return __awaiter(this, void 0, void 0, function* () {
            const init = typeof this.currentJob === "undefined" ||
                this.currentJob.name !== job.name ||
                this.currentJob.type !== job.type;
            const statusChanged = typeof this.currentJobStatus !== "undefined" &&
                job.status !== this.currentJobStatus;
            const jobChanged = typeof this.currentJob !== "undefined" && job.name !== job.name;
            this.currentJob = job;
            this.currentJobStatus = job.status;
            if (init ||
                (statusChanged &&
                    this.currentJobStatus !== job_base_1.JobStatus.RUNNING &&
                    this.currentJobStatus !== job_base_1.JobStatus.QUEUED &&
                    this.currentJobStatus !== job_base_1.JobStatus.STARTING)) {
                try {
                    this.spinnerService.setSpinner(`current-job-init`, {
                        name: `Initialising job view`,
                        icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                    });
                    if (this.layerService.mapboxGl.getStyle().sprite !==
                        this.currentJob.mapboxStyle) {
                        this.layerService.mapboxGl.setStyle(this.currentJob.mapboxStyle);
                        // The style must be loaded before adding layers - or the new layers about to be added might be removed
                        yield new Promise(resolve => this.layerService.mapboxGl.once("styledata", resolve));
                    }
                    this.layerService.clearFileCache();
                    this.selectedLayers = [];
                    this.jobLayers = [];
                    this.timeSliders = [];
                    // Update input layers
                    // if job status Changes -> then just update input layers
                    if (!init && statusChanged) {
                        yield this.currentJob.updateInputLayers();
                        yield Promise.all(this.jobInputLayers.map((layer) => __awaiter(this, void 0, void 0, function* () {
                            yield layer.updateLayer(true);
                        })));
                        // Else remove input layers and create them again
                    }
                    else {
                        this.layerService.removeChart();
                        yield Promise.all(this.jobInputLayers.map(layer => layer.delete()));
                        this.jobInputLayers = yield this.currentJob.createInputLayers();
                        // Get edit feature toolbar buttons from EditableFeatureCollectionLayers
                        this.editableFeatureToolbarButtons = array_1.flattenArray(this.jobInputLayers
                            .filter(map_editable_feature_layer_1.EditableFeatureCollectionLayer.isInstanceOf)
                            .map(layer => layer.getToolbarButtons()));
                    }
                    this.jobLayers.push(...this.jobInputLayers);
                    // Delete all output layers
                    this.jobOutputLayers.forEach(layer => {
                        layer.delete();
                    });
                    // If job is finished -> draw results
                    if (this.currentJob.status === job_base_1.JobStatus.FINISHED) {
                        console.log("here finished");
                        this.spinnerService.setSpinner(`current-job-init`, {
                            name: `Creating output layers`,
                            icon: spinner_service_service_1.SpinnerIcon.GridPulse,
                        });
                        this.activities = {};
                        // this.currentJob.setMapStyle(this.mapStyle)
                        console.log(this.mapStyle);
                        //await this.layerService.mapboxGl.setStyle(this.mapStyle)
                        this.jobOutputLayers = yield this.currentJob.createSimulationLayer();
                        this.setupInitialTime();
                        this.animationSpeed = this.currentJob.getAnimationSpeed();
                        this.jobLayers.push(...this.jobOutputLayers);
                    }
                    this.currentJob.setBbox();
                    if (init || jobChanged) {
                        this.zoomToJobBbox();
                    }
                    this.updateTimeSliders();
                    this.setLayerZOrder();
                }
                catch (error) {
                }
                finally {
                    this.spinnerService.removeSpinner(`current-job-init`);
                }
            }
        });
    }
    downloadUrl(url, type) {
        return __awaiter(this, void 0, void 0, function* () {
            this.spinnerService.setSpinner(`download-file-${url}`, {
                name: `Downloading ${url}`,
                icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                progress: 0,
            });
            yield this.restApiService.downloadUrl(url, type, progress => {
                this.spinnerService.setSpinner(`download-file-${url}`, {
                    name: `Downloading ${url}`,
                    icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                    progress,
                });
            });
            this.spinnerService.removeSpinner(`download-file-${url}`);
        });
    }
    toggleLayerOpacity(evt, layer) {
        return __awaiter(this, void 0, void 0, function* () {
            evt.stopImmediatePropagation();
            if (layer.visible) {
                layer.hide();
            }
            else {
                yield layer.show();
            }
            this.setLayerZOrder();
            return false;
        });
    }
    updateTimeSliders() {
        // Update timesliders
        this.timeSliders = [...this.jobLayers, ...this.jobInputLayers].reduce((sliders, layer) => {
            if (time_slider_1.instanceOfTimeSliderSubscriber(layer) && layer.sliderEnabled) {
                sliders.push(layer.slider);
            }
            return sliders;
        }, []);
    }
    renderUpdatedLayer(layer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield layer.updateLayer();
            if (!layer.visible) {
                yield layer.show();
            }
            this.setLayerZOrder();
        });
    }
    setLayerZOrder() {
        let prevMapboxLayerId;
        // Place job layers below the following two mapbox layers: 'place_label_city_small_s' or 'settlement-label'
        if (typeof this.layerService.mapboxGl.getLayer("place_label_city_small_s") !==
            "undefined") {
            prevMapboxLayerId = "place_label_city_small_s";
        }
        else if (typeof this.layerService.mapboxGl.getLayer("settlement-label") !==
            "undefined") {
            prevMapboxLayerId = "settlement-label";
        }
        ;
        [...this.jobLayers, ...this.jobInputLayers].forEach((layer, idx) => {
            if (!layer.visible) {
                return;
            }
            if (mapbox_gl_layer_1.MapboxGlLayer.isInstanceOf(layer) &&
                typeof layer.mapboxGlLayer !== "undefined") {
                this.layerService.mapboxGl.moveLayer(layer.mapboxGlLayer.id, prevMapboxLayerId);
                prevMapboxLayerId = layer.mapboxGlLayer.id;
            }
            else if (map_editable_feature_layer_1.EditableFeatureCollectionLayer.isInstanceOf(layer)) {
                layer.mapboxLayers.forEach(mbl => this.layerService.mapboxGl.moveLayer(mbl.mapboxGlLayer.id));
            }
        });
    }
    zoomToJobBbox() {
        return new Promise(resolve => {
            if (typeof this.currentJob.boundingBox4326 !== "undefined") {
                this.layerService.mapboxGl.once("moveend", resolve);
                if (this.currentJob.status === job_base_1.JobStatus.FINISHED) {
                    this.fitMapTo4326Bbox(this.currentJob.boundingBox4326, 1.5, 14);
                }
                else {
                    this.fitMapTo4326Bbox(this.currentJob.boundingBox4326, 1.5, 10);
                }
            }
        });
    }
    fitMapTo4326Bbox(boundingBox, duration = 1.5, maxZoom) {
        if (Array.isArray(boundingBox)) {
            this.layerService.mapboxGl.fitBounds(boundingBox, { duration, maxZoom });
        }
    }
    toggleFeatureEdit(keepChanges) {
        if (map_editable_feature_layer_1.EditableFeatureCollectionLayer.mode === "edit") {
            map_editable_feature_layer_1.EditableFeatureCollectionLayer.disableEditMode([...this.jobLayers, ...this.jobInputLayers].filter(l => map_editable_feature_layer_1.EditableFeatureCollectionLayer.isInstanceOf(l)), keepChanges);
        }
        else {
            const drawEditButtonBounds = this.mapboxDrawEditButton.nativeElement.getBoundingClientRect();
            this.mapPopupService.showPopup({
                title: "Edit features",
                coordinates: {
                    x: drawEditButtonBounds.left + drawEditButtonBounds.width / 2,
                    y: drawEditButtonBounds.top + drawEditButtonBounds.height / 2,
                },
                formOnCancelFn: () => this.toggleFeatureEdit(false),
                formOnSubmitFn: () => this.toggleFeatureEdit(true),
                background: false,
            });
            map_editable_feature_layer_1.EditableFeatureCollectionLayer.enableEditMode();
        }
    }
    //Event bind for popluation drop down
    getSelectedPopulation(event) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.currentJob.loadPopulation(event.value.name);
            //getLastFireStep() returns the last step for popluation as well
            let totalminutes = (this.currentJob.getLastFireStep() - 1) * 10;
            this.timeSliderStep = totalminutes;
            //create legends
            this.activities = this.currentJob.getPopulationColorLegends();
            //setup time
            let hours = Math.floor(totalminutes / 60);
            let minutes = totalminutes % 60;
            let minutesSTR = String(minutes).padStart(2, "0");
            let hoursSTR = String(hours).padStart(2, "0");
            this.timeFromSlider = hoursSTR + ":" + minutesSTR;
            this.configForEES.time = this.timeFromSlider;
            this.configForEES.population = event.value.name;
            console.log("Selected pop" + JSON.stringify(event.value));
            console.log("Config" + JSON.stringify(this.configForEES));
        });
    }
    //Event bind for fire drop down
    getSelectedFire(event) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.currentJob.loadFire(event.value.name);
            let totalminutes = this.currentJob.getLastFireStep() * 10;
            this.timeSliderStep = totalminutes;
            let hours = Math.floor(totalminutes / 60);
            let minutes = totalminutes % 60;
            let minutesSTR = String(minutes).padStart(2, "0");
            let hoursSTR = String(hours).padStart(2, "0");
            this.timeFromSlider = hoursSTR + ":" + minutesSTR;
            this.configForEES.time = this.timeFromSlider;
            this.configForEES.fire = event.value.name;
            console.log("Selected evac message" + JSON.stringify(event.value));
            console.log("Config" + JSON.stringify(this.configForEES));
        });
    }
    //Event bind for speed slider
    getMaxSpeed(event) {
        this.configForEES.speed = event.value;
        console.log("Selected evac message" + JSON.stringify(event.value));
        console.log("Config" + JSON.stringify(this.configForEES));
    }
    //Event bind for evac message drop down
    getEvacMessage(event) {
        this.configForEES.evacMessage = event.value.message;
        console.log("Selected evac message" + JSON.stringify(event.value.message));
        console.log("Config" + JSON.stringify(this.configForEES));
    }
    //Get selected region/layer from orderlist
    getSelectedLayer(event) {
        //console.log("before config file" + JSON.stringify(this.configForEES))
        //Reset config file when region change
        this.configForEES = { region: "", population: "none", fire: "none", evacMessage: "NONE", speed: "60", time: "00:00", crs: "", finalMessageList: {} };
        console.log("default config file" + JSON.stringify(this.configForEES));
        // Clear fire layers when region changes
        this.currentJob.clearFirelayers();
        // Clear population layers when region changes
        this.currentJob.clearPopulationlayers();
        // clear popluation legends
        this.activities = {};
        //save the region
        this.selectedRegion = this.selectedLayers[0].name;
        this.configForEES.region = this.selectedLayers[0]["_mapboxGlLayer"]["id"];
        console.log("Selected region" + JSON.stringify(this.selectedRegion));
        console.log("after Config" + JSON.stringify(this.configForEES));
        // save coordinate system
        this.configForEES.crs = this.regionData[this.selectedLayers[0]["_mapboxGlLayer"]["id"]]["crs"];
        this.finalMessageList.spatialReferenceEPSG = this.regionData[this.selectedLayers[0]["_mapboxGlLayer"]["id"]]["crs"];
        // Change camera position when region changes
        this.flyCameraToRegion(this.regionData[this.selectedLayers[0]["_mapboxGlLayer"]["id"]]["center"]);
        //console.log(this.regionData[this.selectedLayers[0]["_mapboxGlLayer"]["id"]]["crs"])
        this.zoneVisibility = false;
        this.currentJob.createZoneLayer(this.selectedLayers[0]["_mapboxGlLayer"]["id"]);
        this.clearZoneLayers();
        this.enteredEvacMessages = [];
        this.messageListOptions = [];
        this.finalMessageList.messages = [];
    }
    //Event handler for animation speed setup slider
    setAnimationSpeed(event) {
        this.currentJob.setupAnimationSpeed(event.value);
    }
    /**
     * Event Hnadler for time slider
     *
     */
    getSelectedTime(event) {
        let totalminutes = event.value;
        console.log("getSelectedtime" + totalminutes);
        let hours = Math.floor(parseInt(totalminutes) / 60);
        let minutes = parseInt(totalminutes) % 60;
        let minutesSTR = String(minutes).padStart(2, "0");
        let hoursSTR = String(hours).padStart(2, "0");
        this.timeFromSlider = hoursSTR + ":" + minutesSTR;
        this.configForEES.time = this.timeFromSlider;
        this.currentJob.filterFireLayers(totalminutes);
        this.currentJob.filterPopulationLayers(totalminutes);
        let date = new Date();
        if (parseInt(minutesSTR) > 0 && parseInt(minutesSTR) < 15) {
            minutesSTR = "00";
        }
        if (parseInt(minutesSTR) > 15 && parseInt(minutesSTR) < 30) {
            minutesSTR = "15";
        }
        if (parseInt(minutesSTR) > 30 && parseInt(minutesSTR) < 45) {
            minutesSTR = "30";
        }
        if (parseInt(minutesSTR) > 45 && parseInt(minutesSTR) < 60) {
            minutesSTR = "45";
        }
        date.setHours(parseInt(hoursSTR));
        date.setMinutes(parseInt(minutesSTR));
        date.setSeconds(0);
        this.selectedMessageSendTime = date;
    }
    showEmergencyMessageDialog() {
        if (this.emergencyMessageDialog || this.updateMessage) {
            this.emergencyMessageDialog = false;
            this.updateMessage = false;
        }
        else {
            this.emergencyMessageDialog = true;
            this.updateMessage = false;
            this.Errors.duplicate = false;
        }
    }
    /**
     * This will add new Evacuation message to the list
     */
    addNewMessage() {
        //this.cities.push({ "name": this.broadcastZones, "code": "none" })
        if (this.selectedEvacMessage == undefined) {
            this.Errors.messageType = true;
            return;
        }
        if (this.selectedMessageSendTime == undefined) {
            this.Errors.time = true;
            return;
        }
        if (this.messageContent == undefined || this.messageContent == " " || this.messageContent == null) {
            this.Errors.content = true;
            return;
        }
        let message = this.selectedEvacMessage;
        if (message["message"] == "NONE") {
            this.Errors.messageType = true;
            return;
        }
        this.Errors.messageType = false;
        this.Errors.time = false;
        this.Errors.content = false;
        let time = this.selectedMessageSendTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        let broadcastHHMM = time.slice(0, 2) + time.slice(3);
        let obj = { "type": message["message"], "broadcastHHMM": broadcastHHMM, "broadcastZones": this.broadcastZones, "content": this.messageContent };
        for (var i = 0; i < this.enteredEvacMessages.length; i++) {
            if (this.enteredEvacMessages[i].type == obj["type"] && this.enteredEvacMessages[i].broadcastHHMM == obj["broadcastHHMM"] && this.enteredEvacMessages[i].broadcastZones == obj["broadcastZones"]) {
                this.Errors.duplicate = true;
                return;
            }
        }
        this.Errors.duplicate = false;
        this.enteredEvacMessages = [...this.enteredEvacMessages, { "type": message["message"], "broadcastHHMM": broadcastHHMM, "broadcastZones": this.broadcastZones, "content": this.messageContent }];
        // Create a zone layer for this message
        this.createSingleZoneLayer(this.selectedZone);
        //Sort by broadcast time
        this.enteredEvacMessages = this.enteredEvacMessages.sort((n1, n2) => {
            if (n1.broadcastHHMM > n2.broadcastHHMM) {
                return 1;
            }
            if (n1.broadcastHHMM < n2.broadcastHHMM) {
                return -1;
            }
            return 0;
        });
        this.messageListOptions = this.enteredEvacMessages.map((item, index) => ({ value: index, label: item.broadcastHHMM, type: item.type, zone: item.broadcastZones, content: item.content }));
        //console.log(this.enteredEvacMessages)
    }
    /**
     * Delete selected evacuation messages
     * @param i index of selected item
     */
    deleteMessage(i) {
        const count = this.enteredEvacMessages.reduce((pre, cur) => (cur.broadcastZones === this.enteredEvacMessages[i]["broadcastZones"]) ? ++pre : pre, 0);
        console.log("count" + count);
        //Delete layer attached to this message
        if (count == 1) {
            this.deleteSingleZoneLayer(this.enteredEvacMessages[i]["broadcastZones"]);
        }
        // delete this.enteredEvacMessages[i]
        this.enteredEvacMessages.splice(i, 1);
        this.messageListOptions.splice(i, 1);
    }
    /**
     * Update error messages when Evacuation messages drop down changes
     */
    updateErrorMessagesType() {
        if (this.selectedEvacMessage != undefined) {
            this.Errors.messageType = false;
            this.Errors.duplicate = false;
        }
        if (this.selectedMessageSendTime != undefined) {
            this.Errors.time = false;
            this.Errors.duplicate = false;
        }
        let message = this.selectedEvacMessage;
        if (message["message"] == "NONE") {
            this.Errors.messageType = false;
        }
    }
    /**
   * Update error messages when Time selector changes
   */
    updateErrorMessagesTime() {
        if (this.selectedMessageSendTime != undefined) {
            this.Errors.time = false;
            this.Errors.duplicate = false;
        }
    }
    /**
     * This will create the final evac message list for scenario_messages.json
     */
    createFinalMessagesList() {
        let EVACUATE_NOW = false;
        let EVACUATE_NOW_Index = 0;
        let EMERGENCY_WARNING = false;
        let EMERGENCY_WARNING_Index = 0;
        let WATCHACT = false;
        let WATCHACT_Index = 0;
        let ADVICE = false;
        let ADVICE_Index = 0;
        for (var i = 0; i < this.enteredEvacMessages.length; i++) {
            // evacuate now
            if (this.enteredEvacMessages[i]["type"] == "EVACUATE_NOW") {
                if (EVACUATE_NOW) {
                    this.finalMessageList.messages[EVACUATE_NOW_Index]["broadcastZones"][this.enteredEvacMessages[i].broadcastZones] = null;
                }
                else {
                    let obj = {};
                    obj[this.enteredEvacMessages[i].broadcastZones] = null;
                    this.finalMessageList.messages.push({ "type": this.enteredEvacMessages[i].type, "broadcastHHMM": this.enteredEvacMessages[i].broadcastHHMM, "content": this.enteredEvacMessages[i].content, "broadcastZones": obj });
                    if (this.enteredEvacMessages[i]["type"] == "EVACUATE_NOW") {
                        if (EVACUATE_NOW == false) {
                            EVACUATE_NOW = true;
                            EVACUATE_NOW_Index = this.finalMessageList.messages.length - 1;
                        }
                    }
                }
            }
            // emergency warning
            if (this.enteredEvacMessages[i]["type"] == "EMERGENCY_WARNING") {
                if (EMERGENCY_WARNING) {
                    this.finalMessageList.messages[EMERGENCY_WARNING_Index]["broadcastZones"][this.enteredEvacMessages[i].broadcastZones] = null;
                }
                else {
                    let obj = {};
                    obj[this.enteredEvacMessages[i].broadcastZones] = null;
                    this.finalMessageList.messages.push({ "type": this.enteredEvacMessages[i].type, "broadcastHHMM": this.enteredEvacMessages[i].broadcastHHMM, "content": this.enteredEvacMessages[i].content, "broadcastZones": obj });
                    if (this.enteredEvacMessages[i]["type"] == "EMERGENCY_WARNING") {
                        if (EMERGENCY_WARNING == false) {
                            EMERGENCY_WARNING = true;
                            EMERGENCY_WARNING_Index = this.finalMessageList.messages.length - 1;
                        }
                    }
                }
            }
            // watch and act
            if (this.enteredEvacMessages[i]["type"] == "WATCH&ACT") {
                if (WATCHACT) {
                    this.finalMessageList.messages[WATCHACT_Index]["broadcastZones"][this.enteredEvacMessages[i].broadcastZones] = null;
                }
                else {
                    let obj = {};
                    obj[this.enteredEvacMessages[i].broadcastZones] = null;
                    this.finalMessageList.messages.push({ "type": this.enteredEvacMessages[i].type, "broadcastHHMM": this.enteredEvacMessages[i].broadcastHHMM, "content": this.enteredEvacMessages[i].content, "broadcastZones": obj });
                    if (this.enteredEvacMessages[i]["type"] == "WATCH&ACT") {
                        if (WATCHACT == false) {
                            WATCHACT = true;
                            WATCHACT_Index = this.finalMessageList.messages.length - 1;
                        }
                    }
                }
            }
            //Advice
            if (this.enteredEvacMessages[i]["type"] == "ADVICE") {
                if (ADVICE) {
                    this.finalMessageList.messages[ADVICE_Index]["broadcastZones"][this.enteredEvacMessages[i].broadcastZones] = null;
                }
                else {
                    let obj = {};
                    obj[this.enteredEvacMessages[i].broadcastZones] = null;
                    this.finalMessageList.messages.push({ "type": this.enteredEvacMessages[i].type, "broadcastHHMM": this.enteredEvacMessages[i].broadcastHHMM, "content": this.enteredEvacMessages[i].content, "broadcastZones": obj });
                    if (this.enteredEvacMessages[i]["type"] == "ADVICE") {
                        if (ADVICE == false) {
                            ADVICE = true;
                            ADVICE_Index = this.finalMessageList.messages.length - 1;
                        }
                    }
                }
            }
        }
        // console.log(this.finalMessageList)
    }
    showZoneLayers() {
        if (this.zoneVisibility) {
            this.zoneVisibility = false;
            this.currentJob.showZoneLayers(this.zoneVisibility);
        }
        else {
            this.zoneVisibility = true;
            this.currentJob.showZoneLayers(this.zoneVisibility);
        }
    }
    /**
     * fly camera to selected region
     * @param center center coordinates of the region
     */
    flyCameraToRegion(center) {
        //DSS:Zoom to simulation area
        this.layerService.mapboxGl.flyTo({
            center: center,
            speed: 0.5,
            zoom: 10
        });
    }
    /**
     * Change map style
     */
    changeMapStyle(event) {
        return __awaiter(this, void 0, void 0, function* () {
            this.mapStyleChanged = true;
            this.layerService.mapboxGl.removeLayer("surf_coast_shire");
            this.layerService.mapboxGl.removeLayer("mount_alexander_shire");
            this.layerService.mapboxGl.setStyle('mapbox://styles/mapbox/' + event.value.style);
            this.mapStyle = 'mapbox://styles/mapbox/' + event.value.style;
        });
    }
    /**
     * Create new layers according to selected messages
     */
    createSingleZoneLayer(data) {
        let zone = data["properties"]["SA1_MAIN16"];
        let zoneLayer = new mapbox_gl_layer_1.MapboxGlLayer(zone, {
            id: zone,
            type: "fill",
            source: zone,
            paint: {
                'fill-color': 'rgba(200, 100, 240, 0.5)'
            }
        }, {
            id: zone,
            source: {
                type: "geojson",
                data: data,
            },
        });
        zoneLayer.show();
    }
    /**
     * Delete single zone layer
     */
    deleteSingleZoneLayer(id) {
        if (this.layerService.mapboxGl.getLayer(id)) {
            this.layerService.mapboxGl.removeLayer(id);
        }
    }
    /**
     * Highlight zone when message selected
     */
    highlightZone(i) {
        if (this.highlightedZones.includes(this.enteredEvacMessages[i]["broadcastZones"])) {
            console.log("includes");
            const index = this.highlightedZones.indexOf(this.enteredEvacMessages[i]["broadcastZones"]);
            if (index > -1) {
                this.highlightedZones.splice(index, 1);
            }
            this.layerService.mapboxGl.setPaintProperty(this.enteredEvacMessages[i]["broadcastZones"], 'fill-color', 'rgba(200, 100, 240, 0.5)');
        }
        else {
            console.log("no");
            //remove existing highlight layes
            if (this.highlightedZones.length > 0) {
                this.layerService.mapboxGl.setPaintProperty(this.highlightedZones[0], 'fill-color', 'rgba(200, 100, 240, 0.5)');
                this.highlightedZones = [];
            }
            this.highlightedZones.push(this.enteredEvacMessages[i]["broadcastZones"]);
            this.layerService.mapboxGl.setPaintProperty(this.enteredEvacMessages[i]["broadcastZones"], 'fill-color', 'rgba(200, 100, 240, 1)');
        }
        console.log("highlight" + this.highlightedZones);
    }
    /**
     * Edit evac message
     */
    editMessageDialog(i) {
        console.log("edit message");
        // setup input fields 
        this.broadcastZoneString = "Broadcast Zone : " + this.messageListOptions[i].zone + " Message No : " + (this.messageListOptions[i].value + 1);
        this.updatingMessageNumber = parseInt(this.messageListOptions[i].value);
        let obj = { "message": this.messageListOptions[i].type };
        this.selectedEvacMessage = obj;
        this.messageContent = this.messageListOptions[i].content;
        let date = new Date();
        let hoursSTR = this.messageListOptions[i].label.substr(0, 2);
        let minutesSTR = this.messageListOptions[i].label.substr(2, 3);
        date.setHours(parseInt(hoursSTR));
        date.setMinutes(parseInt(minutesSTR));
        date.setSeconds(0);
        this.selectedMessageSendTime = date;
        if (!this.updateMessage) {
            this.updateMessage = true;
            this.emergencyMessageDialog = true;
            this.Errors.duplicate = false;
        }
    }
    updateSingleMessage() {
        console.log("this.updatingMessageNumber" + this.updatingMessageNumber);
        if (this.selectedEvacMessage == undefined) {
            this.Errors.messageType = true;
            return;
        }
        if (this.selectedMessageSendTime == undefined) {
            this.Errors.time = true;
            return;
        }
        if (this.messageContent == undefined || this.messageContent == " " || this.messageContent == null) {
            this.Errors.content = true;
            return;
        }
        let message = this.selectedEvacMessage;
        if (message["message"] == "NONE") {
            this.Errors.messageType = true;
            return;
        }
        this.Errors.messageType = false;
        this.Errors.time = false;
        this.Errors.content = false;
        let time = this.selectedMessageSendTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        let broadcastHHMM = time.slice(0, 2) + time.slice(3);
        let obj = { "type": message["message"], "broadcastHHMM": broadcastHHMM, "broadcastZones": this.broadcastZones, "content": this.messageContent };
        for (var i = 0; i < this.enteredEvacMessages.length; i++) {
            if (this.enteredEvacMessages[i].type == obj["type"] && this.enteredEvacMessages[i].broadcastHHMM == obj["broadcastHHMM"] && this.enteredEvacMessages[i].broadcastZones == obj["broadcastZones"] && this.enteredEvacMessages[i].content == obj["content"]) {
                this.Errors.duplicate = true;
                return;
            }
        }
        this.Errors.duplicate = false;
        this.enteredEvacMessages[this.updatingMessageNumber] = { "type": message["message"], "broadcastHHMM": broadcastHHMM, "broadcastZones": this.broadcastZones, "content": this.messageContent };
        //Sort by broadcast time
        this.enteredEvacMessages = this.enteredEvacMessages.sort((n1, n2) => {
            if (n1.broadcastHHMM > n2.broadcastHHMM) {
                return 1;
            }
            if (n1.broadcastHHMM < n2.broadcastHHMM) {
                return -1;
            }
            return 0;
        });
        this.messageListOptions = this.enteredEvacMessages.map((item, index) => ({ value: index, label: item.broadcastHHMM, type: item.type, zone: item.broadcastZones, content: item.content }));
    }
    /**
     * Clear individual zones created for evac messages
     */
    clearZoneLayers() {
        for (let i = 0; i < this.enteredEvacMessages.length; i++) {
            this.deleteSingleZoneLayer(this.enteredEvacMessages[i]["broadcastZones"]);
        }
    }
};
__decorate([
    core_1.HostListener("document:keyup", ["$event"]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], GeowebMapComponent.prototype, "handleKeyboardEvent", null);
__decorate([
    core_1.ViewChild("mapContainer"),
    __metadata("design:type", core_1.ElementRef)
], GeowebMapComponent.prototype, "mapContainer", void 0);
__decorate([
    core_1.ViewChild("mapboxDrawEditButton"),
    __metadata("design:type", core_1.ElementRef)
], GeowebMapComponent.prototype, "mapboxDrawEditButton", void 0);
GeowebMapComponent = __decorate([
    core_1.Component({
        selector: "app-map",
        template: __webpack_require__(/*! ./map.component.html */ "./src/app/geo-web/map/map.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./map.component.scss */ "./src/app/geo-web/map/map.component.scss")]
    }),
    __metadata("design:paramtypes", [job_service_service_1.JobService,
        rest_api_service_1.RestApiService,
        layer_service_service_1.LayerService,
        map_popup_service_1.PopupFormService,
        core_1.NgZone,
        spinner_service_service_1.SpinnerService,
        core_1.ChangeDetectorRef])
], GeowebMapComponent);
exports.GeowebMapComponent = GeowebMapComponent;


/***/ }),

/***/ "./src/app/geo-web/map/mapbox-draw-styles.ts":
/*!***************************************************!*\
  !*** ./src/app/geo-web/map/mapbox-draw-styles.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.mapboxDrawStyles = [
    {
        id: "highlight-active-points-halo",
        type: "circle",
        filter: [
            "all",
            ["==", "$type", "Point"],
            ["==", "meta", "feature"],
            ["==", "active", "true"],
        ],
        paint: {
            "circle-radius": 24,
            "circle-color": "#FFF",
        },
    },
    {
        id: "highlight-active-points",
        type: "circle",
        filter: [
            "all",
            ["==", "$type", "Point"],
            ["==", "meta", "feature"],
            ["==", "active", "true"],
        ],
        paint: {
            "circle-radius": 20,
            "circle-color": "#000000",
        },
    },
    {
        id: "inactive-points-halo",
        type: "circle",
        filter: [
            "all",
            ["==", "$type", "Point"],
            ["==", "meta", "feature"],
            ["==", "active", "false"],
        ],
        paint: {
            "circle-radius": 22,
            "circle-color": "#FFF",
        },
    },
    {
        id: "inactive-points",
        type: "circle",
        filter: [
            "all",
            ["==", "$type", "Point"],
            ["==", "meta", "feature"],
            ["==", "active", "false"],
        ],
        paint: {
            "circle-radius": 20,
            "circle-color": "#000000",
        },
    },
    {
        id: "gl-draw-line",
        type: "line",
        filter: ["all", ["==", "$type", "LineString"], ["!=", "mode", "static"]],
        layout: {
            "line-cap": "round",
            "line-join": "round",
        },
        paint: {
            "line-color": "#D20C0C",
            "line-dasharray": [0.2, 2],
            "line-width": 2,
        },
    },
    // polygon fill
    {
        id: "gl-draw-polygon-fill",
        type: "fill",
        filter: ["all", ["==", "$type", "Polygon"], ["!=", "mode", "static"]],
        paint: {
            "fill-color": "#D20C0C",
            "fill-outline-color": "#D20C0C",
            "fill-opacity": 0.1,
        },
    },
    // polygon outline stroke
    // This doesn't style the first edge of the polygon, which uses the line stroke styling instead
    {
        id: "gl-draw-polygon-stroke-active",
        type: "line",
        filter: ["all", ["==", "$type", "Polygon"], ["!=", "mode", "static"]],
        layout: {
            "line-cap": "round",
            "line-join": "round",
        },
        paint: {
            "line-color": "#D20C0C",
            "line-dasharray": [0.2, 2],
            "line-width": 2,
        },
    },
    // vertex point halos
    {
        id: "gl-draw-polygon-and-line-vertex-halo-inactive",
        type: "circle",
        filter: [
            "all",
            ["==", "meta", "vertex"],
            ["==", "$type", "Point"],
            ["!=", "mode", "static"],
            ["==", "active", "false"],
        ],
        paint: {
            "circle-radius": 9,
            "circle-color": "#FFF",
        },
    },
    {
        id: "gl-draw-polygon-and-line-vertex-halo-active",
        type: "circle",
        filter: [
            "all",
            ["==", "meta", "vertex"],
            ["==", "$type", "Point"],
            ["!=", "mode", "static"],
            ["==", "active", "true"],
        ],
        paint: {
            "circle-radius": 11,
            "circle-color": "#FFF",
        },
    },
    // vertex points
    {
        id: "gl-draw-polygon-and-line-vertex-active",
        type: "circle",
        filter: [
            "all",
            ["==", "meta", "vertex"],
            ["==", "$type", "Point"],
            ["!=", "mode", "static"],
        ],
        paint: {
            "circle-radius": 7,
            "circle-color": "#D20C0C",
        },
    },
    // INACTIVE (static, already drawn)
    // line stroke
    {
        id: "gl-draw-line-static",
        type: "line",
        filter: ["all", ["==", "$type", "LineString"], ["==", "mode", "static"]],
        layout: {
            "line-cap": "round",
            "line-join": "round",
        },
        paint: {
            "line-color": "#000",
            "line-width": 3,
        },
    },
    // polygon fill
    {
        id: "gl-draw-polygon-fill-static",
        type: "fill",
        filter: ["all", ["==", "$type", "Polygon"], ["==", "mode", "static"]],
        paint: {
            "fill-color": "#000",
            "fill-outline-color": "#000",
            "fill-opacity": 0.1,
        },
    },
    // polygon outline
    {
        id: "gl-draw-polygon-stroke-static",
        type: "line",
        filter: ["all", ["==", "$type", "Polygon"], ["==", "mode", "static"]],
        layout: {
            "line-cap": "round",
            "line-join": "round",
        },
        paint: {
            "line-color": "#000",
            "line-width": 3,
        },
    },
];


/***/ }),

/***/ "./src/app/geo-web/server-config-form-model.ts":
/*!*****************************************************!*\
  !*** ./src/app/geo-web/server-config-form-model.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const form_interfaces_1 = __webpack_require__(/*! ../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../shared/src/user/user */ "../shared/src/user/user.ts");
var ServerConfigFormModeKey;
(function (ServerConfigFormModeKey) {
    ServerConfigFormModeKey["Basic"] = "basic";
})(ServerConfigFormModeKey = exports.ServerConfigFormModeKey || (exports.ServerConfigFormModeKey = {}));
exports.serverConfigForm = new form_interfaces_1.FormRootModel();
exports.serverConfigForm.modes = [
    {
        key: ServerConfigFormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.Admin],
    },
];
exports.serverConfigForm.defaultMode = exports.serverConfigForm.modes[0];
// This model matches ServerPublicConfigJSON
exports.serverConfigForm.schemaFactory = [
    {
        name: "Server Config",
        modeKeys: [ServerConfigFormModeKey.Basic],
        form: {
            model: [
                new core_1.DynamicInputModel({
                    id: "JOB_DIR",
                    label: "Job directory",
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
                new core_1.DynamicInputModel({
                    id: "JOB_TEMPLATE_DIR",
                    label: "Job template directory",
                }),
                new core_1.DynamicInputModel({
                    id: "PRIVATE_FILES_DIR",
                    label: "Job template library directories (comma-delimited with no spaces)",
                }),
                new core_1.DynamicInputModel({
                    id: "SPARK_PATH",
                    label: "Geoweb path",
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
                new core_1.DynamicInputModel({
                    id: "EMV2_PATH",
                    label: "EMV2 path",
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
                new core_1.DynamicInputModel({
                    id: "OPENCL_PLATFORM_ID",
                    label: "OpenCL Platform ID",
                }),
            ],
        },
    },
];


/***/ }),

/***/ "./src/app/home/home.component.html":
/*!******************************************!*\
  !*** ./src/app/home/home.component.html ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"home-container\">\n  <div class=\"home-body-container\" [ngClass]=\"{ 'blur-animate ': afterViewInit }\">\n    <h1 class=\"app-title\">Welcome to EES</h1>\n    <app-disclaimer redirectTo=\"/job\"></app-disclaimer>\n  </div>\n\n  <div class=\"home-geoweb-logo-container\">\n    <img src=\"assets/img/logo/noun_Vajra_302102.svg\" alt=\"INDRA Logo\" class=\"home-geoweb-logo\" [ngClass]=\"{ 'blur-animate ': afterViewInit }\" />\n  </div>\n\n  <img src=\"assets/img/logo/noun_Vajra_302102.svg\" alt=\"INDRA Logo\" id=\"small-logo\" />\n</div>"

/***/ }),

/***/ "./src/app/home/home.component.scss":
/*!******************************************!*\
  !*** ./src/app/home/home.component.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".app-title {\n  font-size: 48px;\n  margin-top: 0;\n  margin-bottom: 60px;\n  color: #272727;\n  text-align: center;\n  z-index: 1;\n  position: relative;\n  text-shadow: 0 2px 2px rgba(0, 0, 0, 0.1); }\n\n@keyframes fadein {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n\n.home-container {\n  background-color: #e0e0e0;\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n  animation: fadein 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n.home-body-container {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  padding: 20px;\n  width: calc(100vw);\n  z-index: 1;\n  transform: translate(-50%, -50%);\n  -webkit-filter: blur(10px);\n          filter: blur(10px);\n  transition: 1s transform cubic-bezier(0.455, 0.03, 0.515, 0.955), 1s opacity cubic-bezier(0.455, 0.03, 0.515, 0.955);\n  opacity: 0; }\n\n.home-body-container.blur-animate {\n  -webkit-filter: blur(0);\n          filter: blur(0);\n  opacity: 1; }\n\n.home-geoweb-logo-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n  z-index: 0;\n  width: 100%;\n  height: 100%; }\n\n@keyframes logo-fadein {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 0.2; } }\n\n.home-geoweb-logo {\n  z-index: 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100vw;\n  min-width: 200px;\n  max-width: 1000px;\n  touch-action: none;\n  touch-action: none;\n  pointer-events: none;\n  -webkit-filter: blur(5px);\n          filter: blur(5px);\n  opacity: 0.05;\n  animation: logo-fadein 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955); }\n\n#small-logo {\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 0);\n  height: 100px;\n  bottom: 100px; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1Ysa0JBQWtCO0VBQ2xCLHlDQUF5QyxFQUFBOztBQUczQztFQUNFO0lBQ0UsVUFBVSxFQUFBO0VBRVo7SUFDRSxVQUFVLEVBQUEsRUFBQTs7QUFJZDtFQUNFLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQiwrREFBK0QsRUFBQTs7QUFHakU7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCxhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixnQ0FBZ0M7RUFDaEMsMEJBQWtCO1VBQWxCLGtCQUFrQjtFQUNsQixvSEFDb0Q7RUFDcEQsVUFBVSxFQUFBOztBQUdaO0VBQ0UsdUJBQWU7VUFBZixlQUFlO0VBQ2YsVUFBVSxFQUFBOztBQUdaO0VBQ0UsZUFBZTtFQUNmLE1BQU07RUFDTixPQUFPO0VBQ1AsZ0JBQWdCO0VBQ2hCLFVBQVU7RUFFVixXQUFXO0VBQ1gsWUFBWSxFQUFBOztBQUdkO0VBQ0U7SUFDRSxVQUFVLEVBQUE7RUFFWjtJQUNFLFlBQVksRUFBQSxFQUFBOztBQUloQjtFQUNFLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFFVCxnQ0FBZ0M7RUFDaEMsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIseUJBQWlCO1VBQWpCLGlCQUFpQjtFQUNqQixhQUFhO0VBS2Isb0VBQW9FLEVBQUE7O0FBUXRFO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCw2QkFBNkI7RUFDN0IsYUFBYTtFQUNiLGFBQWEsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hcHAtdGl0bGUge1xuICBmb250LXNpemU6IDQ4cHg7XG4gIG1hcmdpbi10b3A6IDA7XG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG4gIGNvbG9yOiAjMjcyNzI3O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHotaW5kZXg6IDE7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdGV4dC1zaGFkb3c6IDAgMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG59XG5cbkBrZXlmcmFtZXMgZmFkZWluIHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG4uaG9tZS1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwO1xuICBoZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYW5pbWF0aW9uOiBmYWRlaW4gMzAwbXMgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpO1xufVxuXG4uaG9tZS1ib2R5LWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgcGFkZGluZzogMjBweDtcbiAgd2lkdGg6IGNhbGMoMTAwdncpO1xuICB6LWluZGV4OiAxO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgZmlsdGVyOiBibHVyKDEwcHgpO1xuICB0cmFuc2l0aW9uOiAxcyB0cmFuc2Zvcm0gY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpLFxuICAgIDFzIG9wYWNpdHkgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpO1xuICBvcGFjaXR5OiAwO1xufVxuXG4uaG9tZS1ib2R5LWNvbnRhaW5lci5ibHVyLWFuaW1hdGUge1xuICBmaWx0ZXI6IGJsdXIoMCk7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi5ob21lLWdlb3dlYi1sb2dvLWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB6LWluZGV4OiAwO1xuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiAjZTNlYWYwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG5Aa2V5ZnJhbWVzIGxvZ28tZmFkZWluIHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMC4yO1xuICB9XG59XG5cbi5ob21lLWdlb3dlYi1sb2dvIHtcbiAgei1pbmRleDogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgd2lkdGg6IDEwMHZ3O1xuICBtaW4td2lkdGg6IDIwMHB4O1xuICBtYXgtd2lkdGg6IDEwMDBweDtcbiAgdG91Y2gtYWN0aW9uOiBub25lO1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBmaWx0ZXI6IGJsdXIoNXB4KTtcbiAgb3BhY2l0eTogMC4wNTtcbiAgLy8gdHJhbnNpdGlvbjogMnMgLXdlYmtpdC1maWx0ZXIgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpO1xuICAvLyB0cmFuc2l0aW9uOiAycyBmaWx0ZXIgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpO1xuICAvLyB0cmFuc2l0aW9uOiAycyBmaWx0ZXIgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpLFxuICAvLyAgIDJzIC13ZWJraXQtZmlsdGVyIGN1YmljLWJlemllcigwLjQ1NSwgMC4wMywgMC41MTUsIDAuOTU1KTtcbiAgYW5pbWF0aW9uOiBsb2dvLWZhZGVpbiAzMDBtcyBjdWJpYy1iZXppZXIoMC40NTUsIDAuMDMsIDAuNTE1LCAwLjk1NSk7XG59XG5cbi5ob21lLWdlb3dlYi1sb2dvLmJsdXItYW5pbWF0ZSB7XG4gIC8vIGZpbHRlcjogYmx1cigyNXB4KTtcbiAgLy8gb3BhY2l0eTogMC40O1xufVxuXG4jc21hbGwtbG9nbyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgYm90dG9tOiAxMDBweDtcbn1cbiJdfQ== */"

/***/ }),

/***/ "./src/app/home/home.component.ts":
/*!****************************************!*\
  !*** ./src/app/home/home.component.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const disclaimer_service_1 = __webpack_require__(/*! ../disclaimer/disclaimer-service */ "./src/app/disclaimer/disclaimer-service.ts");
const router_1 = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
const auth_service_1 = __webpack_require__(/*! ../services/auth.service */ "./src/app/services/auth.service.ts");
/**
 * Home component, redirects to login or job (GeoWebComponent)
 *
 * @export
 * @class HomeComponent
 */
let HomeComponent = class HomeComponent {
    constructor(disclaimerService, router, zone, authService) {
        this.disclaimerService = disclaimerService;
        this.router = router;
        this.zone = zone;
        this.authService = authService;
        this.afterViewInit = false;
    }
    ngOnInit() {
        if (!this.authService.isLoggedIn) {
            this.router.navigate(["/login"]);
        }
        else if (this.disclaimerService.disclaimerAgreedTo) {
            this.router.navigate(["/job"]);
        }
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.zone.run(() => {
                this.afterViewInit = true;
            });
        }, 300);
    }
};
HomeComponent = __decorate([
    core_1.Component({
        selector: "app-home",
        template: __webpack_require__(/*! ./home.component.html */ "./src/app/home/home.component.html"),
        styles: [__webpack_require__(/*! ./home.component.scss */ "./src/app/home/home.component.scss")]
    }),
    __metadata("design:paramtypes", [disclaimer_service_1.DisclaimerSerivce,
        router_1.Router,
        core_1.NgZone,
        auth_service_1.AuthService])
], HomeComponent);
exports.HomeComponent = HomeComponent;


/***/ }),

/***/ "./src/app/jobs/job-class-map.ts":
/*!***************************************!*\
  !*** ./src/app/jobs/job-class-map.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const client_job_1 = __webpack_require__(/*! ./job-types/spark/client-job */ "./src/app/jobs/job-types/spark/client-job.ts");
const job_types_1 = __webpack_require__(/*! ../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const client_job_2 = __webpack_require__(/*! ./job-types/evac/client-job */ "./src/app/jobs/job-types/evac/client-job.ts");
const slr_job_1 = __webpack_require__(/*! ./job-types/climate/slr-job */ "./src/app/jobs/job-types/climate/slr-job.ts");
const client_job_3 = __webpack_require__(/*! ./job-types/ees/client-job */ "./src/app/jobs/job-types/ees/client-job.ts");
const temp_job_1 = __webpack_require__(/*! ./job-types/climate/temp-job */ "./src/app/jobs/job-types/climate/temp-job.ts");
const projection_job_1 = __webpack_require__(/*! ./job-types/climate/projection-job */ "./src/app/jobs/job-types/climate/projection-job.ts");
const sew_job_1 = __webpack_require__(/*! ./job-types/risk/sew-job */ "./src/app/jobs/job-types/risk/sew-job.ts");
const cogg_job_1 = __webpack_require__(/*! ./job-types/risk/cogg-job */ "./src/app/jobs/job-types/risk/cogg-job.ts");
const nsw_fire_1 = __webpack_require__(/*! ./job-types/risk/nsw-fire */ "./src/app/jobs/job-types/risk/nsw-fire.ts");
const client_job_4 = __webpack_require__(/*! ./job-types/spark-workspace/client-job */ "./src/app/jobs/job-types/spark-workspace/client-job.ts");
// Maps between job types and job class
exports.jobClassMap = type => {
    switch (type) {
        case job_types_1.JobType.SPARK:
            return client_job_1.SparkClientJob;
        case job_types_1.JobType.SPARKWORKSPACE:
            return client_job_4.SparkWorkspaceClientJob;
        case job_types_1.JobType.EMV2:
            return client_job_2.Emv2ClientJob;
        case job_types_1.JobType.CLIMATE_SLR:
            return slr_job_1.ClimateSlrJob;
        case job_types_1.JobType.CLIMATE_TEMP:
            return temp_job_1.ClimateTempJob;
        case job_types_1.JobType.CLIMATE_PROJ:
            return projection_job_1.ClimateProjectionsJob;
        case job_types_1.JobType.SEW:
            return sew_job_1.SewJob;
        case job_types_1.JobType.COGG:
            return cogg_job_1.CoggJob;
        case job_types_1.JobType.NSWFIRE:
            return nsw_fire_1.NswFireJob;
        case job_types_1.JobType.EES:
            return client_job_3.EES;
        default:
            throw `INVALID job type: ${type}`;
    }
};


/***/ }),

/***/ "./src/app/jobs/job-types/climate/form-model.ts":
/*!******************************************************!*\
  !*** ./src/app/jobs/job-types/climate/form-model.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const form_interfaces_1 = __webpack_require__(/*! ../../../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../../../shared/src/user/user */ "../shared/src/user/user.ts");
const file_browser_input_model_1 = __webpack_require__(/*! src/app/form/file-browser-input/file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
var TestFormModeKey;
(function (TestFormModeKey) {
    TestFormModeKey["Basic"] = "basic";
})(TestFormModeKey = exports.TestFormModeKey || (exports.TestFormModeKey = {}));
exports.testFormRootModel = new form_interfaces_1.FormRootModel();
exports.testFormRootModel.subjectPropertyKey = "inputs";
exports.testFormRootModel.modes = [
    {
        key: TestFormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.User, user_1.GeowebUserRoles.Admin],
    },
];
exports.testFormRootModel.defaultMode = exports.testFormRootModel.modes[0];
exports.testFormRootModel.schemaFactory = () => {
    return [
        {
            name: "Basic",
            modeKeys: [TestFormModeKey.Basic],
            form: {
                layout: {
                    custom: {
                        grid: {
                            container: "ui-g-12",
                            group: "ui-g-12",
                            label: "ui-g-12",
                        },
                        element: {
                            group: "formgroup-container formgroup-tabular",
                            children: "formgroup-tabular-child",
                            container: "formgroup-container",
                            label: "formgroup-label",
                        },
                    },
                    file: {
                        grid: {
                            host: "",
                        },
                    },
                },
                model: [
                    new file_browser_input_model_1.FileBrowserInputModel({
                        id: `geotiffTest`,
                        label: `Geotiff`,
                        options: { selectableType: "file" },
                    }),
                ],
            },
        },
    ];
};


/***/ }),

/***/ "./src/app/jobs/job-types/climate/projection-job.ts":
/*!**********************************************************!*\
  !*** ./src/app/jobs/job-types/climate/projection-job.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/climate/form-model.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const dates_1 = __webpack_require__(/*! ../../../../../../shared/src/util/dates */ "../shared/src/util/dates.ts");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
class ClimateProjectionsJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.CLIMATE_PROJ;
        this.clientOnly = true;
        this.inputFormModel = form_model_1.testFormRootModel;
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            const dimensions = {
                rcp: {
                    label: "Emissions scenario",
                    key: "rcp",
                    options: [
                        {
                            value: `rcp45`,
                            label: `rcp45`,
                        },
                        {
                            value: `rcp85`,
                            label: `rcp85`,
                        },
                    ],
                    selected: { value: "rcp45", label: "rcp45" },
                },
                projection: {
                    label: "Climate projection",
                    key: "projection",
                    options: [
                        {
                            value: `ACCESS1-0`,
                            label: `ACCESS1-0`,
                        },
                        {
                            value: `CanESM2`,
                            label: `CanESM2`,
                        },
                        {
                            value: `CESM1-CAM5`,
                            label: `CESM1-CAM5`,
                        },
                        {
                            value: `CNRM-CM5`,
                            label: `CNRM-CM5`,
                        },
                        // {
                        //   value: `GFDL-ESM2M`,
                        //   label: `GFDL-ESM2M`,
                        // },
                        {
                            value: `HadGEM2-CC`,
                            label: `HadGEM2-CC`,
                        },
                        {
                            value: `MIROC5`,
                            label: `MIROC5`,
                        },
                        {
                            value: `NorESM1-M`,
                            label: `NorESM1-M`,
                        },
                    ],
                    selected: { value: "ACCESS1-0", label: "ACCESS1-0" },
                },
                year: {
                    label: "Year",
                    key: "Year",
                    options: Array(94)
                        .fill(0)
                        .map((val, index) => {
                        return {
                            value: `${index + 2006}`,
                            label: `${index + 2006}`,
                        };
                    }),
                    selected: { value: "2006", label: "2006" },
                },
                month: {
                    label: "Month",
                    key: "month",
                    options: Array(12)
                        .fill(0)
                        .map((val, index) => {
                        return {
                            value: dates_1.months[index].toLowerCase(),
                            label: dates_1.months[index],
                        };
                    }),
                    selected: { value: dates_1.months[0].toLowerCase(), label: dates_1.months[0] },
                },
            };
            const climateLayerTasmax = new map_geotiff_layer_1.RasterMultiLayer("Temperature max", dimensions, dimensions => `https://storage.googleapis.com/geostack-data/spark/Public/climate-data/output/tasmax_Amon_${dimensions.projection.selected.value}_${dimensions.rcp.selected.value}_r1i1p1_2006-209911-seasavg_native.nc_tasmax_${dimensions.month.selected.value}_${dimensions.year.selected.value}-3857.geotiff`);
            climateLayerTasmax.valueFormatFn = (kelvin) => d3_1.format(".2f")(kelvin - 273.15);
            climateLayerTasmax.valueTransformation = {
                func: (kelvin) => kelvin - 273.15,
                inverse: (celsius) => celsius + 273.15,
            };
            const climateLayerTasmin = new map_geotiff_layer_1.RasterMultiLayer("Temperature min", dimensions, dimensions => `https://storage.googleapis.com/geostack-data/spark/Public/climate-data/output/tasmin_Amon_${dimensions.projection.selected.value}_${dimensions.rcp.selected.value}_r1i1p1_2006-209911-seasavg_native.nc_tasmin_${dimensions.month.selected.value}_${dimensions.year.selected.value}-3857.geotiff`);
            climateLayerTasmin.valueFormatFn = (kelvin) => d3_1.format(".2f")(kelvin - 273.15);
            climateLayerTasmin.valueTransformation = {
                func: (kelvin) => kelvin - 273.15,
                inverse: (celsius) => celsius + 273.15,
            };
            const climateLayerHum = new map_geotiff_layer_1.RasterMultiLayer("Relative humidity", dimensions, dimensions => `https://storage.googleapis.com/geostack-data/spark/Public/climate-data/output/hurs_Amon_${dimensions.projection.selected.value}_${dimensions.rcp.selected.value}_r1i1p1_2006-209911-seasavg_native.nc_hurs_${dimensions.month.selected.value}_${dimensions.year.selected.value}-3857.geotiff`);
            const climateLayerPre = new map_geotiff_layer_1.RasterMultiLayer("Precipitation", dimensions, dimensions => `https://storage.googleapis.com/geostack-data/spark/Public/climate-data/output/pr_Amon_${dimensions.projection.selected.value}_${dimensions.rcp.selected.value}_r1i1p1_2006-209911-seassum_native.nc_pr_${dimensions.month.selected.value}_${dimensions.year.selected.value}-3857.geotiff`);
            climateLayerPre.linkedLayers = [
                climateLayerTasmax,
                climateLayerTasmin,
                climateLayerHum,
            ];
            climateLayerTasmax.linkedLayers = [
                climateLayerTasmin,
                climateLayerHum,
                climateLayerPre,
            ];
            climateLayerTasmin.linkedLayers = [
                climateLayerTasmax,
                climateLayerHum,
                climateLayerPre,
            ];
            climateLayerHum.linkedLayers = [
                climateLayerTasmax,
                climateLayerTasmin,
                climateLayerPre,
            ];
            const wetBulbLayer = new map_geotiff_layer_1.RasterExpressionLayer("Wet-bulb temperature max", [climateLayerTasmax, climateLayerHum], // From https://journals.ametsoc.org/doi/full/10.1175/JAMC-D-11-0143.1
            function (raster) {
                return ((raster[0][this.thread.y][this.thread.x] - 273.15) *
                    Math.atan(0.151977 *
                        Math.sqrt(raster[1][this.thread.y][this.thread.x] + 8.313659)) +
                    Math.atan(raster[0][this.thread.y][this.thread.x] -
                        273.15 +
                        raster[1][this.thread.y][this.thread.x]) -
                    Math.atan(raster[1][this.thread.y][this.thread.x] - 1.676331) +
                    0.00391838 *
                        Math.pow(raster[1][this.thread.y][this.thread.x], 3 / 2) *
                        Math.atan(0.023101 * raster[1][this.thread.y][this.thread.x]) -
                    4.686035);
            });
            wetBulbLayer.minValue = 20;
            wetBulbLayer.maxValue = 45;
            wetBulbLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateTurbo");
            wetBulbLayer.colourScheme.reversed = true;
            yield wetBulbLayer.show();
            return [
                wetBulbLayer,
                climateLayerTasmax,
                climateLayerTasmin,
                climateLayerPre,
                climateLayerHum,
            ];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    setBbox() { }
}
exports.ClimateProjectionsJob = ClimateProjectionsJob;


/***/ }),

/***/ "./src/app/jobs/job-types/climate/slr-job.ts":
/*!***************************************************!*\
  !*** ./src/app/jobs/job-types/climate/slr-job.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/climate/form-model.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const c3_1 = __webpack_require__(/*! c3 */ "./node_modules/c3/c3.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const abs_sa_vector_tile_layers_1 = __webpack_require__(/*! ../shared/abs-sa-vector-tile-layers */ "./src/app/jobs/job-types/shared/abs-sa-vector-tile-layers.ts");
const map_editable_feature_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const slr_inputs_outputs_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/climate/slr-inputs-outputs */ "../shared/src/job/job-types/climate/slr-inputs-outputs.ts");
class ClimateSlrJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.CLIMATE_SLR;
        this.inputFormModel = form_model_1.testFormRootModel;
    }
    init() {
        this.inputs = new slr_inputs_outputs_1.ClimateSlrJobInputs();
        this.outputs = new slr_inputs_outputs_1.ClimateSlrJobOutputs();
    }
    // async runSlrProcess(inputFeatures: FeatureCollection<Polygon>) {
    //   const projectBbox = (bbox: number[]) => {
    //     const p1 = this.layerService.mapboxGl.project([bbox[0], bbox[1]])
    //     const p2 = this.layerService.mapboxGl.project([bbox[2], bbox[3]])
    //     return [[p1.x, p1.y], [p2.x, p2.y]] as [PointLike, PointLike]
    //   }
    //   const bounding = projectBbox(bbox(inputFeatures))
    //   const slr = this.layerService.mapboxGl.queryRenderedFeatures(bounding, {
    //     layers: ["vic-slr"],
    //   })
    //   const landParcels = this.layerService.mapboxGl.queryRenderedFeatures(
    //     bounding,
    //     { layers: ["land-parcel"] }
    //   )
    //   const housePrices = this.layerService.mapboxGl.queryRenderedFeatures(
    //     bounding,
    //     {
    //       layers: ["vic-house-prices"],
    //     }
    //   )
    //   const allPointsMatch = pointsWithinPolygon(
    //     pointsWithinPolygon(
    //       featureCollection(landParcels),
    //       featureCollection(slr)
    //     ),
    //     inputFeatures
    //   )
    //   console.log(allPointsMatch)
    //   let price = 0
    //   housePrices.forEach(suburb => {
    //     const suburbPointsMatch = pointsWithinPolygon(
    //       clone(allPointsMatch),
    //       featureCollection([suburb])
    //     )
    //     if (suburbPointsMatch.features.length === 0) {
    //       return
    //     }
    //     price +=
    //       suburbPointsMatch.features.reduce(
    //         (s, f) =>
    //           f.properties.point_count ? s + f.properties.point_count : s + 1,
    //         0
    //       ) * suburb.properties.price
    //   })
    //   console.log(price)
    // }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.slrInputLayer = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Input polygon", this.inputs.inputFc);
            // this.slrInputLayer.shapeOptions = { color: "#000000" }
            this.slrInputLayer.toolbarButtonOptions.polygon = {
                title: "Add input polygon",
                primaryFaIcon: ["fas", "shapes"],
            };
            this.slrInputLayer.opacity = 50;
            this.slrInputLayer.singleFeature = true;
            yield this.slrInputLayer.show();
            const landparcelLayer = new mapbox_gl_layer_1.MapboxGlLayer("Vic land parcels (centroids)", {
                id: "land-parcel",
                type: "circle",
                source: "land-parcel",
                "source-layer": "your_data_in_4326",
                paint: {
                    // make circles larger as the user zooms from z12 to z22
                    // "circle-radius": 2,
                    "circle-radius": {
                        base: 1,
                        stops: [[6, 1], [22, 3]],
                    },
                    // color circles by ethnicity, using a match expression
                    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
                    "circle-color": "#000000",
                },
            }, {
                id: "land-parcel",
                source: {
                    type: "vector",
                    tiles: [
                        `https://storage.googleapis.com/geostack-data/spark/Public/land-parcels-ex/{z}/{x}/{y}.pbf`,
                    ],
                },
            });
            landparcelLayer.colourScheme = new colour_scheme_1.SolidColourScheme("#000000");
            landparcelLayer.opacity = 10;
            const slrLayer = new mapbox_gl_layer_1.MapboxGlLayer("Vic inundation (storm-tide)", {
                id: "vic-slr",
                type: "fill",
                source: "vic-slr",
                "source-layer": "test",
                paint: {
                    "fill-color": "#0000ff",
                },
            }, {
                id: "vic-slr",
                source: {
                    type: "vector",
                    tiles: [
                        `https://storage.googleapis.com/geostack-data/spark/Public/vic-sea-level-rise/{z}/{x}/{y}.pbf`,
                    ],
                },
            });
            slrLayer.dimensionsArray = [
                {
                    label: "Date",
                    key: "date",
                    options: ["2009/01/01", "2040/01/01", "2070/01/01", "2100/01/01"].map(option => {
                        return { label: option, value: option };
                    }),
                    selected: { value: "2100/01/01", label: "2100/01/01" },
                },
            ];
            slrLayer.opacity = 50;
            const housePricesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Vic median house price", {
                id: "vic-house-prices",
                type: "fill",
                source: "vic-hp",
                "source-layer": "your_data_in_4326",
            }, {
                id: "vic-hp",
                source: {
                    type: "vector",
                    tiles: [
                        `https://storage.googleapis.com/geostack-data/spark/Public/vic-suburb-house-price/{z}/{x}/{y}.pbf`,
                    ],
                },
            });
            housePricesLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateTurbo");
            housePricesLayer.colourByProperty = {
                label: "House Price",
                key: "price",
                minValue: 0,
                maxValue: 5000000,
            };
            housePricesLayer.idByProperty = "VIC_LOCA_2";
            housePricesLayer.valueFormatFn = string_1.formatCurrency;
            housePricesLayer.dimensionsArray = [
                {
                    label: "Date",
                    key: "time",
                    options: [
                        "2007/01/01",
                        "2008/01/01",
                        "2009/01/01",
                        "2010/01/01",
                        "2011/01/01",
                        "2012/01/01",
                        "2013/01/01",
                        "2014/01/01",
                        "2015/01/01",
                        "2016/01/01",
                        "2017/01/01",
                        "2018/01/01",
                    ].map(option => {
                        return { label: option, value: option };
                    }),
                    selected: { value: "2018/01/01", label: "2018/01/01" },
                },
            ];
            housePricesLayer.opacity = 50;
            housePricesLayer.onClick = this.slrInputLayer;
            yield housePricesLayer.show();
            yield slrLayer.show();
            yield landparcelLayer.show();
            return [
                this.slrInputLayer,
                housePricesLayer,
                slrLayer,
                landparcelLayer,
                ...abs_sa_vector_tile_layers_1.absSaVectorTileLayers(`https://storage.googleapis.com/geostack-data/spark/Public/`).map(sa => {
                    sa.onClick = this.slrInputLayer;
                    return sa;
                }),
            ];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            //     ["date", "area_innundated", " price"]
            // 1: (3) ["2008-12-31T13:00:00Z", "1.4602873733329729", "1020000"]
            // 2: (3) ["2039-12-31T13:00:00Z", "2.149781191496634", "6120000"]
            // 3: (3) ["2069-12-31T13:00:00Z", "4.203068965320275", "228990000"]
            // 4: (3) ["2099-12-31T13:00:00Z", "14.328625380809616", "1911480000"]
            // length: 5
            // __proto__: Array(0)
            if (this.outputs.output !== {}) {
                const output = this.outputs.output.data
                    .replace(/[\r]+/g, "")
                    .split("\n")
                    .map(row => (row !== "" ? row.split(",") : undefined))
                    .filter(row => row !== undefined);
                const parsedOutput = output.reduce((acc, row, idx) => {
                    if (idx !== 0) {
                        acc["date"].push(parseInt(row[0].split("-")[0], 10) + 1);
                        acc["area_innundated"].push(parseFloat(row[1]));
                        acc["price"].push(parseFloat(row[2]));
                    }
                    return acc;
                }, { date: [], area_innundated: [], price: [] });
                this.layerService.createNewChart({
                    chart: c3_1.generate({
                        title: { text: `Land parcels loss` },
                        data: {
                            // labels: { format: format(".2f") },
                            x: "x",
                            columns: [
                                ["x", ...parsedOutput["date"]],
                                ["Area Inundated", ...parsedOutput["area_innundated"]],
                                ["Price", ...parsedOutput["price"]],
                            ],
                            axes: {
                                "Area Inundated": "y",
                                Price: "y2",
                            },
                        },
                        axis: {
                            x: {
                                label: {
                                    text: "Year",
                                    position: "outer-center",
                                },
                                tick: { culling: false },
                                min: 2009,
                                max: 2100,
                            },
                            y: {
                                label: {
                                    text: `Area Inundated %`,
                                    position: "outer-middle",
                                },
                                tick: { format: num => `${d3_1.format(".2f")(num)} %` },
                                min: 0,
                            },
                            y2: {
                                label: {
                                    text: `Price $`,
                                    position: "outer-middle",
                                },
                                min: 0,
                                tick: { format: string_1.formatCurrency },
                                show: true,
                            },
                        },
                        legend: { position: "inset" },
                    }),
                });
            }
            return [];
        });
    }
}
exports.ClimateSlrJob = ClimateSlrJob;


/***/ }),

/***/ "./src/app/jobs/job-types/climate/temp-job.ts":
/*!****************************************************!*\
  !*** ./src/app/jobs/job-types/climate/temp-job.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/climate/form-model.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const dates_1 = __webpack_require__(/*! ../../../../../../shared/src/util/dates */ "../shared/src/util/dates.ts");
const geoblaze_1 = __webpack_require__(/*! geoblaze */ "./node_modules/geoblaze/dist/geoblaze.node.min.js");
const map_editable_feature_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const array_1 = __webpack_require__(/*! ../../../../../../shared/src/util/array */ "../shared/src/util/array.ts");
const c3_1 = __webpack_require__(/*! c3 */ "./node_modules/c3/c3.js");
const d3_1 = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
const abs_sa_vector_tile_layers_1 = __webpack_require__(/*! ../shared/abs-sa-vector-tile-layers */ "./src/app/jobs/job-types/shared/abs-sa-vector-tile-layers.ts");
class ClimateTempJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.CLIMATE_TEMP;
        this.clientOnly = true;
        this.inputFormModel = form_model_1.testFormRootModel;
        this.resultsCache = new Map();
    }
    runTemperatureProcess(feature) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof feature === "undefined") {
                return;
            }
            const resultsKey = `${this.templayer.dimensions.rcp.selected.value}_${this.templayer.dimensions.temp.selected.value}`;
            if (this.previousResultsKey === resultsKey) {
                return;
            }
            this.previousResultsKey = resultsKey;
            if (!this.resultsCache.has(resultsKey)) {
                this.resultsCache.set(resultsKey, yield Promise.all(array_1.flattenArray(
                // For each year
                this.templayer.dimensions.year.options.map(year => 
                // For each month
                this.templayer.dimensions.month.options.map((month) => __awaiter(this, void 0, void 0, function* () {
                    // Get mean value for each temperature theshold layer
                    const geotiff = yield this.layerService.getGeotiffData(`https://storage.googleapis.com/geostack-data/spark/Public/aus-temp-thresholds/${this.templayer.dimensions.rcp.selected.value}_${this.templayer.dimensions.temp.selected.value}_${year.value}${month.value}01-3857.geotiff`, `${this.templayer.dimensions.rcp.selected.value} ${this.templayer.dimensions.temp.selected.value} ${year.value}-${month.value}`);
                    const meanMonth = geoblaze_1.mean(geotiff, turf_1.toMercator(feature));
                    return meanMonth;
                }))))));
            }
            const results = this.resultsCache.get(resultsKey);
            const _self = this;
            this.layerService.createNewChart({
                chart: c3_1.generate({
                    title: {
                        text: `Days above ${_self.templayer.dimensions.temp.selected.label} C`,
                    },
                    data: {
                        // labels: { format: format(".2f") },
                        x: "x",
                        columns: [
                            [
                                "x",
                                ...Array(12)
                                    .fill(0)
                                    .map((val, index) => index),
                            ],
                            ["2030", ...results.slice(0, 12)],
                            ["2090", ...results.slice(12, 24)],
                        ],
                    },
                    tooltip: {
                        format: {
                            value: (value, ratio, id) => `${d3_1.format(".2f")(value)} days above ${_self.templayer.dimensions.temp.selected.label} C`,
                        },
                    },
                    axis: {
                        x: {
                            label: {
                                text: "Month",
                                position: "outer-center",
                            },
                            tick: {
                                culling: false,
                                format: (num) => dates_1.months[num].substr(0, 3),
                            },
                            min: 0,
                            max: 11,
                        },
                        y: {
                            label: {
                                text: `Days`,
                                position: "outer-middle",
                            },
                            min: 0,
                            max: 31,
                        },
                    },
                    legend: { position: "inset" },
                }),
            });
        });
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.temperatureInputLayer = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Temperature process inputs");
            this.temperatureInputLayer.hideLayer = true;
            this.temperatureInputLayer.singleFeature = true;
            // this.temperatureInputLayer.shapeOptions = { color: "#ff0000" }
            this.temperatureInputLayer.toolbarButtonOptions.polygon = {
                title: "Add Temperature polygon",
                primaryFaIcon: ["fas", "shapes"],
            };
            if (typeof this.tempInputLayerSubscription !== "undefined") {
                this.tempInputLayerSubscription.unsubscribe();
                delete this.tempInputLayerSubscription;
            }
            this.tempInputLayerSubscription = this.temperatureInputLayer.featureCollectionObservable.subscribe(((fc) => {
                this.resultsCache.clear();
                delete this.previousResultsKey;
                if (fc.features.length === 0) {
                    this.layerService.removeChart();
                }
                else if (typeof this.templayer !== "undefined") {
                    this.runTemperatureProcess(fc);
                }
            }).bind(this));
            const tempLayerOnClear = this.temperatureInputLayer.onObservable.subscribe(on => {
                if (on === "delete") {
                    this.tempInputLayerSubscription.unsubscribe();
                    tempLayerOnClear.unsubscribe();
                }
            });
            yield this.temperatureInputLayer.show();
            const jobInputPath = `https://storage.googleapis.com/geostack-data/spark/Public/aus-temp-thresholds/`;
            this.templayer = new map_geotiff_layer_1.RasterMultiLayer("Aus temperature thresholds", {
                rcp: {
                    key: "rcp",
                    label: "Emissions scenario",
                    options: [
                        {
                            value: `rcp45`,
                            label: `rcp45`,
                        },
                        {
                            value: `rcp85`,
                            label: `rcp85`,
                        },
                    ],
                    selected: { value: "rcp85", label: "rcp85" },
                },
                temp: {
                    key: "temp",
                    label: "Temperature",
                    options: Array(16)
                        .fill(0)
                        .map((val, index) => {
                        return {
                            value: `DGr${index + 30}`,
                            label: `${index + 30} degrees`,
                        };
                    }),
                    selected: { value: "DGr40", label: "40 degrees" },
                },
                month: {
                    key: "month",
                    label: "Month",
                    options: Array(12)
                        .fill(0)
                        .map((val, index) => {
                        return {
                            value: string_1.pad0s(index + 1, 2),
                            label: dates_1.months[index],
                        };
                    }),
                    selected: { value: "01", label: dates_1.months[0] },
                },
                year: {
                    label: "Year",
                    key: "year",
                    options: [
                        {
                            value: "2030",
                            label: "2030",
                        },
                        {
                            value: "2090",
                            label: "2090",
                        },
                    ],
                    selected: { value: "2090", label: "2090" },
                },
            }, dimensions => `${jobInputPath}${dimensions.rcp.selected.value}_${dimensions.temp.selected.value}_${dimensions.year.selected.value}${dimensions.month.selected.value}01-3857.geotiff`);
            this.templayer.minValue = 0;
            this.templayer.maxValue = 31;
            this.templayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateMagma");
            this.templayer.colourScheme.reversed = true;
            this.templayer.legendCells = [0, 5, 10, 15, 20, 25, 30, 31];
            this.templayer.valueFormatFn = d => {
                return d === 1
                    ? `${string_1.toFixedDrop0s(d, 2)} day`
                    : `${string_1.toFixedDrop0s(d, 2)} days`;
            };
            yield this.templayer.show();
            this.templayer.opacity = 80;
            this.templayer.onRenderObservable.subscribe(() => {
                const fc = this.temperatureInputLayer.featureCollection;
                if (fc.features.length > 0) {
                    this.runTemperatureProcess(fc);
                }
            });
            return [
                this.temperatureInputLayer,
                this.templayer,
                ...abs_sa_vector_tile_layers_1.absSaVectorTileLayers("https://storage.googleapis.com/geostack-data/spark/Public/").map(sa => {
                    sa.onClick = this.temperatureInputLayer;
                    return sa;
                }),
            ];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    setBbox() {
        if (typeof this.templayer !== "undefined") {
            this.boundingBox4326 = this.templayer.data.bbox4326;
        }
    }
}
exports.ClimateTempJob = ClimateTempJob;


/***/ }),

/***/ "./src/app/jobs/job-types/ees/client-job.ts":
/*!**************************************************!*\
  !*** ./src/app/jobs/job-types/ees/client-job.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const inputs_outputs_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/emv2/inputs-outputs */ "../shared/src/job/job-types/emv2/inputs-outputs.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/ees/form-model.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const job_base_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-base */ "../shared/src/job/job-base.ts");
const map_editable_feature_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
//deck gl installed to main package
const geo_layers_1 = __webpack_require__(/*! @deck.gl/geo-layers */ "./node_modules/@deck.gl/geo-layers/dist/esm/index.js");
const mapbox_1 = __webpack_require__(/*! @deck.gl/mapbox */ "./node_modules/@deck.gl/mapbox/dist/esm/index.js");
const layers_1 = __webpack_require__(/*! @deck.gl/layers */ "./node_modules/@deck.gl/layers/dist/esm/index.js");
class EES extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.EES;
        this.inputFormModel = form_model_1.eesFormRootModel;
        this.inputShapeFc = turf_1.featureCollection([]);
        this.ignitionStartTime = "1300";
        this.step = 1;
        this.mapboxStyle = "mapbox://styles/mapbox/dark-v10";
        //complete this
        this.playAnimation = true;
    }
    init() {
        this.inputs = new inputs_outputs_1.Emv2JobInputs();
        this.outputs = new inputs_outputs_1.Emv2JobOutputs();
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.inputShape = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Input polygon", this.inputs.fireRasterSelectionGeometry);
            // this.slrInputLayer.shapeOptions = { color: "#000000" }
            this.inputShape.toolbarButtonOptions.polygon = {
                title: "Add input polygon",
                primaryFaIcon: ["fas", "shapes"],
            };
            this.inputShape.opacity = 50;
            this.inputShape.singleFeature = true;
            this.inputShape.featureCollectionObservable.subscribe(((inputFeatures) => {
                if (typeof this.ffdiSummaryFc !== "undefined" &&
                    inputFeatures.features.length > 0) {
                    const allPointsMatch = turf_1.pointsWithinPolygon(this.ffdiSummaryFc, inputFeatures);
                    this.inputs.fireRasterSelection = [];
                    if (this.inputs.fireRasterFilter.length === 0) {
                        this.inputs.fireRasterSelection = allPointsMatch.features.map(feature => `cell_ffdi30_${feature.properties.simulationid}.tif`);
                    }
                    else {
                        this.inputs.fireRasterSelection = allPointsMatch.features
                            .filter(feature => {
                            let match = true;
                            for (let filterIndex = 0; filterIndex < this.inputs.fireRasterFilter.length; filterIndex++) {
                                const filter = this.inputs.fireRasterFilter[filterIndex];
                                match =
                                    match &&
                                        typeof feature.properties[filter.key] !== "undefined" &&
                                        (filter.min === null ||
                                            feature.properties[filter.key] > filter.min) &&
                                        (filter.max === null ||
                                            feature.properties[filter.key] < filter.max);
                            }
                            return match;
                        })
                            .map(feature => `cell_ffdi30_${feature.properties.simulationid}.tif`);
                    }
                }
            }).bind(this));
            //await this.inputShape.show()
            // this.ffdiSummaryFc = await this.layerService.getFile(
            //   await this.jobService.resolveDirTree(
            //     `geostack-data/spark/Public/cell_ffdi30_genericstatewide.geojson`,
            //     FileLocation.GCS
            //   ),
            //   ResponseType.JSON,
            //   "cell_ffdi30_genericstatewide.geojson",
            //   true
            // )
            this.firePointsLayer = new mapbox_gl_layer_1.MapboxGlLayer("Fire points", {
                id: "fires",
                type: "circle",
                source: "fires",
                paint: {
                    "circle-radius": [
                        "interpolate",
                        ["linear"],
                        ["zoom"],
                        1,
                        1,
                        8,
                        2,
                        22,
                        20,
                    ],
                },
            }, 
            // "numcells": 8.0,
            {
                id: "fires",
                source: {
                    type: "geojson",
                    data: this.ffdiSummaryFc,
                    cluster: true,
                    clusterMaxZoom: 9,
                    clusterRadius: 1,
                    clusterProperties: {
                        numcells: ["max", ["get", "numcells"]],
                        max_flame_ht: ["max", ["get", "max_flame_ht"]],
                        max_e_ros: ["max", ["get", "max_e_ros"]],
                        max_e_intsty: ["max", ["get", "max_e_intsty"]],
                        flow: ["max", ["get", "flow"]],
                    },
                },
            });
            this.firePointsLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateYlOrRd");
            this.firePointsLayer.colourByProperty = {
                options: [
                    {
                        label: "Fire extent",
                        key: "numcells",
                        minValue: 0,
                        maxValue: 10000,
                    },
                    {
                        label: "Max flame height",
                        key: "max_flame_ht",
                        minValue: 0,
                        maxValue: 50,
                    },
                    {
                        label: "Max flame intensity",
                        key: "max_e_ros",
                        minValue: 0,
                        maxValue: 5000,
                    },
                ],
                selected: {
                    label: "Fire extent",
                    key: "numcells",
                    minValue: 0,
                    maxValue: 10000,
                },
            };
            this.firePointsLayer.opacity = 100;
            this.firePointsLayer.onClick = (point) => __awaiter(this, void 0, void 0, function* () {
                const features = this.firePointsLayer.getFeaturesAtPoint(point, 3);
                if (features.length === 0) {
                    return;
                }
                if (features.length > 1 || features[0].properties.clustered) {
                    this.layerService.mapboxGl.easeTo({
                        around: point.latlng,
                        zoom: this.layerService.mapboxGl.getZoom() + 1,
                    });
                    return;
                }
                // FIXME: change simulation id to geotiff filename...
                if (typeof features[0].properties.simulationid !== "undefined") {
                    const fireRasterName = `cell_ffdi30_${features[0].properties.simulationid}.tif`;
                    this.selectedFireLayer.setData(yield this.jobService.resolveDirTree(`geostack-data/spark/Public/all-ffdi30/${fireRasterName}`, interfaces_1.FileLocation.GCS));
                    if (!this.selectedFireLayer.visible) {
                        //this.selectedFireLayer.show()
                    }
                    // If job has finished -> show road network on selection
                    if (this.status === job_base_1.JobStatus.FINISHED &&
                        this.inputs.fireRasterSelection.includes(fireRasterName)) {
                        ;
                        this.layerService.mapboxGl.getSource(this.roadNetworkLayer.sourceId).setData(yield this.layerService.getFile(yield this.jobService.resolveDirTree(`${this.configService.serverConfig.GCP_GCS_BUCKET_NAME}/${this.configService.serverConfig.OBJECT_STORAGE_PATH_JOB_PREFIX}${inputs_outputs_1.emv2SubjobName(this.name, fireRasterName)}/${this.inputs.outputGeojson.path}`, this.outputStorageMode), rest_api_service_1.ResponseType.JSON));
                    }
                }
            });
            //await this.firePointsLayer.show()
            this.selectedFireLayer = new map_geotiff_layer_1.RasterLayer("Selected fire", undefined);
            this.selectedFireLayer.hideLayer = true;
            this.selectedFireLayer.minValue = 0;
            this.selectedFireLayer.maxValue = 12;
            const populationWms = new mapbox_gl_layer_1.MapboxGlLayer("Population", {
                id: "population",
                type: "raster",
                source: "population",
            }, {
                id: "population",
                source: {
                    type: "raster",
                    tiles: [
                        `${this.configService.serverConfig.GEOSERVER_URL}abs/wms?bbox={bbox-epsg-3857}&format=image/png&transparent=true&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&width=256&height=256&layers=abs:abs-pop-grid-2018-epsg3577`,
                    ],
                    tileSize: 256,
                },
            });
            // await populationWms.show()
            this.testLayer = new mapbox_gl_layer_1.MapboxGlLayer("Testlayer", {
                id: "test",
                type: "circle",
                source: "test",
            }, {
                id: "test",
                source: {
                    type: "geojson",
                    data: "http://localhost:12345/populations/map-test.geojson",
                },
            });
            //Load population in this region
            this.testLayer.population = {
                options: [
                    {
                        name: "any"
                    },
                    {
                        name: "Anglesea Weekday 10,000 Persons",
                    },
                ],
                selected: {
                    name: "any",
                },
            };
            //Testing animating points
            // San Francisco
            var origin = [115.8605, -31.9505];
            // Washington DC
            var destination = [144.9631, -37.8136];
            // A simple line from origin to destination.
            var route = {
                'type': 'FeatureCollection',
                'features': [
                    {
                        'type': 'Feature',
                        'geometry': {
                            'type': 'LineString',
                            'coordinates': [origin, destination]
                        }
                    }
                ]
            };
            // A single point that animates along the route.
            // Coordinates are initially set to origin.
            var point = {
                'type': 'FeatureCollection',
                'features': [
                    {
                        'type': 'Feature',
                        'properties': {},
                        'geometry': {
                            'type': 'Point',
                            'coordinates': origin
                        }
                    }
                ]
            };
            const animation_route = new mapbox_gl_layer_1.MapboxGlLayer("routeLayer", {
                id: "anime",
                type: "line",
                source: "route",
                'paint': {
                    'line-width': 2,
                    'line-color': '#007cbf'
                }
            }, {
                id: "route",
                source: {
                    type: "geojson",
                    data: route,
                },
            });
            //animation point
            const animation_point = new mapbox_gl_layer_1.MapboxGlLayer("pointLayer", {
                id: "plane",
                type: "circle",
                source: "plane",
            }, {
                id: "plane",
                source: {
                    type: "geojson",
                    data: point,
                },
            });
            var radius = 20;
            function pointOnCircle(angle) {
                return {
                    'type': 'Point',
                    'coordinates': [Math.cos(angle) * radius, Math.sin(angle) * radius]
                };
            }
            // animate point circle
            const animation_circle = new mapbox_gl_layer_1.MapboxGlLayer("pointLayer", {
                id: "circle",
                type: "circle",
                source: "circles",
            }, {
                id: "circles",
                source: {
                    type: "geojson",
                    data: pointOnCircle(0),
                },
            });
            //making animation
            // Start the animation.
            //animateMarker(0);
            // this.layerService.mapboxGl.on('load', function () {
            //   function animateMarker(timestamp) {
            //     // Update the data to a new position based on the animation timestamp. The
            //     // divisor in the expression `timestamp / 1000` controls the animation speed.
            //     this.layerService.mapboxGl.getSource('circles').setData(pointOnCircle(timestamp / 1000));
            //     // Request the next frame of the animation.
            //     requestAnimationFrame(animateMarker);
            //   }
            //   animateMarker(0);
            // });
            //Implemeting deck.gl trip layer
            // const tripLayer = new TripsLayer({
            //   id: 'trips-layer',
            //   data: "http://localhost:12345/populations/waypoints.json",
            //   getPath: d => d.waypoints.map(p => p.coordinates),
            //   // deduct start timestamp from each data point to avoid overflow
            //   getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),
            //   getColor: [253, 128, 93],
            //   opacity: 0.8,
            //   widthMinPixels: 5,
            //   rounded: true,
            //   trailLength: 200,
            //   currentTime: 100
            // });
            // Create a mapbox-compatible deck.gl layer
            const myDeckLayer = new mapbox_1.MapboxLayer({
                id: 'my-scatterplot',
                type: layers_1.ScatterplotLayer,
                data: [
                    { position: [115.8605, -31.9505], size: 100000 }
                ],
                getPosition: d => d.position,
                getRadius: d => d.size,
                getColor: [255, 0, 0]
            });
            //this.layerService.mapboxGl.addLayer(myDeckLayer)
            //MapboxGlLayer.setLayerService(myDeckLayer)
            var dataURL_Brimbank = "http://localhost:12345/populations/trips_brimbank.json";
            //var dataURL_MaldonTest = "http://localhost:12345/populations/trip_test_maldon.json"
            //this.dataURL_MaldonTest = "http://localhost:12345/populations/output_events_maldon.json"
            this.dataURL_MaldonTest = "http://localhost:12345/populations/trips.deckgl.json";
            //this.dataURL_MaldonTest = "http://localhost:12345/populations/output_events_maldon_2000.json"
            //this.dataURL_MaldonTest = "http://localhost:12345/populations/output_events_maldon_500.json"
            var dataURL_Uber = "https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json";
            // this.tripsLayer = new MapboxLayer({
            //   id: 'trips',
            //   type: TripsLayer,
            //   data: dataURL_Uber,
            //   getPath: d => d.path,
            //   getTimestamps: d => d.timestamps,
            //   getColor: d => (d.vendor === 0 ? [253, 128, 93] : [23, 184, 190]),
            //   opacity: 0.5,
            //   widthMinPixels: 2,
            //   rounded: true,
            //   trailLength: 100,
            //   currentTime: 180
            // });
            // //this.layerService.mapboxGl.addLayer(tripsLayer)
            // if (this.layerService.mapboxGl.addLayer(this.tripsLayer)) {
            //   this.animate()
            // }
            //Brimbank car simulation test
            // this.brimBankLayer = new MapboxLayer({
            //   id: 'brimbank',
            //   type: TripsLayer,
            //   data: dataURL_Brimbank,
            //   getPath: d => d.path,
            //   getTimestamps: d => d.timestamps,
            //   getColor: d => (d.vendor === 0 ? [253, 128, 93] : [23, 184, 190]),
            //   opacity: 0.5,
            //   widthMinPixels: 2,
            //   rounded: true,
            //   trailLength: 100,
            //   currentTime: 1000
            // });
            // if (this.layerService.mapboxGl.addLayer(this.brimBankLayer)) {
            //   this.animateBrimbankTraffic()
            // }
            //Maldon test vehicle 9
            // Retrieve the timestamp of fisrt event and last event
            let Data = yield this.layerService.getFile(this.dataURL_MaldonTest, rest_api_service_1.ResponseType.JSON, ".json", false);
            let lenght = Data.length;
            this.animationStart = Data[lenght - 1].start;
            this.animationFinish = Data[lenght - 1].finish;
            // this.animationStart = 47406
            // this.animationFinish = 50000
            this.maldonTestLayer = new mapbox_1.MapboxLayer({
                id: 'maldonTestLayer',
                type: geo_layers_1.TripsLayer,
                data: this.dataURL_MaldonTest,
                getPath: d => d.path,
                getTimestamps: d => (d.timestamps),
                getColor: d => (d.colours),
                opacity: 0.4,
                widthMinPixels: 4,
                rounded: true,
                trailLength: 80,
                currentTime: 47500
            });
            if (this.layerService.mapboxGl.addLayer(this.maldonTestLayer)) {
                this.animateMaldonTest();
            }
            // Animate fire
            let dataURL_Fire = "http://localhost:12345/phoenix/20181109_mountalex_evac_ffdi50d_grid.json";
            this.layerService.clearFileCache();
            let fireData = yield this.layerService.getFile(dataURL_Fire, rest_api_service_1.ResponseType.JSON, ".json", false);
            var features = fireData.features;
            console.log("fetures" + features);
            // first sort
            features.sort(function (a, b) {
                if (a.properties.HOUR_BURNT === null)
                    return -1;
                if (b.properties.HOUR_BURNT === null)
                    return 1;
                else
                    return a.properties.HOUR_BURNT - b.properties.HOUR_BURNT;
            });
            // now we can efficiently set up sources
            var stepMinutes = this.step;
            const lastFeature = features[features.length - 1];
            console.log("last feature " + JSON.stringify(lastFeature));
            const totalMinutes = lastFeature.properties.HOUR_BURNT * 60;
            console.log("total min" + totalMinutes);
            this.totalSteps = Math.ceil(totalMinutes / stepMinutes);
            console.log("total steps" + this.totalSteps);
            var j = 0;
            // skip nulls
            while (features[j].properties.HOUR_BURNT === null)
                j++;
            // generate a geojson object for each step
            // console.log("size" + j)
            for (var i = 0; i < this.totalSteps; i++) {
                // set a threshold
                var threshold = (i * stepMinutes) / 60;
                // create a fresh geojson structure for this layer
                //console.log("threhold" + threshold)
                var sect = {
                    type: "FeatureCollection",
                    features: []
                };
                // add all features below the minutes threshold to this structure
                while (features[j].properties.HOUR_BURNT < threshold) {
                    sect.features.push(features[j]);
                    j++;
                }
                // create this layer
                var stepStr = i.toString();
                var layer = "phoenix-layer" + stepStr;
                var source = "phoenix-source" + stepStr;
                var fireLayer = new mapbox_gl_layer_1.MapboxGlLayer(layer, {
                    id: layer,
                    type: "fill",
                    source: source,
                    layout: {
                        visibility: "none"
                    },
                    paint: {
                        "fill-color": {
                            property: "E_INTSTY",
                            stops: [[0, "#ffc107"], [100000, "#dc3545"]]
                        },
                        "fill-opacity": 0.4
                    }
                }, {
                    id: source,
                    source: {
                        type: "geojson",
                        data: sect,
                    },
                });
                fireLayer.show();
            }
            yield this.layerService.mapboxGl.flyTo({
                center: [
                    144.0670376999567,
                    -36.994795474253195
                ],
                speed: 0.5,
                zoom: 10
            });
            //this.animateFire()
            // var j = 1300
            // for (var k = 0; k < 6; k++) {
            //   // if (k = 0) {
            //   //   j = 1300
            //   // }
            //   // this.filterFireLayer(j.toString())
            //   console.log(k)
            //   console.log(j)
            //   j += 10
            // }
            // console.log(j)
            // var counter = 0
            // var j = 1300
            // var fireSimulationStartStep = Math.floor(this.animationStart / 60)
            // var fireSimulationStopStep = Math.floor(this.animationFinish / 60)
            // var counter = fireSimulationStartStep
            // setInterval(function () {
            //   if (counter >= fireSimulationStopStep) {
            //     counter = fireSimulationStartStep
            //   }
            //   this.filterFireLayer(counter)
            //   counter = counter + this.step
            // }.bind(this), 1000);
            // var fireSimulationStartStep = Math.floor(this.animationStart / 60)
            // console.log("fireS1sim" + fireSimulationStartStep)
            //  console.log("fireS2sim" + fireSimulationStopStep)
            // fireSimulationStartStep - Actual time in minutes
            //this.filterFireLayer(fireSimulationStartStep)
            // creation of population subgroup layer
            var data_url = 'http://localhost:12345/populations/surf_coast_shire_SA1.json';
            // var data_url = 'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'
            var zonesHover = new mapbox_gl_layer_1.MapboxGlLayer('settlement-label', {
                id: 'zones',
                type: "fill",
                source: 'zonedata',
                paint: {
                    'fill-outline-color': 'rgba(200, 100, 240, 1)',
                    'fill-color': '#627BC1'
                }
            }, {
                id: 'zonedata',
                source: {
                    type: "geojson",
                    data: data_url,
                    generateId: true,
                },
            });
            zonesHover.show();
            var populationSubgroupLayer = new mapbox_gl_layer_1.MapboxGlLayer('settlement-label', {
                id: 'zones-highlighted',
                type: "fill",
                source: 'subgroups',
                paint: {
                    'fill-outline-color': '#484896',
                    'fill-color': 'rgba(200, 100, 240, 1)',
                    'fill-opacity': 0.75
                },
                filter: ['in', 'COUNTY', '']
            }, {
                id: 'subgroups',
                source: {
                    type: "geojson",
                    data: data_url,
                    generateId: true
                },
            });
            populationSubgroupLayer.show();
            // this.layerService.mapboxGl.addSource('states', {
            //   'type': 'geojson',
            //   'data':
            //     'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'
            // });
            // this.layerService.mapboxGl.addLayer({
            //   'id': 'state-fills',
            //   'type': 'fill',
            //   'source': 'states',
            //   'layout': {},
            //   'paint': {
            //     'fill-color': '#627BC1',
            //     'fill-opacity': [
            //       'case',
            //       ['boolean', ['feature-state', 'hover'], false],
            //       1,
            //       0.5
            //     ]
            //   }
            // });
            // feature state for the feature under the mouse.
            // var hoveredStateId = null
            // this.layerService.mapboxGl.on('mousemove', 'zone-hover', function (e) {
            //   console.log("mousemove")
            //   if (e.features.length > 0) {
            //     console.log("mousemove1")
            //     if (hoveredStateId) {
            //       console.log("mousemove2")
            //       this.layerService.mapboxGl.map.setFeatureState(
            //         { source: 'zonehover', id: hoveredStateId },
            //         { hover: false }
            //       );
            //     }
            //     //this.layerService.mapboxGl
            //     console.log("mousemove3")
            //     //console.log(e.features[0])
            //     //console.log(e.features[0].id)
            //     hoveredStateId = e.features[0].id;
            //     this.layerService.mapboxGl.map.setFeatureState(
            //       { source: 'zonehover', id: hoveredStateId },
            //       { hover: true }
            //     );
            //   }
            // });
            // // When the mouse leaves the state-fill layer, update the feature state of the
            // // previously hovered feature.
            // this.layerService.mapboxGl.on('mouseleave', 'zone-hover', function () {
            //   console.log("mouseleave")
            //   if (hoveredStateId) {
            //     this.layerService.mapboxGl.setFeatureState(
            //       { source: 'zonehover', id: hoveredStateId },
            //       { hover: false }
            //     );
            //   }
            //   hoveredStateId = null;
            // });
            this.layerService.mapboxGl.on('click', 'subgroups-layer', function (e) {
                //console.log(e.features[0].properties.SA1_MAIN16
            });
            return [];
        });
    }
    showPop() {
        console.log("hereeeee");
    }
    //animate uber traffic in Newyork
    animateFire() {
        const loopLength = 10;
        const animationSpeed = 60;
        const timestamp = Date.now() / 1000;
        const loopTime = loopLength / animationSpeed;
        const currentTime = ((timestamp % loopTime) / loopTime) * loopLength;
        //this.tripsLayer.setProps({ currentTime });
        console.log(currentTime);
        this.animationFrame = requestAnimationFrame(this.animate.bind(this));
    }
    //animate uber traffic in Newyork
    animate() {
        const loopLength = 1800;
        const animationSpeed = 60;
        const timestamp = Date.now() / 1000;
        const loopTime = loopLength / animationSpeed;
        const currentTime = ((timestamp % loopTime) / loopTime) * loopLength;
        this.tripsLayer.setProps({ currentTime });
        this.animationFrame = requestAnimationFrame(this.animate.bind(this));
    }
    //brimbank traffic simulation
    animateBrimbankTraffic() {
        const loopLength = 1800;
        const animationSpeed = 30;
        const timestamp = Date.now() / 1000;
        const loopTime = loopLength / animationSpeed;
        var currentTime;
        if (((timestamp % loopTime) / loopTime) * loopLength < 1000) {
            currentTime = ((timestamp % loopTime) / loopTime) * loopLength + 1000;
        }
        else {
            currentTime = ((timestamp % loopTime) / loopTime) * loopLength;
        }
        console.log("currentTime" + currentTime);
        this.brimBankLayer.setProps({ currentTime });
        this.animationFrame = requestAnimationFrame(this.animateBrimbankTraffic.bind(this));
    }
    //animate maldon test
    animateMaldonTest() {
        //29496 -30
        //8133 -60
        //maldon lenght 3500 if 47100 
        const loopLength = (this.animationFinish - this.animationStart);
        const animationSpeed = 60;
        const timestamp = Date.now() / 1000;
        const loopTime = loopLength / animationSpeed;
        var currentTime;
        var before;
        if (((timestamp % loopTime) / loopTime) * loopLength < (this.animationStart) || (this.animationStart)) {
            currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.animationStart);
        }
        else {
            currentTime = ((timestamp % loopTime) / loopTime) * loopLength;
        }
        //console.log("currentTime maldon" + currentTime / 60)
        var step = Math.floor(currentTime / 60);
        this.filterFireLayer(step);
        this.maldonTestLayer.setProps({ currentTime });
        this.animationFrame = requestAnimationFrame(this.animateMaldonTest.bind(this));
    }
    stopAnimation() {
        var currentTime = 100;
        this.maldonTestLayer.setProps({ currentTime });
        this.animationFrame = requestAnimationFrame(this.stopAnimation.bind(this));
    }
    filterFireLayer(stepMinutes) {
        //console.log("received" + stepMinutes)
        let fireStartStep = ((parseInt(this.ignitionStartTime.slice(0, 2)) * 60 + parseInt(this.ignitionStartTime.slice(2))) / this.step);
        //console.log("fireStartStep" + fireStartStep)
        //const fireStartStep = 78
        var totalLayers = this.totalSteps;
        // var fireStep = stepMinutes / 10
        //var fireStep = ((parseInt(stepMinutes.slice(0, 2)) * 60 + parseInt(stepMinutes.slice(2))) / this.step)
        var fireStep = (stepMinutes / this.step);
        //console.log("fireStep" + fireStep)
        for (var i = 0; i < totalLayers; i++) {
            var layer = "phoenix-layer" + i.toString();
            if (i + fireStartStep <= fireStep)
                this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "visible");
            else
                this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "none");
        }
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            const layers = [];
            this.roadNetworkLayer = new mapbox_gl_layer_1.MapboxGlLayer(`Road network`, {
                id: `road-network`,
                type: "line",
                source: `road-network`,
                paint: {
                    "line-width": [
                        "interpolate",
                        ["linear"],
                        ["get", "diameter"],
                        0.5,
                        1,
                        3,
                        4,
                    ],
                },
            }, {
                id: `road-network`,
                source: {
                    type: "geojson",
                    data: turf_1.featureCollection([]),
                },
            });
            this.roadNetworkLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateGnBu");
            this.roadNetworkLayer.minValue = 0;
            this.roadNetworkLayer.maxValue = 5000;
            this.roadNetworkLayer.colourByProperty = {
                options: [
                    { key: "head", label: "Pressure" },
                    { key: "score", label: "Evacuation Score" },
                    { key: "flow", label: "Flow" },
                ],
                selected: { key: "flow", label: "flow" },
            };
            // await this.roadNetworkLayer.show()
            layers.push(this.roadNetworkLayer);
            // this.selectedFireLayer.setData(
            //   `${this.configService.getMasterPublicFilesUrl()}${
            //     this.inputs.fireRasterBaseDirectory.path
            //   }${this.inputs.fireRasterSelection[0]}`
            // )
            // if (!this.selectedFireLayer.visible) {
            //   await this.selectedFireLayer.show()
            // }
            // Check if flow and pressure have been added to firePointsLayer
            if (typeof this.firePointsLayer.colourByProperty !== "undefined" &&
                "options" in this.firePointsLayer.colourByProperty &&
                this.firePointsLayer.colourByProperty.options.findIndex(option => option.label === "Flow") === -1) {
                const dataToJoin = this.outputs.stats.map(result => {
                    return {
                        featureValue: parseInt(result.geotiffFilename.replace(/cell_ffdi30_|\.tif/g, ""), 10),
                        dataValue: result.flow,
                    };
                });
                const flowColProperty = {
                    label: "Flow",
                    key: "simulationid",
                    minValue: 0,
                    maxValue: 5000,
                    dataToJoin,
                };
                this.firePointsLayer.colourByProperty.options.push(flowColProperty);
                this.firePointsLayer.colourByProperty.selected = flowColProperty;
                yield this.firePointsLayer.updateLayer();
            }
            return layers;
        });
    }
    toJSON() {
        return super.toJSON();
    }
    setBbox() {
        if (typeof this.inputs.fireRasterSelectionGeometry !== "undefined" &&
            this.inputs.fireRasterSelectionGeometry.features.length > 0) {
            this.boundingBox4326 = turf_1.bbox(this.inputs.fireRasterSelectionGeometry);
        }
    }
}
exports.EES = EES;


/***/ }),

/***/ "./src/app/jobs/job-types/ees/form-model.ts":
/*!**************************************************!*\
  !*** ./src/app/jobs/job-types/ees/form-model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const form_interfaces_1 = __webpack_require__(/*! ../../../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../../../shared/src/user/user */ "../shared/src/user/user.ts");
var Emv2FormModeKey;
(function (Emv2FormModeKey) {
    Emv2FormModeKey["Basic"] = "basic";
})(Emv2FormModeKey = exports.Emv2FormModeKey || (exports.Emv2FormModeKey = {}));
exports.eesFormRootModel = new form_interfaces_1.FormRootModel();
exports.eesFormRootModel.subjectPropertyKey = "inputs";
exports.eesFormRootModel.modes = [
    {
        key: Emv2FormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.User, user_1.GeowebUserRoles.Admin],
    },
];
exports.eesFormRootModel.defaultMode = exports.eesFormRootModel.modes[0];
exports.eesFormRootModel.schemaFactory = () => {
    return [
        {
            name: "Basic",
            modeKeys: [Emv2FormModeKey.Basic],
            form: {
                layout: {
                    fireRasterFilter: {
                        grid: {
                            container: "ui-g-12",
                            group: "ui-g-12",
                            label: "ui-g-12",
                        },
                        element: {
                            group: "formgroup-container formgroup-tabular",
                            children: "formgroup-tabular-child",
                            container: "formgroup-container",
                            label: "formgroup-label",
                        },
                    },
                    min: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                    max: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                    key: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                },
                model: [
                    new core_1.DynamicFormArrayModel({
                        id: "fireRasterFilter",
                        label: "Filter",
                        initialCount: 0,
                        groupFactory: () => [
                            new core_1.DynamicSelectModel({
                                id: `key`,
                                label: "Key",
                                options: [
                                    {
                                        label: "Size",
                                        value: "numcells",
                                    },
                                    {
                                        label: "Max height",
                                        value: "max_flame_ht",
                                    },
                                    {
                                        label: "Max rate of spread",
                                        value: "max_e_ros",
                                    },
                                    {
                                        label: "Max intensity",
                                        value: "max_e_intsty",
                                    },
                                ],
                                value: "numcells",
                                validators: {
                                    required: null,
                                },
                                errorMessages: {
                                    required: "{{ label }} is required",
                                },
                            }),
                            new core_1.DynamicInputModel({
                                id: `min`,
                                label: `Min value`,
                                validators: {
                                    customValidator: string_1.floatValidator,
                                },
                                errorMessages: {
                                    customValidator: string_1.floatValidator.errorMessage,
                                },
                            }),
                            new core_1.DynamicInputModel({
                                id: `max`,
                                label: `Max value`,
                                validators: {
                                    customValidator: string_1.floatValidator,
                                },
                                errorMessages: {
                                    customValidator: string_1.floatValidator.errorMessage,
                                },
                            }),
                        ],
                    }),
                ],
            },
        },
    ];
};


/***/ }),

/***/ "./src/app/jobs/job-types/evac/client-job.ts":
/*!***************************************************!*\
  !*** ./src/app/jobs/job-types/evac/client-job.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const inputs_outputs_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/emv2/inputs-outputs */ "../shared/src/job/job-types/emv2/inputs-outputs.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/evac/form-model.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const geo_layers_1 = __webpack_require__(/*! @deck.gl/geo-layers */ "./node_modules/@deck.gl/geo-layers/dist/esm/index.js");
const mapbox_1 = __webpack_require__(/*! @deck.gl/mapbox */ "./node_modules/@deck.gl/mapbox/dist/esm/index.js");
class Emv2ClientJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.EMV2;
        this.mapboxStyle = "mapbox://styles/mapbox/dark-v10";
        this.inputFormModel = form_model_1.emv2FormRootModel;
        this.inputShapeFc = turf_1.featureCollection([]);
        this.animationSpeed = 60;
        this.animateFirstTime = true;
        this.animateThreshold = false;
        this.threshold = 0;
        this.gap = 0;
        this.animateGap = false;
        this.animateThresholdEnd = false;
        this.thresholdEnd = 0;
        this.gapEnd = 0;
        this.animateGapEnd = false;
        this.fireLoaded = false;
        this.step = 1;
        this.animationStartTime = -1;
        this.populationLoaded = false;
        this.populationGeojson = [];
        this.activities = {};
        // converted to minutes
        this.ignitionTime = { "surf_coast_shire": 0, "Mount_Alexander_Shire": 0 };
        //In actual time
        this.ignitionStartTime = "1300";
        this.lastTimeStep = 0;
        this.configForEES = { region: "", population: "", fire: "", evacMessage: "" };
    }
    // public firefile: FireFile
    init() {
        this.inputs = new inputs_outputs_1.Emv2JobInputs();
        this.outputs = new inputs_outputs_1.Emv2JobOutputs();
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("create input layers");
            // Creating layer for surf coast shire matSIM network
            this.surfCoastShire = new mapbox_gl_layer_1.MapboxGlLayer("Surf Coast Shire", {
                id: "surf_coast_shire",
                type: "line",
                source: "matsim",
                'source-layer': 'surf_coast_shire_networkP',
                paint: {
                    "line-color": "#7777ff",
                    "line-width": .5,
                },
                filter: ["all"]
            }, {
                id: "matsim",
                source: {
                    type: "vector",
                    tiles: ['https://ees-server.now.sh/matsim-tiles/surf-coast-shire/{z}/{x}/{y}.pbf'
                    ],
                },
            });
            //Load population in this region
            this.surfCoastShire.population = {
                options: [
                    {
                        name: "none"
                    },
                    {
                        name: "Anglesea_Weekday_10_000_Persons",
                    },
                    {
                        name: "Anglesea_Sample_1000_Persons",
                    },
                    {
                        name: "Anglesea_Sample_20_Persons",
                    },
                    {
                        name: "Anglesea_Sample_20_Persons_new",
                    }
                ],
                selected: {
                    name: "none",
                },
            };
            //Setup default maximum speed in this region
            this.surfCoastShire.speed = 60;
            //setup time in time slider
            this.surfCoastShire.time = this.lastTimeStep * 10;
            //Load fires in this region
            this.surfCoastShire.fire = {
                options: [
                    {
                        name: "none"
                    },
                    {
                        name: "Anglesea_evac_test_ffdi104_phx5_2016data_minsup_fh2017_grid",
                    }
                ],
                selected: {
                    name: "none",
                },
            };
            // setup evacuation message 
            this.surfCoastShire.evacMessage = {
                options: [
                    {
                        message: "NONE"
                    },
                    {
                        message: "EVACUATE_NOW",
                    },
                    {
                        message: "EMERGENCY_WARNING",
                    },
                    {
                        message: "WATCH&ACT",
                    },
                    {
                        message: "ADVICE",
                    },
                ],
                selected: {
                    message: "NONE",
                },
            };
            yield this.surfCoastShire.show();
            // Creating layer for Mount Alexander Shire  
            this.mountAlexanderShire = new mapbox_gl_layer_1.MapboxGlLayer("Mount Alexander Shire", {
                id: "mount_alexander_shire",
                type: "line",
                source: "matsim_mas",
                'source-layer': 'mount_alexander_shire_networkP',
                paint: {
                    "line-color": "#7777ff",
                    "line-width": .5,
                },
                filter: ["all"]
            }, {
                id: "matsim_mas",
                source: {
                    type: "vector",
                    tiles: ['https://ees-server.now.sh/matsim-tiles/mount-alexander-shire/{z}/{x}/{y}.pbf'
                    ],
                },
            });
            //Load population in this region
            this.mountAlexanderShire.population = {
                options: [
                    {
                        name: "none"
                    },
                    {
                        name: "Castlemaine_Archetypes_10_867_Persons",
                    },
                    {
                        name: "Caslemain_Archetypes_100_Persons",
                    },
                    {
                        name: "Castlemaine_Archetypes_30_Persons",
                    },
                ],
                selected: {
                    name: "none",
                },
            };
            //Setup default maximum speed in this region
            this.mountAlexanderShire.speed = 60;
            //setup time in time slider
            this.mountAlexanderShire.time = this.lastTimeStep * 10;
            //Load fires in this region
            this.mountAlexanderShire.fire = {
                options: [
                    {
                        name: "none"
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi50a_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi50b_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi50c_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi50d_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi75a_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi75b_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi75c_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi75d_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi100a_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi100b_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi100c_grid",
                    },
                    {
                        name: "20181109_mountalex_evac_ffdi100d_grid",
                    }
                ],
                selected: {
                    name: "none",
                },
            };
            // setup evacuation message 
            this.mountAlexanderShire.evacMessage = {
                options: [
                    {
                        message: "NONE"
                    },
                    {
                        message: "EVACUATE_NOW",
                    },
                    {
                        message: "EMERGENCY_WARNING",
                    },
                    {
                        message: "WATCH&ACT",
                    },
                    {
                        message: "ADVICE",
                    },
                ],
                selected: {
                    message: "NONE",
                },
            };
            yield this.mountAlexanderShire.show();
            // this.firePointsLayer,
            // this.selectedFireLayer,
            return [
                this.surfCoastShire,
                this.mountAlexanderShire,
            ];
        });
    }
    loadFire(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.fireFileName = name;
            // console.log("received name" + this.fireFileName)
            if (this.fireFileName !== "" && this.fireFileName !== "none") {
                // let dataURL_Fire = "http://localhost:12345/phoenix/" + this.fireFileName + ".json"
                let dataURL_Fire = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_TEMP_FILES_URL + "layer-files/phoenix/" + this.fireFileName + ".json";
                this.layerService.clearFileCache();
                let fireData = yield this.layerService.getFile(dataURL_Fire, rest_api_service_1.ResponseType.JSON, ".json", false);
                this.fireFeatures = fireData.features;
                this.fireLoaded = true;
                this.createFireLayers();
            }
            if (this.fireFileName == "none") {
                //Clearing existing firelayers
                this.clearFirelayers();
            }
        });
    }
    loadPopulation(name) {
        return __awaiter(this, void 0, void 0, function* () {
            this.populationFileName = name;
            if (this.populationFileName !== "" && this.populationFileName !== "none") {
                // let dataURL_Fire = "http://localhost:12345/populations/" + this.populationFileName + ".json"
                let dataURL_Fire = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_TEMP_FILES_URL + "layer-files/populations/" + this.populationFileName + ".json";
                this.layerService.clearFileCache();
                this.populationData = yield this.layerService.getFile(dataURL_Fire, rest_api_service_1.ResponseType.JSON, ".json", false);
                //this.fireFeatures = fireData.features;
                this.populationLoaded = true;
                this.createPopulationLayers();
            }
            if (this.populationFileName == "none") {
                //Clearing existing layers
                this.clearPopulationlayers();
                this.activities = {};
            }
        });
    }
    toJSON() {
        return super.toJSON();
    }
    setBbox() {
        if (typeof this.inputs.fireRasterSelectionGeometry !== "undefined" &&
            this.inputs.fireRasterSelectionGeometry.features.length > 0) {
            this.boundingBox4326 = turf_1.bbox(this.inputs.fireRasterSelectionGeometry);
        }
    }
    /**
     * This will be called when EES job finished
     */
    createSimulationLayer() {
        return __awaiter(this, void 0, void 0, function* () {
            //this.simulationDataURL = "http://localhost:12345/populations/trips.congestion2.deckgl.json"
            //this.layerService.mapboxGl.setStyle(mapStyle)
            this.activities = {};
            console.log("job name" + this.name);
            console.log("Output Dir" + this.outputDirectory);
            console.log("Server URL" + this.configService.config.MASTER_WEBSERVER_URL);
            console.log("Job files" + this.configService.serverConfig.API_JOB_FILES_URL);
            let DataURL = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_JOB_FILES_URL + this.outputDirectory + "trips.deckgl.json";
            let Data = yield this.layerService.getFile(DataURL, rest_api_service_1.ResponseType.JSON, ".json", false);
            // DSS: Zoom to simulation area
            this.flyPoint = Data[0].path[0];
            console.log("fly" + this.flyPoint);
            //DSS:Setup simulation start and finish time
            this.simulationStartTime = Data[Data.length - 1].start;
            this.simulationFinishTime = Data[Data.length - 1].finish;
            console.log("start finish " + this.simulationStartTime + ":" + this.simulationFinishTime);
            //DSS:Create simulation layer(Agents runs on this layer)
            this.maldonTestLayer = new mapbox_1.MapboxLayer({
                id: 'maldonTestLayer',
                type: geo_layers_1.TripsLayer,
                data: Data,
                getPath: d => d.path,
                getTimestamps: d => (d.timestamps),
                getColor: d => (d.colours),
                opacity: 0.6,
                widthMinPixels: 4,
                rounded: true,
                trailLength: 100,
                billboard: true,
                currentTime: 0
            });
            this.maldonTestLayer.animationSpeed = 60;
            if (this.layerService.mapboxGl.addLayer(this.maldonTestLayer)) {
                // this.animateMaldonTest()
            }
            //DSS:Zoom to simulation area
            this.layerService.mapboxGl.flyTo({
                center: this.flyPoint,
                speed: 0.5,
                zoom: 10
            });
            // Animate fire
            // TODO : this has to be loaded from config file
            //First : Get the user selected fire file name from server (from config file)
            let DataURL_Config = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_JOB_FILES_URL + this.inputDirectory + "scenario/" + this.name + ".json";
            this.layerService.clearFileCache();
            let configData = yield this.layerService.getFile(DataURL_Config, rest_api_service_1.ResponseType.JSON, ".json", false);
            // console.log("fire" + configData["fire"])
            let selectedFireFile = configData["fire"];
            //let dataURL_Fire = "http://localhost:12345/phoenix/" + selectedFireFile + ".json"
            let dataURL_Fire = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_TEMP_FILES_URL + "layer-files/phoenix/" + selectedFireFile + ".json";
            this.layerService.clearFileCache();
            let fireData = yield this.layerService.getFile(dataURL_Fire, rest_api_service_1.ResponseType.JSON, ".json", false);
            var features = fireData.features;
            features.sort(function (a, b) {
                if (a.properties.HOUR_BURNT === null)
                    return -1;
                if (b.properties.HOUR_BURNT === null)
                    return 1;
                else
                    return a.properties.HOUR_BURNT - b.properties.HOUR_BURNT;
            });
            var stepMinutes = this.step;
            const lastFeature = features[features.length - 1];
            const totalMinutes = lastFeature.properties.HOUR_BURNT * 60;
            this.totalSteps = Math.ceil(totalMinutes / stepMinutes);
            var j = 0;
            while (features[j].properties.HOUR_BURNT === null)
                j++;
            for (var i = 0; i < this.totalSteps; i++) {
                var threshold = (i * stepMinutes) / 60;
                var sect = {
                    type: "FeatureCollection",
                    features: []
                };
                while (features[j].properties.HOUR_BURNT < threshold) {
                    sect.features.push(features[j]);
                    j++;
                }
                // create fire layer
                var stepStr = i.toString();
                var layer = "phoenix-layer" + stepStr;
                var source = "phoenix-source" + stepStr;
                var fireLayer = new mapbox_gl_layer_1.MapboxGlLayer(layer, {
                    id: layer,
                    type: "fill",
                    source: source,
                    layout: {
                        visibility: "none"
                    },
                    paint: {
                        "fill-color": {
                            property: "E_INTSTY",
                            stops: [[0, "#ffc107"], [100000, "#dc3545"]]
                        },
                        "fill-opacity": 0.4
                    }
                }, {
                    id: source,
                    source: {
                        type: "geojson",
                        data: sect,
                    },
                });
                fireLayer.show();
            }
            return [
                this.maldonTestLayer
            ];
        });
    }
    animateMaldonTest() {
        if (this.animationStartTime == -1) //change this condition to true in first iteration
         {
            this.animationStartTime = Date.now();
        }
        const loopLength = (this.simulationFinishTime - this.simulationStartTime);
        const animationSpeed = this.animationSpeed;
        //const timestamp = (Date.now() / 1000) 
        const timestamp = ((Date.now() - this.animationStartTime) / 1000);
        const loopTime = loopLength / animationSpeed;
        var currentTime;
        this.currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime);
        console.log("currentTime maldon" + this.currentTime);
        currentTime = this.currentTime;
        // console.log("final current : " + currentTime)
        if (!this.stop) {
            var step = Math.floor(currentTime / 60);
            //Simulate fire
            this.simulateFireLayer(step);
            this.maldonTestLayer.setProps({ currentTime });
            this.animationFrame = requestAnimationFrame(this.animateMaldonTest.bind(this));
        }
    }
    // animateMaldonTest2(): void {
    //   const loopLength = (this.simulationFinishTime - this.simulationStartTime);
    //   const animationSpeed = this.animationSpeed
    //   var timestamp;
    //   var loopTime;
    //   var currentTime;
    //   //this.stop = false
    //   //console.log("timestamp" + timestamp)
    //   timestamp = (Date.now() / 1000)
    //   loopTime = loopLength / animationSpeed
    //   // console.log("loop time" + loopTime)
    //   if (this.animateFirstTime) {
    //     if (!this.animateThreshold) {
    //       this.threshold = (((timestamp % loopTime) / loopTime) * loopLength)
    //       this.animateThreshold = true
    //       //console.log("the set: " + this.threshold)
    //     }
    //     this.currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime);
    //     this.currentTime = this.currentTime - this.threshold
    //     if (this.currentTime < this.simulationStartTime) {
    //       console.log("less")
    //       //console.log("previuos" + this.previousTime)
    //       //console.log("gap" + (this.previousTime - (((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime))))
    //       if (!this.animateGap) {
    //         this.gap = this.previousTime - (((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime))
    //         this.animateGap = true
    //       }
    //       this.currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime);
    //       this.currentTime = this.currentTime + this.gap
    //     }
    //     //console.log("the : " + this.threshold)
    //     console.log("the  actual : " + ((timestamp % loopTime) / loopTime) * loopLength)
    //     //console.log("here1 : " + this.currentTime)
    //   }
    //   if (!this.animateFirstTime) {
    //     if (!this.animateThresholdEnd) {
    //       this.thresholdEnd = (((timestamp % loopTime) / loopTime) * loopLength)
    //       this.animateThresholdEnd = true
    //       //console.log("the set: " + this.threshold)
    //     }
    //     console.log("tehend : " + this.thresholdEnd)
    //     this.currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime);
    //     this.currentTime = this.currentTime - this.thresholdEnd
    //     console.log("the  actual2 : " + ((timestamp % loopTime) / loopTime) * loopLength)
    //     console.log("here2 : " + this.currentTime)
    //     if (this.currentTime < this.simulationStartTime) {
    //       console.log("less2")
    //       //console.log("previuos" + this.previousTime)
    //       //console.log("gap" + (this.previousTime - (((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime))))
    //       if (!this.animateGapEnd) {
    //         this.gapEnd = this.previousTime - (((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime))
    //         this.animateGapEnd = true
    //       }
    //       this.currentTime = ((timestamp % loopTime) / loopTime) * loopLength + (this.simulationStartTime);
    //       this.currentTime = this.currentTime + this.gapEnd
    //     }
    //   }
    //   // console.log("currentTime maldon" + this.currentTime)
    //   currentTime = this.currentTime
    //   // console.log("final current : " + currentTime)
    //   if (this.animateFirstTime) {
    //     if (Math.ceil(this.currentTime) + 5 >= this.simulationFinishTime) {
    //       console.log("here3 : " + this.currentTime)
    //       this.animateFirstTime = false
    //     }
    //   }
    //   if (!this.stop) {
    //     var step = Math.floor(currentTime / 60)
    //     //Simulate fire
    //     //this.simulateFireLayer(step)
    //     this.previousTime = currentTime
    //     this.maldonTestLayer.setProps({ currentTime });
    //     this.animationFrame = requestAnimationFrame(this.animateMaldonTest.bind(this));
    //   }
    // }
    stopAnimation() {
        var temp = this.currentTime;
        var currentTime = temp;
        this.maldonTestLayer.setProps({ currentTime });
        this.animationFrame = requestAnimationFrame(this.stopAnimation.bind(this));
    }
    setupStop() {
        if (this.stop == null) {
            this.stop = false;
        }
        else if (this.stop) {
            this.stop = false;
        }
        else {
            this.stop = true;
        }
    }
    setupAnimationSpeed(speed) {
        this.animationSpeed = speed;
    }
    getAnimationSpeed() {
        return this.animationSpeed;
    }
    getTimeStamps() {
        return { "start": this.simulationStartTime, "finish": this.simulationFinishTime };
    }
    getLastFireStep() {
        return this.lastTimeStep;
    }
    getPopulationColorLegends() {
        return this.activities;
    }
    /**
     * Create fire layer on map
     * triggered when fire file selected
     */
    createFireLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fireLoaded) {
                //console.log("not null" + this.fireFeatures)
                this.clearFirelayers();
                this.fireFeatures.sort(function (a, b) {
                    if (a.properties.HOUR_BURNT === null)
                        return -1;
                    if (b.properties.HOUR_BURNT === null)
                        return 1;
                    else
                        return a.properties.HOUR_BURNT - b.properties.HOUR_BURNT;
                });
                var stepMinutes = 10;
                const lastFeature = this.fireFeatures[this.fireFeatures.length - 1];
                //console.log("last feature " + JSON.stringify(lastFeature))
                const totalMinutes = lastFeature.properties.HOUR_BURNT * 60;
                //console.log("total min" + totalMinutes)
                this.totalSteps = Math.ceil(totalMinutes / stepMinutes);
                this.lastTimeStep = ((parseInt(this.ignitionStartTime.slice(0, 2)) * 60 + parseInt(this.ignitionStartTime.slice(2))) / 10) + (this.totalSteps - 1);
                //console.log("total steps" + totalSteps)
                var j = 0;
                while (this.fireFeatures[j].properties.HOUR_BURNT === null)
                    j++;
                console.log("size" + j);
                for (var i = 0; i < this.totalSteps; i++) {
                    var threshold = (i * stepMinutes) / 60;
                    // console.log("threhold" + threshold)
                    var sect = {
                        type: "FeatureCollection",
                        features: []
                    };
                    while (this.fireFeatures[j].properties.HOUR_BURNT < threshold) {
                        sect.features.push(this.fireFeatures[j]);
                        j++;
                    }
                    var stepStr = i.toString();
                    var layer = "phoenix-layer" + stepStr;
                    var source = "phoenix-source" + stepStr;
                    this.fireLayer = new mapbox_gl_layer_1.MapboxGlLayer(layer, {
                        id: layer,
                        type: "fill",
                        source: source,
                        layout: {
                            visibility: "visible"
                        },
                        paint: {
                            "fill-color": {
                                property: "E_INTSTY",
                                stops: [[0, "#ffc107"], [100000, "#dc3545"]]
                            },
                            "fill-opacity": 0.4
                        }
                    }, {
                        id: source,
                        source: {
                            type: "geojson",
                            data: sect,
                        },
                    });
                    this.fireLayer.show();
                }
            }
        });
    }
    clearFirelayers() {
        if (this.fireLayer !== undefined) {
            if (this.layerService.mapboxGl.getLayer(this.fireLayer.name)) {
                console.log("none clear");
                for (var i = 0; i < this.totalSteps; i++) {
                    this.layerService.mapboxGl.removeLayer("phoenix-layer" + i.toString());
                }
            }
        }
    }
    createPopulationLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.populationLoaded) {
                this.clearPopulationlayers();
                this.populationGeojson = [];
                var stepMinutes = 10;
                let json = this.populationData;
                const lastFeature = json[json.length - 1];
                const totalMinutes = lastFeature.end_hr * 60;
                const totalSteps = Math.ceil(totalMinutes / stepMinutes);
                console.log("population totalsteps" + totalSteps);
                this.lastTimeStep = totalSteps;
                var whereareyounow = {};
                var currActivities = [];
                for (const plan of json) {
                    if (!(plan.id in whereareyounow)) {
                        whereareyounow[plan.id] = plan;
                    }
                    if (!currActivities.includes(plan.type)) {
                        currActivities.push(plan.type);
                    }
                }
                this.activities = {};
                currActivities.sort();
                var activityColors = [
                    "#fbb03b",
                    "#223b53",
                    "#e55e5e",
                    "#3bb2d0",
                    "#cccccc" // must be 6 hex, due to reactive colorpicker feedback loops. more may be required
                ];
                //console.log("activityc" + activityColors)
                for (var i = 0; i < currActivities.length; i++) {
                    if (i < activityColors.length) {
                        this.activities[currActivities[i]] = activityColors[i];
                    }
                    else {
                        // seeded colour generator
                        var color = Math.floor(Math.abs(Math.sin(i) * 16777215) % 16777215);
                        var colorStr = color.toString(16);
                        // pad any colors shorter than 6 characters with leading 0s
                        while (colorStr.length < 6) {
                            colorStr = "0" + colorStr;
                        }
                        this.activities[currActivities[i]] = "#" + colorStr;
                        //activityColors.push("#" + color);
                    }
                }
                console.log("activity colors" + JSON.stringify(this.activities));
                //state.currActivities = currActivities;
                var j = 0;
                for (var i = 0; i < totalSteps; i++) {
                    var threshold = (i * stepMinutes / 60);
                    // add all features below the minutes threshold to this structure
                    while (json[j].end_hr < threshold) {
                        whereareyounow[json[j].id] = json[j];
                        j++;
                    }
                    var sect = {
                        type: "FeatureCollection",
                        features: []
                    };
                    for (const k of Object.keys(whereareyounow)) {
                        var feature = {
                            type: "Feature",
                            properties: {
                                person: whereareyounow[k].id,
                                end_hr: whereareyounow[k].end_hr,
                                type: whereareyounow[k].type,
                                color: this.activities[whereareyounow[k].type]
                            },
                            geometry: {
                                type: "Point",
                                coordinates: [whereareyounow[k].x, whereareyounow[k].y]
                            }
                        };
                        sect.features.push(feature);
                    }
                    this.populationGeojson.push(sect);
                }
                console.log("length" + this.populationGeojson.length);
                // create a single layer to conduct animation in
                var layer = "pop-layer";
                var source = "pop-source";
                this.populationLayer = new mapbox_gl_layer_1.MapboxGlLayer(layer, {
                    id: layer,
                    type: "circle",
                    source: source,
                    paint: {
                        "circle-radius": {
                            base: 1.75,
                            stops: [[12, 2], [22, 180]]
                        },
                        "circle-color": {
                            type: "identity",
                            property: "color"
                        },
                        "circle-opacity": 1.0,
                        "circle-opacity-transition": {
                            duration: 0
                        }
                    }
                }, {
                    id: source,
                    source: {
                        type: "geojson",
                        data: this.populationGeojson[143],
                    },
                });
                this.populationLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateYlOrRd");
                this.populationLayer.show();
            }
        });
    }
    clearPopulationlayers() {
        if (this.populationLayer !== undefined) {
            if (this.layerService.mapboxGl.getLayer(this.populationLayer.name)) {
                this.layerService.mapboxGl.removeLayer(this.populationLayer.name);
            }
        }
    }
    /**
     * filter fire layers according to time slider
     * @param stepMinutes Value from time slider
     */
    filterFireLayers(stepMinutes) {
        return __awaiter(this, void 0, void 0, function* () {
            let fireStartStep = ((parseInt(this.ignitionStartTime.slice(0, 2)) * 60 + parseInt(this.ignitionStartTime.slice(2))) / 10);
            //console.log("fireStartStep" + fireStartStep)
            //const fireStartStep = 78
            var totalLayers = this.totalSteps;
            var fireStep = stepMinutes / 10;
            for (var i = 0; i < totalLayers; i++) {
                var layer = "phoenix-layer" + i.toString();
                if (i + fireStartStep <= fireStep)
                    this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "visible");
                else
                    this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "none");
            }
        });
    }
    /**
    * filter population layers according to time slider
    * @param stepMinutes Value from time slider
    */
    filterPopulationLayers(stepMinutes) {
        return __awaiter(this, void 0, void 0, function* () {
            stepMinutes = stepMinutes / 10;
            //console.log("filter pop called" + stepMinutes)
            if (stepMinutes > 143) {
                stepMinutes = 143;
            }
            const s = this.layerService.mapboxGl.getSource("pop-source");
            if (typeof s !== "undefined") {
                this.layerService.mapboxGl.getSource("pop-source").setData(this.populationGeojson[stepMinutes]);
            }
        });
    }
    /**
     * Simulate fire
     * @param stepMinutes current minutes in simulation
     */
    simulateFireLayer(stepMinutes) {
        //console.log("received" + stepMinutes)
        let fireStartStep = ((parseInt(this.ignitionStartTime.slice(0, 2)) * 60 + parseInt(this.ignitionStartTime.slice(2))) / this.step);
        //console.log("fireStartStep" + fireStartStep)
        //const fireStartStep = 78
        var totalLayers = this.totalSteps;
        // var fireStep = stepMinutes / 10
        //var fireStep = ((parseInt(stepMinutes.slice(0, 2)) * 60 + parseInt(stepMinutes.slice(2))) / this.step)
        var fireStep = (stepMinutes / this.step);
        //console.log("fireStep" + fireStep)
        for (var i = 0; i < totalLayers; i++) {
            var layer = "phoenix-layer" + i.toString();
            if (i + fireStartStep <= fireStep)
                this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "visible");
            else
                this.layerService.mapboxGl.setLayoutProperty(layer, "visibility", "none");
        }
    }
    createZoneLayer(region) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.layerService.mapboxGl.getLayer('subgroups-layer')) {
                this.layerService.mapboxGl.removeLayer('subgroups-layer');
            }
            if (this.layerService.mapboxGl.getLayer('zone-hover')) {
                this.layerService.mapboxGl.removeLayer('zone-hover');
            }
            this.layerService.clearFileCache();
            this.zoneDataURL = this.configService.config.MASTER_WEBSERVER_URL + this.configService.serverConfig.API_TEMP_FILES_URL + "layer-files/zones/" + region + "_SA1.json";
            let Data = yield this.layerService.getFile(this.zoneDataURL, rest_api_service_1.ResponseType.JSON, ".json", false);
            this.zoneLayer = new mapbox_gl_layer_1.MapboxGlLayer('subgroups-layer', {
                id: 'subgroups-layer',
                type: "fill",
                source: 'subgroups',
                paint: {
                    'fill-color': 'rgba(200, 100, 240, 0.4)',
                    'fill-outline-color': '#627BC1'
                }
            }, {
                id: 'subgroups',
                source: {
                    type: "geojson",
                    data: Data,
                },
            });
            this.zoneHoverLayer = new mapbox_gl_layer_1.MapboxGlLayer('zone-hover', {
                id: 'zone-hover',
                type: "fill",
                source: 'zonehover',
                layout: {},
                paint: {
                    'fill-color': 'rgba(200, 100, 240, 1)',
                    'fill-opacity': [
                        'case',
                        ['boolean', ['feature-state', 'hover'], false],
                        1,
                        0.5
                    ]
                }
            }, {
                id: 'zonehover',
                source: {
                    type: "geojson",
                    data: Data,
                },
            });
        });
    }
    showZoneLayers(visibility) {
        if (visibility) {
            this.zoneLayer.show();
            //this.zoneHoverLayer.show()
        }
        else {
            this.zoneLayer.hide();
            // this.zoneHoverLayer.hide()
        }
    }
    setMapStyle(style) {
        this.mapboxStyle = style;
        console.log(this.mapboxStyle);
    }
}
exports.Emv2ClientJob = Emv2ClientJob;


/***/ }),

/***/ "./src/app/jobs/job-types/evac/form-model.ts":
/*!***************************************************!*\
  !*** ./src/app/jobs/job-types/evac/form-model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const form_interfaces_1 = __webpack_require__(/*! ../../../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../../../shared/src/user/user */ "../shared/src/user/user.ts");
var Emv2FormModeKey;
(function (Emv2FormModeKey) {
    Emv2FormModeKey["Basic"] = "basic";
})(Emv2FormModeKey = exports.Emv2FormModeKey || (exports.Emv2FormModeKey = {}));
exports.emv2FormRootModel = new form_interfaces_1.FormRootModel();
exports.emv2FormRootModel.subjectPropertyKey = "inputs";
exports.emv2FormRootModel.modes = [
    {
        key: Emv2FormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.User, user_1.GeowebUserRoles.Admin],
    },
];
exports.emv2FormRootModel.defaultMode = exports.emv2FormRootModel.modes[0];
exports.emv2FormRootModel.schemaFactory = () => {
    return [
        {
            name: "Basic",
            modeKeys: [Emv2FormModeKey.Basic],
            form: {
                layout: {
                    fireRasterFilter: {
                        grid: {
                            container: "ui-g-12",
                            group: "ui-g-12",
                            label: "ui-g-12",
                        },
                        element: {
                            group: "formgroup-container formgroup-tabular",
                            children: "formgroup-tabular-child",
                            container: "formgroup-container",
                            label: "formgroup-label",
                        },
                    },
                    min: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                    max: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                    key: {
                        grid: {
                            host: "ui-g-4 ui-md-4",
                        },
                    },
                },
                model: [
                    new core_1.DynamicFormArrayModel({
                        id: "fireRasterFilter",
                        label: "Filter",
                        initialCount: 0,
                        groupFactory: () => [
                            new core_1.DynamicSelectModel({
                                id: `key`,
                                label: "Key",
                                options: [
                                    {
                                        label: "Size",
                                        value: "numcells",
                                    },
                                    {
                                        label: "Max height",
                                        value: "max_flame_ht",
                                    },
                                    {
                                        label: "Max rate of spread",
                                        value: "max_e_ros",
                                    },
                                    {
                                        label: "Max intensity",
                                        value: "max_e_intsty",
                                    },
                                ],
                                value: "numcells",
                                validators: {
                                    required: null,
                                },
                                errorMessages: {
                                    required: "{{ label }} is required",
                                },
                            }),
                            new core_1.DynamicInputModel({
                                id: `min`,
                                label: `Min value`,
                                validators: {
                                    customValidator: string_1.floatValidator,
                                },
                                errorMessages: {
                                    customValidator: string_1.floatValidator.errorMessage,
                                },
                            }),
                            new core_1.DynamicInputModel({
                                id: `max`,
                                label: `Max value`,
                                validators: {
                                    customValidator: string_1.floatValidator,
                                },
                                errorMessages: {
                                    customValidator: string_1.floatValidator.errorMessage,
                                },
                            }),
                        ],
                    }),
                ],
            },
        },
    ];
};


/***/ }),

/***/ "./src/app/jobs/job-types/risk/cogg-job.ts":
/*!*************************************************!*\
  !*** ./src/app/jobs/job-types/risk/cogg-job.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
class CoggJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.COGG;
        this.clientOnly = true;
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            const colourScheme = new colour_scheme_1.D3ColourScheme("interpolateTurbo");
            const colourByPropertiesArray = {
                options: [
                    {
                        label: "SLR 2009",
                        key: "SLR_2009",
                        minValue: 0,
                        maxValue: 1,
                    },
                    {
                        label: "SLR 2040",
                        key: "SLR_2040",
                        minValue: 0,
                        maxValue: 1,
                    },
                    {
                        label: "SLR 2070",
                        key: "SLR_2070",
                        minValue: 0,
                        maxValue: 1,
                    },
                    {
                        label: "SLR 2100",
                        key: "SLR_2100",
                        minValue: 0,
                        maxValue: 1,
                    },
                    {
                        label: "Groundwater salinity",
                        key: "VAF_watertable_salinity_tds100_20170508_raw_3857_min",
                        minValue: 0,
                        maxValue: 35000,
                    },
                    {
                        label: "FFDI A1B 2006",
                        key: "_a1bh102006_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2016",
                        key: "_a1bh102016_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2026",
                        key: "_a1bh102026_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2036",
                        key: "_a1bh102036_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2046",
                        key: "_a1bh102046_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2056",
                        key: "_a1bh102056_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2066",
                        key: "_a1bh102066_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2076",
                        key: "_a1bh102076_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "FFDI A1B 2086",
                        key: "_a1bh102086_3857_max",
                        minValue: 80,
                        maxValue: 100,
                    },
                    {
                        label: "Portarlington SLR inundation 0.0m",
                        key: "geelong_innundation_hazardspeed_slr_0_0m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 0.2m",
                        key: "geelong_innundation_hazardspeed_slr_0_2m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 0.4m",
                        key: "geelong_innundation_hazardspeed_slr_0_4m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 0.6m",
                        key: "geelong_innundation_hazardspeed_slr_0_6m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 0.8m",
                        key: "geelong_innundation_hazardspeed_slr_0_8m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 1.1m",
                        key: "geelong_innundation_hazardspeed_slr_1_1m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                    {
                        label: "Portarlington SLR inundation 1.4m",
                        key: "geelong_innundation_hazardspeed_slr_1_4m_max",
                        minValue: 0,
                        maxValue: 2,
                    },
                ],
                selected: undefined,
            };
            colourByPropertiesArray.selected = colourByPropertiesArray.options[2];
            const setupLayer = (layer) => {
                layer.colourScheme = colourScheme;
                layer.colourByProperty = colourByPropertiesArray;
                layer.opacity = 100;
            };
            const waterPipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Water pipes", {
                id: "water-pipes",
                type: "line",
                source: "water-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "water-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Water_Pipes_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(waterPipesLayer);
            const waterOffsets = new mapbox_gl_layer_1.MapboxGlLayer("Water offsets", {
                id: "water-offsest",
                source: "water-offsest",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "water-offsest",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Water_Offsets_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(waterOffsets);
            const recWaterPipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Recycled water pipes", {
                id: "rec-water-pipes",
                type: "line",
                source: "rec-water-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "rec-water-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Recycled_Water_Pipes_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(recWaterPipesLayer);
            const recWaterOffsets = new mapbox_gl_layer_1.MapboxGlLayer("Recycled water offsets", {
                id: "rec-water-offsest",
                source: "rec-water-offsest",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "rec-water-offsest",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Recycled_Water_Offsets_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(recWaterOffsets);
            const sewerOffsets = new mapbox_gl_layer_1.MapboxGlLayer("Sewer offsets", {
                id: "sewerERS",
                source: "sewerERS",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "sewerERS",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Sewer_Offsets_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerOffsets);
            const sewerVents = new mapbox_gl_layer_1.MapboxGlLayer("Sewer vents", {
                id: "sewer-vents",
                source: "sewer-vents",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "sewer-vents",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Sewer_Vents_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerVents);
            const sewerPipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Sewer gravity pipes", {
                id: "sewer-pipes",
                type: "line",
                source: "sewer-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "sewer-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Sewer_Gravity_pipes_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerPipesLayer);
            const sewerPressurePipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Sewer pressure pipes", {
                id: "sewer-pressure-pipes",
                type: "line",
                source: "sewer-pressure-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "sewer-pressure-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/Sewer_Pressure_pipes_final.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerPressurePipesLayer);
            const dimensions = {
                property: {
                    label: "SLR",
                    key: "slr",
                    options: [
                        {
                            value: `0.0m`,
                            label: `0.0m`,
                        },
                        {
                            value: `0.2m`,
                            label: `0.2m`,
                        },
                        {
                            value: `0.4m`,
                            label: `0.4m`,
                        },
                        {
                            value: `0.6m`,
                            label: `0.6m`,
                        },
                        {
                            value: `0.8m`,
                            label: `0.8m`,
                        },
                        {
                            value: `1.1m`,
                            label: `1.1m`,
                        },
                        {
                            value: `1.4m`,
                            label: `1.4m`,
                        },
                    ],
                    selected: {
                        value: `1.4m`,
                        label: `1.4m`,
                    },
                },
            };
            // const inundationLayer = new RasterMultiLayer(
            //   "Portarlington inundation",
            //   dimensions,
            //   dimensions =>
            //     `${this.configService.getMasterPublicFilesUrl()}cogg/geelong-innundation-hazardspeed-slr-${
            //       dimensions["property"].selected.value
            //     }-3857.tif`
            // )
            // inundationLayer.minValue = 0
            // inundationLayer.maxValue = 2
            const watertableSalinity = new mapbox_gl_layer_1.MapboxGlLayer("Groundwater salinity", {
                id: "groundwater-salinity",
                type: "fill",
                source: "groundwater-salinity",
            }, {
                id: "groundwater-salinity",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/cogg/watertable-salinity.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            watertableSalinity.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateTurbo");
            watertableSalinity.colourByProperty = { label: "DN", key: "DN" };
            watertableSalinity.minValue = 0;
            watertableSalinity.maxValue = 35000;
            const slrLayer = new mapbox_gl_layer_1.MapboxGlLayer("Vic inundation (storm-tide)", {
                id: "vic-slr",
                type: "fill",
                source: "vic-slr",
                "source-layer": "test",
                paint: {
                    "fill-color": "#0000ff",
                },
            }, {
                id: "vic-slr",
                source: {
                    type: "vector",
                    tiles: [
                        `https://storage.googleapis.com/geostack-data/spark/Public/vic-sea-level-rise/{z}/{x}/{y}.pbf`,
                    ],
                },
            });
            slrLayer.dimensionsArray = [
                {
                    label: "Date",
                    key: "date",
                    options: ["2009/01/01", "2040/01/01", "2070/01/01", "2100/01/01"].map(option => {
                        return { label: option, value: option };
                    }),
                    selected: { value: "2100/01/01", label: "2100/01/01" },
                },
            ];
            slrLayer.opacity = 50;
            const ffdiDimensions = {
                year: {
                    label: "Year",
                    key: "year",
                    options: new Array(10).fill(1).map((val, idx) => {
                        return {
                            value: `${2006 + idx * 10}`,
                            label: `${2006 + idx * 10}`,
                        };
                    }),
                    selected: {
                        value: "2086",
                        label: "2086",
                    },
                },
            };
            const ffdiLayer = new map_geotiff_layer_1.RasterMultiLayer("FFDI projections", ffdiDimensions, ffdiDimensions => `https://storage.googleapis.com/geostack-data/spark/Public/climate-ffdi/a1bh10${ffdiDimensions["year"].selected.value}-3857.geotiff`);
            ffdiLayer.minValue = 0;
            ffdiLayer.maxValue = 150;
            waterPipesLayer.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                recWaterOffsets,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            waterOffsets.linkedLayers = [
                waterPipesLayer,
                recWaterPipesLayer,
                recWaterOffsets,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            recWaterPipesLayer.linkedLayers = [
                waterOffsets,
                waterPipesLayer,
                recWaterOffsets,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            recWaterOffsets.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                waterPipesLayer,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            sewerPressurePipesLayer.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                waterPipesLayer,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            sewerPipesLayer.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                waterPipesLayer,
                recWaterOffsets,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
            ];
            sewerOffsets.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                waterPipesLayer,
                recWaterOffsets,
                sewerPressurePipesLayer,
                sewerPipesLayer,
                sewerVents,
            ];
            sewerVents.linkedLayers = [
                waterOffsets,
                recWaterPipesLayer,
                waterPipesLayer,
                recWaterOffsets,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerPipesLayer,
            ];
            waterPipesLayer.legendTitle = "Infrastructure risk";
            waterOffsets.showLegend = false;
            recWaterPipesLayer.showLegend = false;
            recWaterOffsets.showLegend = false;
            sewerPipesLayer.showLegend = false;
            sewerPressurePipesLayer.showLegend = false;
            sewerOffsets.showLegend = false;
            sewerVents.showLegend = false;
            yield slrLayer.show();
            yield waterPipesLayer.show();
            return [
                waterPipesLayer,
                waterOffsets,
                recWaterPipesLayer,
                recWaterOffsets,
                sewerPipesLayer,
                sewerPressurePipesLayer,
                sewerOffsets,
                sewerVents,
                slrLayer,
                // inundationLayer,
                watertableSalinity,
                ffdiLayer,
            ];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    setBbox() { }
}
exports.CoggJob = CoggJob;


/***/ }),

/***/ "./src/app/jobs/job-types/risk/nsw-fire.ts":
/*!*************************************************!*\
  !*** ./src/app/jobs/job-types/risk/nsw-fire.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
class NswFireJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.mapboxStyle = "mapbox://styles/mapbox/satellite-streets-v11";
        this.type = job_types_1.JobType.NSWFIRE;
        this.clientOnly = true;
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            const fireRaster = new map_geotiff_layer_1.RasterLayer("Fire intensity", yield this.jobService.resolveDirTree(`geostack-data/spark/Data/nsw-fire/Burn_detect_NBR.tif`, interfaces_1.FileLocation.GCS));
            fireRaster.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateYlOrRd");
            fireRaster.minValue = 0;
            fireRaster.maxValue = 1;
            this.landParcelsJSON = (yield this.layerService.getFile(yield this.jobService.resolveDirTree(`geostack-data/spark/Data/nsw-fire/land-parcels-fire-full.geojson`, interfaces_1.FileLocation.GCS), rest_api_service_1.ResponseType.JSON));
            const landParcelLayer = new mapbox_gl_layer_1.MapboxGlLayer("Land parcels", {
                id: "fire-risk",
                source: "fire-risk",
                type: "fill",
            }, {
                id: "fire-risk",
                source: {
                    type: "geojson",
                    data: this.landParcelsJSON,
                },
            });
            landParcelLayer.filterValuesArray = [
                {
                    label: "Mean hazard",
                    key: "fire_mean",
                    minValue: 0,
                    maxValue: 1,
                },
                {
                    label: "Max hazard",
                    key: "fire_max",
                    minValue: 0,
                    maxValue: 1,
                },
            ];
            landParcelLayer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateYlOrRd");
            landParcelLayer.colourByProperty = {
                options: [
                    {
                        label: "Sum hazard",
                        key: "fire_sum",
                        minValue: 0,
                        maxValue: 60000,
                    },
                    {
                        label: "Mean hazard",
                        key: "fire_mean",
                        minValue: 0,
                        maxValue: 1,
                    },
                    {
                        label: "Max hazard",
                        key: "fire_max",
                        minValue: 0,
                        maxValue: 1,
                    },
                ],
                selected: {
                    label: "Max hazard",
                    key: "fire_max",
                    minValue: 0,
                    maxValue: 1,
                },
            };
            landParcelLayer.idByProperty = "cadid";
            landParcelLayer.onClickPolicy = "all";
            landParcelLayer.onClick = (point) => {
                const features = landParcelLayer.getFeaturesAtPoint(point);
                if (Array.isArray(features) && typeof features[0] !== "undefined") {
                    this.layerService.showPopup({
                        title: `Land parcel info`,
                        model: features[0],
                        coordinates: point.layerPoint,
                        formSchema: [
                            new core_1.DynamicFormGroupModel({
                                id: "properties",
                                legend: "Properties",
                                group: [
                                    new core_1.DynamicInputModel({
                                        id: "plannumber",
                                        label: "Plan number",
                                        readOnly: true,
                                    }),
                                    new core_1.DynamicInputModel({
                                        id: "lotnumber",
                                        label: "Lot number",
                                        readOnly: true,
                                    }),
                                    new core_1.DynamicInputModel({
                                        id: "controllin",
                                        label: "Controlled by",
                                        readOnly: true,
                                    }),
                                    new core_1.DynamicInputModel({
                                        id: "fire_mean",
                                        label: "Mean fire intensity",
                                        readOnly: true,
                                    }),
                                    new core_1.DynamicInputModel({
                                        id: "fire_max",
                                        label: "Max fire intensity",
                                        readOnly: true,
                                    }),
                                ],
                            }),
                        ],
                        closeOnMapMove: true,
                        background: false,
                        hideCancelBtn: true,
                        submitBtnLabel: "Close",
                    });
                }
            };
            landParcelLayer.opacity = 80;
            yield landParcelLayer.show();
            return [landParcelLayer, fireRaster];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    setBbox() {
        if (typeof this.landParcelsJSON !== "undefined") {
            this.boundingBox4326 = turf_1.bbox(this.landParcelsJSON);
        }
    }
}
exports.NswFireJob = NswFireJob;


/***/ }),

/***/ "./src/app/jobs/job-types/risk/sew-job.ts":
/*!************************************************!*\
  !*** ./src/app/jobs/job-types/risk/sew-job.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_types_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types */ "../shared/src/job/job-types.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
class SewJob extends job_1.ClientJob {
    constructor() {
        super(...arguments);
        this.type = job_types_1.JobType.SEW;
        this.clientOnly = true;
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            const setupLayer = (layer) => {
                layer.colourScheme = new colour_scheme_1.D3ColourScheme("interpolateYlOrRd");
                layer.colourByProperty = {
                    options: [
                        {
                            label: "Min hazard",
                            key: "min",
                            minValue: 0,
                            maxValue: 10,
                        },
                        {
                            label: "Mean hazard",
                            key: "mean",
                            minValue: 0,
                            maxValue: 10,
                        },
                        {
                            label: "Max hazard",
                            key: "max",
                            minValue: 0,
                            maxValue: 10,
                        },
                    ],
                    selected: {
                        label: "Max hazard",
                        key: "max",
                        minValue: 0,
                        maxValue: 10,
                    },
                };
                layer.opacity = 100;
            };
            const waterPipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Water pipes", {
                id: "water-pipes",
                type: "line",
                source: "water-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "water-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/water_pipe.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(waterPipesLayer);
            const manholeLayer = new mapbox_gl_layer_1.MapboxGlLayer("Manholes", {
                id: "manholes",
                source: "manholes",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "manholes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/manhole.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(manholeLayer);
            const sewerERS = new mapbox_gl_layer_1.MapboxGlLayer("Sewer ERS", {
                id: "sewerERS",
                source: "sewerERS",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "sewerERS",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/sewerERS.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerERS);
            const sewerPipesLayer = new mapbox_gl_layer_1.MapboxGlLayer("Sewer pipes", {
                id: "sewer-pipes",
                type: "line",
                source: "sewer-pipes",
                paint: {
                    "line-width": 3,
                },
            }, {
                id: "sewer-pipes",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/sewer_pipe.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerPipesLayer);
            const sewerPumps = new mapbox_gl_layer_1.MapboxGlLayer("Sewer pump stations", {
                id: "sewer-pump",
                source: "sewer-pump",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "sewer-pump",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/Sewer_Pump_Stations.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(sewerPumps);
            const treatmentPlant = new mapbox_gl_layer_1.MapboxGlLayer("Treatment plants", {
                id: "treatment-plants",
                source: "treatment-plants",
                type: "fill",
            }, {
                id: "treatment-plants",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/treatment_plant.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(treatmentPlant);
            const waterPumps = new mapbox_gl_layer_1.MapboxGlLayer("Water pumps", {
                id: "water-pumps",
                source: "water-pumps",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "water-pumps",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/Water_Pump_Station.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(waterPumps);
            const waterStorages = new mapbox_gl_layer_1.MapboxGlLayer("Water storages", {
                id: "water-storages",
                source: "water-storages",
                type: "circle",
                paint: {
                    "circle-radius": 2,
                },
            }, {
                id: "water-storages",
                source: {
                    type: "geojson",
                    data: yield this.jobService.resolveDirTree(`geostack-data/spark/Public/sew/Water_Storages.geojson`, interfaces_1.FileLocation.GCS),
                },
            });
            setupLayer(waterStorages);
            const dimensions = {
                property: {
                    label: "property",
                    key: "property",
                    options: [
                        {
                            value: `results_grid_speed_max.0010-3857.tif`,
                            label: `Speed`,
                        },
                        {
                            value: `results_grid_height_max.0010-3857.tif`,
                            label: `Height`,
                        },
                        {
                            value: `results_grid_time_above_0.3_metre.0010-3857.tif`,
                            label: `Time above 0.3m`,
                        },
                    ],
                    selected: {
                        value: `results_grid_height_max.0010-3857.tif`,
                        label: `Height`,
                    },
                },
            };
            // const inundationLayer = new RasterMultiLayer(
            //   "Inundation",
            //   dimensions,
            //   dimensions =>
            //     `${this.configService.getMasterPublicFilesUrl()}sew/${
            //       dimensions["property"].selected.value
            //     }`
            // )
            // await inundationLayer.show()
            yield sewerPipesLayer.show();
            yield waterPipesLayer.show();
            return [
                manholeLayer,
                sewerERS,
                sewerPipesLayer,
                sewerPumps,
                treatmentPlant,
                waterPipesLayer,
                waterPumps,
                waterStorages,
            ];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    setBbox() { }
}
exports.SewJob = SewJob;


/***/ }),

/***/ "./src/app/jobs/job-types/shared/abs-sa-vector-tile-layers.ts":
/*!********************************************************************!*\
  !*** ./src/app/jobs/job-types/shared/abs-sa-vector-tile-layers.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const mapbox_gl_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/mapbox-gl-layer */ "./src/app/geo-web/map/map-layer/mapbox-gl-layer.ts");
exports.absSaVectorTileLayers = (publicFilesUrl) => [1, 2, 3, 4].map(saNum => {
    const sa = new mapbox_gl_layer_1.MapboxGlLayer(`ABS SA${saNum}`, {
        id: `abs-sa${saNum}`,
        type: "fill",
        source: `abs-sa${saNum}`,
        "source-layer": `sa${saNum}2016`,
        paint: {
            "fill-color": "rgba(255, 255, 255, 0)",
            "fill-outline-color": "#000000",
        },
    }, {
        id: `abs-sa${saNum}`,
        source: {
            type: "vector",
            tiles: [`${publicFilesUrl}abs-sa${saNum}/{z}/{x}/{y}.pbf`],
        },
    });
    sa.idByProperty = saNum <= 2 ? `SA${saNum}_MAIN16` : `SA${saNum}_CODE16`;
    sa.opacity = 30;
    return sa;
});


/***/ }),

/***/ "./src/app/jobs/job-types/spark-workspace/client-job.ts":
/*!**************************************************************!*\
  !*** ./src/app/jobs/job-types/spark-workspace/client-job.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/spark-workspace/job */ "../shared/src/job/job-types/spark-workspace/job.ts");
const job_2 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/spark-workspace/form-model.ts");
const map_editable_feature_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const bbox_1 = __webpack_require__(/*! @turf/bbox */ "./node_modules/@turf/bbox/main.es.js");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const dates_1 = __webpack_require__(/*! ../../../../../../shared/src/util/dates */ "../shared/src/util/dates.ts");
const map_contour_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-contour-layer */ "./src/app/geo-web/map/map-layer/map-contour-layer.ts");
const time_slider_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/time-slider */ "./src/app/geo-web/map/map-layer/time-slider.ts");
const geospatial_projections_1 = __webpack_require__(/*! ../../../../../../shared/src/util/geospatial-projections */ "../shared/src/util/geospatial-projections.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const wind_chart_1 = __webpack_require__(/*! ./wind-chart */ "./src/app/jobs/job-types/spark-workspace/wind-chart.ts");
const message_api_1 = __webpack_require__(/*! ../../../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
class SparkWorkspaceClientJob extends job_1.sparkWorkspaceJob(job_2.ClientJob) {
    constructor() {
        super(...arguments);
        this.inputFormModel = form_model_1.sparkFormRootModel;
        this.mapboxStyle = "mapbox://styles/mapbox/streets-v11";
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.keys(this.inputs.featureCollections)
                .filter(fc => typeof fc === "undefined")
                .forEach(key => {
                this.inputs.featureCollections[key] = turf_1.featureCollection([]);
            });
            this.startSourcesLayer = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Input fire sources", this.inputs.featureCollections.startSources, new colour_scheme_1.SolidColourScheme("#ff0000"));
            // this.startSourcesLayer.shapeOptions = { color: "#ff0000" }
            // this.startSourcesLayer.pointIconProperties = {
            //   iconSize: [30, 30],
            //   iconAnchor: [15, 15],
            //   iconUrl: "assets/img/aahs-symbols/fire/AAHS_FIRE_OP_SPOT_FIRE_CONF.png",
            // }
            this.startSourcesLayer.toolbarButtonOptions.point = {
                title: "Add fire source",
                primaryFaIcon: ["fas", "fire"],
                secondaryFaIcon: ["fas", "map-pin"],
            };
            this.startSourcesLayer.toolbarButtonOptions.polygon = {
                title: "Add fire polygon",
                primaryFaIcon: ["fas", "fire"],
                secondaryFaIcon: ["fas", "shapes"],
            };
            // This function is called when a new feature is created
            const getCurrentJobStartTime = (() => {
                return this.inputs.startTime;
            }).bind(this);
            this.startSourcesLayer.defaultFeatureProperties = {
                point: {
                    time: getCurrentJobStartTime,
                    radius: 0,
                },
                line: { time: getCurrentJobStartTime },
                polygon: { time: getCurrentJobStartTime },
            };
            this.startSourcesLayer.featurePropertiesFormModel = form_model_1.startSourceFormGroups;
            this.startSourcesLayer.featureCollectionObservable.subscribe(this.checkFeatures.bind(this));
            this.maskSourcesLayer = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Input mask polygons", this.inputs.featureCollections.masks, new colour_scheme_1.SolidColourScheme("#000000"));
            this.maskSourcesLayer.toolbarButtonOptions.polygon = {
                title: "Add mask polygon",
                primaryFaIcon: ["fas", "crop"],
            };
            this.maskSourcesLayer.defaultFeatureProperties.polygon = {
                time: getCurrentJobStartTime,
            };
            this.maskSourcesLayer.featurePropertiesFormModel = form_model_1.maskSourceFormGroups;
            yield this.startSourcesLayer.show();
            yield this.maskSourcesLayer.show();
            if (interfaces_1.isValidDirectoryTree(this.inputs.inputs.series.file)) {
                try {
                    const metCsv = yield this.layerService.getFile(yield this.jobService.resolveDirTree(this.inputs.inputs.series.file.path, this.inputs.inputs.series.file.location), rest_api_service_1.ResponseType.Text);
                    wind_chart_1.createWindChart(this.layerService, metCsv);
                }
                catch (error) {
                    console.log(`error generated met CSV chart:`);
                    console.log(error);
                }
            }
            return [this.startSourcesLayer, this.maskSourcesLayer];
        });
    }
    updateInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.startSourcesLayer.featureCollection = this.inputs.featureCollections.startSources;
            this.maskSourcesLayer.featureCollection = this.inputs.featureCollections.masks;
        });
    }
    createAdditionalLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.numberOfSubjobs === 0) {
                const geotiffPath = yield this.jobService.resolveDirTree(`${this.outputDirectory}${this.inputs.outputDataRasterFilename}`, this.outputStorageMode);
                const layers = yield this.layerService.geotiffLayerFactory([
                    {
                        geotiffPath,
                        layerSpecs: {
                            0: {
                                name: "Arrival time (raster)",
                                valueFormat: 'secondsToHMString("hm")',
                                hideLayer: true,
                            },
                            1: {
                                name: "Speed",
                                units: "m/s",
                                minValue: 0,
                            },
                            2: {
                                name: "Maximum intensity",
                                units: "kW/m",
                                minValue: 0,
                            },
                            3: {
                                name: "Maximum flame height",
                                units: "m",
                                minValue: 0,
                            },
                            4: {
                                name: "Elevation",
                                units: "m",
                            },
                            5: {
                                name: "Fuel age",
                                units: "years",
                                minValue: 0,
                            },
                            6: {
                                name: "Land classification",
                                valueFormat: {
                                    0: "Un-burnable",
                                    1: "Dry eucalypt - Vesta",
                                    2: "Grasslands",
                                    3: "Heathland",
                                    4: "Semi-arid mallee heath",
                                    5: "Spinifex grassland",
                                    6: "Pine",
                                    7: "Dry eucalypt - Leaflet 80",
                                    8: "Urban",
                                },
                                legendCells: [0, 1, 2, 3, 4, 5, 6, 7, 8],
                                minValue: 0,
                                maxValue: 8,
                            },
                            8: {
                                name: "Wind x-velocity",
                                units: "m/s",
                            },
                            9: {
                                name: "Wind y-velocity",
                                units: "m/s",
                            },
                        },
                    },
                ]);
                this.arrivalTimeLayer = layers[0];
                yield this.arrivalTimeLayer.init();
                const arrivalTimeContourLayer = new map_contour_layer_1.MapContourLayer("Arrival time contour", this.arrivalTimeLayer, "line");
                arrivalTimeContourLayer.opacity = 100;
                const arrivalTimeSlider = new time_slider_1.TimeSlider();
                arrivalTimeSlider.min = 1;
                arrivalTimeSlider.minDate = this.inputs.startTime;
                arrivalTimeSlider.max = this.arrivalTimeLayer.maxValue;
                arrivalTimeSlider.maxDate = this.inputs.endTime;
                arrivalTimeSlider.value = 1;
                arrivalTimeSlider.step = 60;
                arrivalTimeContourLayer.slider = arrivalTimeSlider;
                arrivalTimeContourLayer.sliderEnabled = true;
                const arrivalTimeIsochronesLayer = new map_contour_layer_1.MapContourLayer("Arrival time", this.arrivalTimeLayer, "fill");
                arrivalTimeIsochronesLayer.valueFormatFn = dates_1.secondsToHMString(":");
                arrivalTimeIsochronesLayer.transitionDelayMultiplier = 1;
                arrivalTimeIsochronesLayer.colourScheme = new colour_scheme_1.D3ColourScheme();
                arrivalTimeIsochronesLayer.opacity = 100;
                // Generate thresholds for isochrones
                arrivalTimeIsochronesLayer.thresholds = [];
                // Choose delta_time (seconds) based to get approximately 10 isochrones
                // 1 minute, 5m, 10m, 30m, 1hour, 2h, 3h, 4h, 5h
                const deltaTimes = [
                    60,
                    5 * 60,
                    10 * 60,
                    30 * 60,
                    60 * 60,
                    2 * 60 * 60,
                    3 * 60 * 60,
                    4 * 60 * 60,
                    5 * 60 * 60,
                ];
                // Find the dt which results in closest to 10 isochrones
                const diff = deltaTimes.map(dt => Math.abs(10 - this.arrivalTimeLayer.maxValue / dt));
                const dt = deltaTimes[diff.indexOf(Math.min(...diff))];
                for (let i = 0; i < this.arrivalTimeLayer.maxValue; i += dt) {
                    arrivalTimeIsochronesLayer.thresholds.push(i);
                }
                arrivalTimeIsochronesLayer.thresholds.push(this.arrivalTimeLayer.maxValue);
                arrivalTimeIsochronesLayer.downloadData.metadata = `Arrival time isochrones.
  Each polyon represents the fire boundary at a given time - where the value property is the time in seconds.
  Polygons are generated for the following times (after the simulation start time: ${this.inputs.startTime.toString()}):
  ${arrivalTimeIsochronesLayer.thresholds
                    .map(dates_1.secondsToHMString("hm"))
                    .join("\n")}`;
                yield Promise.all([
                    arrivalTimeContourLayer.show(),
                    arrivalTimeIsochronesLayer.show(),
                ]);
                return [
                    arrivalTimeContourLayer,
                    arrivalTimeIsochronesLayer,
                    // windVectorFieldLayer,
                    ...layers,
                ];
            }
            return [];
        });
    }
    setBbox() {
        // Add all input features so we can set map extent
        const featuresToFitMapTo = [];
        if (this.inputs.startSourcesProjection !== "EPSG:4326") {
            featuresToFitMapTo.push(...geospatial_projections_1.projectFeatureCollection(JSON.parse(JSON.stringify(this.inputs.featureCollections.startSources)), this.inputs.startSourcesProjection, "EPSG:4326").features);
        }
        else {
            featuresToFitMapTo.push(...this.inputs.featureCollections.startSources.features);
        }
        featuresToFitMapTo.push(...this.inputs.featureCollections.masks.features);
        // Create bounding box based on input features
        if (featuresToFitMapTo.length > 0) {
            this.boundingBox4326 = bbox_1.default(turf_1.featureCollection(featuresToFitMapTo));
        }
        if (typeof this.arrivalTimeLayer !== "undefined" &&
            typeof this.arrivalTimeLayer.getBbox() !== "undefined") {
            const geotiffBbox = this.arrivalTimeLayer.getBbox();
            this.boundingBox4326.forEach((coord, index) => {
                if (geotiffBbox[index] < coord * (-1 ^ Math.floor(index / 2))) {
                    this.boundingBox4326[index] = geotiffBbox[index];
                }
            });
        }
    }
    canJobRun() {
        return this.checkFeatures(this.startSourcesLayer.featureCollection);
    }
    checkFeatures(fc) {
        if (fc.features.length > 10) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Too many input features`,
                message: `There are too many input features, please delete some before running the job`,
                severity: "error",
            }));
            return false;
        }
        const fcBboxArea = turf_1.area(turf_1.bboxPolygon(bbox_1.default(fc)));
        const fcArea = turf_1.area(fc);
        if (fcArea > 10000000) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Features are too large`,
                message: `The input features are too large, please delete or reduce the size before running the job`,
                severity: "error",
            }));
            return false;
        }
        if (fcBboxArea > 25000000) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Features are too sparse`,
                message: `The input features cover too large an area, please reduce before running the job`,
                severity: "error",
            }));
            return false;
        }
        return true;
    }
}
exports.SparkWorkspaceClientJob = SparkWorkspaceClientJob;


/***/ }),

/***/ "./src/app/jobs/job-types/spark-workspace/form-model.ts":
/*!**************************************************************!*\
  !*** ./src/app/jobs/job-types/spark-workspace/form-model.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const file_browser_input_model_1 = __webpack_require__(/*! ../../../form/file-browser-input/file-browser-input-model */ "./src/app/form/file-browser-input/file-browser-input-model.ts");
const code_editor_model_1 = __webpack_require__(/*! ../../../form/monaco-editor/code-editor-model */ "./src/app/form/monaco-editor/code-editor-model.ts");
const form_interfaces_1 = __webpack_require__(/*! ../../../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../../../shared/src/user/user */ "../shared/src/user/user.ts");
const inputs_outputs_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/spark-workspace/inputs-outputs */ "../shared/src/job/job-types/spark-workspace/inputs-outputs.ts");
var SparkFormModeKey;
(function (SparkFormModeKey) {
    SparkFormModeKey["Basic"] = "basic";
    SparkFormModeKey["Advanced"] = "advanced";
})(SparkFormModeKey = exports.SparkFormModeKey || (exports.SparkFormModeKey = {}));
exports.sparkFormRootModel = new form_interfaces_1.FormRootModel();
exports.sparkFormRootModel.subjectPropertyKey = "inputs";
exports.sparkFormRootModel.modes = [
    {
        key: SparkFormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.User, user_1.GeowebUserRoles.Admin],
    },
    {
        key: SparkFormModeKey.Advanced,
        name: "Advanced",
        userRoles: [user_1.GeowebUserRoles.Admin],
    },
];
exports.sparkFormRootModel.defaultMode = exports.sparkFormRootModel.modes[0];
exports.sparkFormRootModel.schemaFactory = (currentFormMode, configService) => {
    return [
        {
            name: "Basic",
            modeKeys: [SparkFormModeKey.Basic, SparkFormModeKey.Advanced],
            form: {
                model: [
                    new core_1.DynamicDatePickerModel({
                        id: "startTime",
                        label: "Start time",
                        additional: {
                            showTime: true,
                            inline: false,
                        },
                        validators: {
                            required: null,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                        },
                    }),
                    new core_1.DynamicInputModel({
                        id: "simulationDuration",
                        label: "Simulation duration (hours)",
                        validators: {
                            required: null,
                            customValidator: string_1.floatValidator,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                            customValidator: string_1.floatValidator.errorMessage,
                        },
                    }),
                    new core_1.DynamicInputModel({
                        id: "simulationResolution",
                        label: "Simulation resolution (m)",
                        validators: {
                            required: null,
                            customValidator: string_1.floatValidator,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                            customValidator: string_1.floatValidator.errorMessage,
                        },
                    }),
                    new core_1.DynamicInputModel({
                        id: "simulationProjection",
                        label: "Simulation projection WKT",
                        validators: {
                            required: null,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                        },
                        hidden: currentFormMode.key !== SparkFormModeKey.Advanced,
                    }),
                    new core_1.DynamicSwitchModel({
                        id: `disableFileOutputs`,
                        label: `Disable file outputs`,
                        offLabel: "File outputs are ENABLED",
                        onLabel: "File outputs are DISABLED",
                        validators: {
                            required: null,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                        },
                        hidden: currentFormMode.key !== SparkFormModeKey.Advanced,
                    }),
                ],
            },
        },
        {
            name: "Data Input",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                // {
                //   name: "Features",
                //   modeKeys: [SparkFormModeKey.Advanced],
                //   form: {
                //     model: [],
                //   },
                // },
                {
                    name: "Meteorological",
                    modeKeys: [SparkFormModeKey.Advanced],
                    // Meteorological form control layouts (see below for form group layouts)
                    form: {
                        layout: {
                            baseDirectory: {
                                grid: {
                                    host: "ui-g-6 ui-md-3",
                                    control: "ui-g-12",
                                    label: "ui-g-12",
                                },
                                element: {
                                    host: "formgroup-container",
                                    label: "formgroup-label",
                                },
                            },
                            projection: {
                                grid: {
                                    host: "ui-g-6 ui-md-3",
                                },
                            },
                            windUseDirectionAndSpeed: {
                                grid: {
                                    host: "ui-g-6 ui-md-3",
                                },
                            },
                            file: {
                                grid: {
                                    host: "ui-g-12 ui-md-3",
                                },
                            },
                            directoryFilter: {
                                grid: {
                                    host: "ui-g-12 ui-md-3",
                                },
                            },
                            // Meteorological Layer scale factor / value offset form group layout
                            transform: {
                                grid: { host: "ui-g-12 ui-md-3" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            scaleFactor: {
                                grid: {
                                    host: "ui-g-6",
                                },
                            },
                            valueOffset: {
                                grid: {
                                    host: "ui-g-6",
                                },
                            },
                            startTimeOverride: {
                                grid: {
                                    host: "ui-g-6 ui-md-3",
                                },
                            },
                            timeConversionCoefficient: {
                                grid: {
                                    host: "ui-g-6 ui-md-3",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: `inputs`,
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: `meteorological`,
                                        group: [
                                            // new FileBrowserInputModel({
                                            //   id: `baseDirectory`,
                                            //   label: `Base directory`,
                                            //   options: { selectableType: "directory" },
                                            // }),
                                            new core_1.DynamicInputModel({
                                                id: `projection`,
                                                label: `Projection`,
                                            }),
                                            new core_1.DynamicSwitchModel({
                                                id: `windUseDirectionAndSpeed`,
                                                label: `Use wind direction and speed`,
                                                offLabel: "Use wind direction and speed",
                                                onLabel: "Use wind u and v",
                                                validators: {
                                                    required: null,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                },
                                            }),
                                            new core_1.DynamicFormGroupModel({
                                                id: `layers`,
                                                group: [
                                                    // Generate layer from groups
                                                    ...[
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "windDirection",
                                                            label: "Wind direction",
                                                        }),
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "windSpeed",
                                                            label: "Wind speed",
                                                        }),
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "temperature",
                                                            label: "Temperature",
                                                        }),
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "relativeHumidity",
                                                            label: "Relative humidity",
                                                        }),
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "dewPointTemperature",
                                                            label: "Dew point temperature",
                                                        }),
                                                        new SparkMeteorologicalInputLayerFormConfig({
                                                            key: "droughtFactor",
                                                            label: "Drought factor",
                                                        }),
                                                    ].map((layer, index) => new core_1.DynamicFormGroupModel({
                                                        id: layer.key,
                                                        label: layer.label,
                                                        group: [
                                                            // new FileBrowserInputModel({
                                                            //   id: `file`,
                                                            //   label: `File`,
                                                            //   options: { selectableType: "file" },
                                                            // }),
                                                            new core_1.DynamicInputModel({
                                                                id: `directoryFilter`,
                                                                label: "Filename filter",
                                                            }),
                                                            new core_1.DynamicFormGroupModel({
                                                                id: `transform`,
                                                                group: [
                                                                    new core_1.DynamicInputModel({
                                                                        id: `scaleFactor`,
                                                                        label: `Scale factor`,
                                                                        validators: {
                                                                            required: null,
                                                                            customValidator: string_1.floatValidator,
                                                                        },
                                                                        errorMessages: {
                                                                            required: "{{ label }} is required",
                                                                            customValidator: string_1.floatValidator.errorMessage,
                                                                        },
                                                                    }),
                                                                    new core_1.DynamicInputModel({
                                                                        id: `valueOffset`,
                                                                        label: "Value offset",
                                                                        validators: {
                                                                            required: null,
                                                                            customValidator: string_1.floatValidator,
                                                                        },
                                                                        errorMessages: {
                                                                            required: "{{ label }} is required",
                                                                            customValidator: string_1.floatValidator.errorMessage,
                                                                        },
                                                                    }),
                                                                ],
                                                            }),
                                                        ],
                                                    }, 
                                                    // Meteorological layer form group layout
                                                    {
                                                        grid: {
                                                            label: "ui-g-12 ui-md-3",
                                                            host: "ui-g-12",
                                                        },
                                                        element: {
                                                            label: "formgroup-label",
                                                            host: "formgroup-container formgroup-tabular",
                                                            children: "formgroup-tabular-child",
                                                        },
                                                    })),
                                                ],
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `startTimeOverride`,
                                                label: `Start time override`,
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `timeConversionCoefficient`,
                                                label: `Time conversion coefficient`,
                                                validators: {
                                                    required: null,
                                                    customValidator: string_1.floatValidator,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                    customValidator: string_1.floatValidator.errorMessage,
                                                },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: "Terrain",
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            file: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            projection: {
                                grid: {
                                    host: "ui-g-12 ui-md-1",
                                },
                            },
                            defaultValue: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            interpolation: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            modelName: {
                                grid: {
                                    host: "ui-g-12 ui-md-3",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: `inputs`,
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: `terrain`,
                                        group: [
                                            ...[
                                                new SparkInputLayerFormConfig({
                                                    key: "landClassification",
                                                    label: "Land classification",
                                                    defaultValueDisabled: true,
                                                    interpolationDisabled: true,
                                                    modelNameDisabled: true,
                                                }),
                                                new SparkInputLayerFormConfig({
                                                    key: "fireHistory",
                                                    label: "Fire history",
                                                    modelNameDisabled: true,
                                                }),
                                                new SparkInputLayerFormConfig({
                                                    key: "elevation",
                                                    label: "Elevation",
                                                    modelNameDisabled: true,
                                                }),
                                                new SparkInputLayerFormConfig({
                                                    key: "fuelLoad",
                                                    label: "Fuel load",
                                                    modelNameDisabled: true,
                                                }),
                                                new SparkInputLayerFormConfig({
                                                    key: "curing",
                                                    label: "Curing",
                                                    modelNameDisabled: true,
                                                }),
                                            ].map((layer, idx) => new core_1.DynamicFormGroupModel({
                                                id: layer.key,
                                                label: layer.label,
                                                group: generateInputLayerFormModels(layer),
                                            }, 
                                            // Terrain layer form group layout (this has to go here as we don't know the id's for the formGRoups)
                                            {
                                                grid: {
                                                    label: "ui-g-12 ui-md-2",
                                                    host: "ui-g-12",
                                                },
                                                element: {
                                                    label: "formgroup-label",
                                                    host: "formgroup-container formgroup-tabular",
                                                    children: "formgroup-tabular-child",
                                                },
                                            })),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: "Custom",
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            custom: {
                                grid: {
                                    container: "ui-g-12",
                                    group: "ui-g-12",
                                    label: "ui-g-12",
                                },
                                element: {
                                    group: "formgroup-container formgroup-tabular",
                                    children: "formgroup-tabular-child",
                                    container: "formgroup-container",
                                    label: "formgroup-label",
                                },
                            },
                            file: {
                                grid: {
                                    host: "ui-g-12 ui-md-3",
                                },
                            },
                            projection: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            defaultValue: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            interpolation: {
                                grid: {
                                    host: "ui-g-12 ui-md-2",
                                },
                            },
                            modelName: {
                                grid: {
                                    host: "ui-g-12 ui-md-3",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: `inputs`,
                                group: [
                                    new core_1.DynamicFormArrayModel({
                                        id: "custom",
                                        label: "Custom layers",
                                        initialCount: 0,
                                        // defaultValues: index =>
                                        //   new InputLayer(`custom_layer_${index + 1}`),
                                        groupFactory: () => generateInputLayerFormModels(new SparkInputLayerFormConfig({}), new inputs_outputs_1.InputLayer("")),
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: "Series",
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            file: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            timeZone: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            windRandomVariation: {
                                grid: { host: "ui-g-12 ui-md-4" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            speed: {
                                grid: {
                                    host: "ui-g-6",
                                },
                            },
                            direction: {
                                grid: {
                                    host: "ui-g-6",
                                },
                            },
                            pythonScript: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: `inputs`,
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: `series`,
                                        group: [
                                            // new FileBrowserInputModel({
                                            //   id: `file`,
                                            //   label: `File`,
                                            //   options: { selectableType: "file" },
                                            // }),
                                            new core_1.DynamicInputModel({
                                                id: `timeZone`,
                                                label: "Time zone",
                                            }),
                                            new core_1.DynamicFormGroupModel({
                                                id: `windRandomVariation`,
                                                group: [
                                                    new core_1.DynamicInputModel({
                                                        id: `speed`,
                                                        label: `Speed`,
                                                        validators: {
                                                            required: null,
                                                            customValidator: string_1.floatValidator,
                                                        },
                                                        errorMessages: {
                                                            required: "{{ label }} is required",
                                                            customValidator: string_1.floatValidator.errorMessage,
                                                        },
                                                    }),
                                                    new core_1.DynamicInputModel({
                                                        id: `direction`,
                                                        label: "Direction",
                                                        validators: {
                                                            required: null,
                                                            customValidator: string_1.floatValidator,
                                                        },
                                                        errorMessages: {
                                                            required: "{{ label }} is required",
                                                            customValidator: string_1.floatValidator.errorMessage,
                                                        },
                                                    }),
                                                ],
                                            }),
                                            new code_editor_model_1.DynamicCodeEditorModel({
                                                id: `pythonScript`,
                                                label: `Time series python script`,
                                                options: { language: "python" },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
            ],
        },
        {
            name: "Initialisation Scripts",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Start C Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "initialisationScripts",
                                group: [
                                    new code_editor_model_1.DynamicCodeEditorModel({
                                        id: `startC`,
                                        label: `Start C script`,
                                        options: { language: "cpp" },
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Start Python Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            files: {
                                grid: {
                                    control: "ui-g-12",
                                    group: "ui-g-12",
                                    label: "ui-g-12",
                                },
                                element: {
                                    group: "formgroup-container formgroup-tabular-horizontal",
                                    children: "formgroup-tabular-child",
                                    control: "formgroup-container",
                                    label: "formgroup-label",
                                },
                            },
                            file: {
                                grid: {
                                    host: "",
                                },
                            },
                            script: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "initialisationScripts",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "startPython",
                                        group: [
                                            // new DynamicFormArrayModel({
                                            //   id: "files",
                                            //   label: "Input files",
                                            //   initialCount: 0,
                                            //   groupFactory: () => [
                                            //     new FileBrowserInputModel({
                                            //       id: `file`,
                                            //       options: { selectableType: "file" },
                                            //     }),
                                            //   ],
                                            // }),
                                            new code_editor_model_1.DynamicCodeEditorModel({
                                                id: `script`,
                                                label: `Start python script`,
                                                options: { language: "python" },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `End C Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            endC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "initialisationScripts",
                                group: [
                                    new code_editor_model_1.DynamicCodeEditorModel({
                                        id: `endC`,
                                        label: `End C script`,
                                        options: { language: "cpp" },
                                    }),
                                ],
                            }),
                        ],
                    },
                },
            ],
        },
        {
            name: "Rate of Spread Models",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [...Array(12).keys()].map(idx => {
                return {
                    name: `RoS ${idx + 1}`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "rateOfSpreadModels",
                                group: [
                                    new code_editor_model_1.DynamicCodeEditorModel({
                                        id: `${idx + 1}`,
                                        label: `RoS ${idx + 1}`,
                                        options: { language: "cpp" },
                                    }),
                                ],
                            }),
                        ],
                    },
                };
            }),
        },
        {
            name: "Post-processing",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Output Header`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "postProcessingScripts",
                                group: [
                                    new code_editor_model_1.DynamicCodeEditorModel({
                                        id: `header`,
                                        label: `Output header`,
                                        options: { language: "cpp" },
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                ...[...Array(12).keys()].map(idx => {
                    return {
                        name: `Output ${idx + 1}`,
                        modeKeys: [SparkFormModeKey.Advanced],
                        form: {
                            model: [
                                new core_1.DynamicFormGroupModel({
                                    id: "postProcessingScripts",
                                    group: [
                                        new code_editor_model_1.DynamicCodeEditorModel({
                                            id: `${idx + 1}`,
                                            label: `Output ${idx + 1}`,
                                            options: { language: "cpp" },
                                        }),
                                    ],
                                }),
                            ],
                        },
                    };
                }),
            ],
        },
        {
            name: "Ensemble",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Ensemble Parameters`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            ensemble: {
                                grid: { host: "ui-g-12" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            geostackEnsemble: {
                                grid: {
                                    host: "ui-g-12",
                                    label: "ui-g-12 ui-md-12 ui-lg-4",
                                    children: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                                element: {
                                    label: "formgroup-label",
                                    host: "formgroup-container formgroup-tabular",
                                    children: "formgroup-tabular-child",
                                },
                            },
                            numSimulations: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                            },
                            outputLayers: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                            },
                            randomSeed: {
                                grid: {
                                    host: "ui-g-12 ui-md-12 ui-lg-4",
                                },
                            },
                            // unitType: {
                            //   grid: {
                            //     host: "ui-g-12 ui-md-6 ui-lg-4",
                            //   },
                            // },
                            outputRasterType: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "ensemble",
                                        group: [
                                            new core_1.DynamicInputModel({
                                                id: `numSimulations`,
                                                label: `Number of simulations`,
                                                validators: {
                                                    required: null,
                                                    customValidator: string_1.positiveIntegerValidator,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                    customValidator: string_1.positiveIntegerValidator.errorMessage,
                                                },
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `outputLayers`,
                                                label: `Number of output layers`,
                                                validators: {
                                                    required: null,
                                                    customValidator: string_1.positiveIntegerValidator,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                    customValidator: string_1.positiveIntegerValidator.errorMessage,
                                                },
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `randomSeed`,
                                                label: `Random seed`,
                                                validators: {
                                                    required: null,
                                                    customValidator: string_1.positiveIntegerValidator,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                    customValidator: string_1.positiveIntegerValidator.errorMessage,
                                                },
                                            }),
                                            // new DynamicSelectModel({
                                            //   id: `unitType`,
                                            //   label: "Raster output unit",
                                            //   options: [
                                            //     {
                                            //       label: "Undefined",
                                            //       value: OutputUnitType.Undefined,
                                            //     },
                                            //     {
                                            //       label: "Time",
                                            //       value: OutputUnitType.Time,
                                            //     },
                                            //     {
                                            //       label: "Distance",
                                            //       value: OutputUnitType.Distance,
                                            //     },
                                            //     {
                                            //       label: "Temperature",
                                            //       value: OutputUnitType.Temperature,
                                            //     },
                                            //     {
                                            //       label: "HeatFluxDensity",
                                            //       value: OutputUnitType.HeatFluxDensity,
                                            //     },
                                            //     {
                                            //       label: "Percent",
                                            //       value: OutputUnitType.Percent,
                                            //     },
                                            //     {
                                            //       label: "Degress",
                                            //       value: OutputUnitType.Degress,
                                            //     },
                                            //     {
                                            //       label: "SpeedInMs",
                                            //       value: OutputUnitType.SpeedInMs,
                                            //     },
                                            //     {
                                            //       label: "SpeedInKmh",
                                            //       value: OutputUnitType.SpeedInKmh,
                                            //     },
                                            //   ],
                                            //   validators: {
                                            //     required: null,
                                            //   },
                                            //   errorMessages: {
                                            //     required: "{{ label }} is required",
                                            //   },
                                            // }),
                                            new core_1.DynamicSelectModel({
                                                id: `outputRasterType`,
                                                label: "Raster output type",
                                                options: [
                                                    {
                                                        label: "Unknown",
                                                        value: inputs_outputs_1.GeotiffType.Unknown,
                                                    },
                                                    {
                                                        label: "uInt8",
                                                        value: inputs_outputs_1.GeotiffType.uInt8,
                                                    },
                                                    {
                                                        label: "uInt16",
                                                        value: inputs_outputs_1.GeotiffType.uInt16,
                                                    },
                                                    {
                                                        label: "Int16",
                                                        value: inputs_outputs_1.GeotiffType.Int16,
                                                    },
                                                    {
                                                        label: "uInt32",
                                                        value: inputs_outputs_1.GeotiffType.uInt32,
                                                    },
                                                    {
                                                        label: "Int32",
                                                        value: inputs_outputs_1.GeotiffType.Int32,
                                                    },
                                                    {
                                                        label: "Float32",
                                                        value: inputs_outputs_1.GeotiffType.Float32,
                                                    },
                                                    {
                                                        label: "Float64",
                                                        value: inputs_outputs_1.GeotiffType.Float64,
                                                    },
                                                    {
                                                        label: "ComplexInt16",
                                                        value: inputs_outputs_1.GeotiffType.ComplexInt16,
                                                    },
                                                    {
                                                        label: "ComplexInt32",
                                                        value: inputs_outputs_1.GeotiffType.ComplexInt32,
                                                    },
                                                    {
                                                        label: "ComplexFloat32",
                                                        value: inputs_outputs_1.GeotiffType.ComplexFloat32,
                                                    },
                                                    {
                                                        label: "ComplexFloat64",
                                                        value: inputs_outputs_1.GeotiffType.ComplexFloat64,
                                                    },
                                                ],
                                                validators: {
                                                    required: null,
                                                },
                                                errorMessages: {
                                                    required: "{{ label }} is required",
                                                },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            new core_1.DynamicFormGroupModel({
                                id: "geostackEnsemble",
                                label: "Geostack ensemble options:",
                                group: [
                                    new core_1.DynamicInputModel({
                                        id: `seedStart`,
                                        label: `Seed start`,
                                        validators: {
                                            required: null,
                                            customValidator: string_1.positiveIntegerValidator,
                                        },
                                        errorMessages: {
                                            required: "{{ label }} is required",
                                            customValidator: string_1.positiveIntegerValidator.errorMessage,
                                        },
                                    }),
                                    new core_1.DynamicInputModel({
                                        id: `seedEnd`,
                                        label: `Seed end`,
                                        validators: {
                                            required: null,
                                            customValidator: string_1.positiveIntegerValidator,
                                        },
                                        errorMessages: {
                                            required: "{{ label }} is required",
                                            customValidator: string_1.positiveIntegerValidator.errorMessage,
                                        },
                                    }),
                                    new file_browser_input_model_1.FileBrowserInputModel({
                                        id: `seedCsv`,
                                        label: `Seed CSV (no line-breaks)`,
                                        options: { selectableType: "file" },
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Ensemble Start Point Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "ensemble",
                                        group: [
                                            new code_editor_model_1.DynamicCodeEditorModel({
                                                id: `startPointScript`,
                                                label: `Start point python script`,
                                                options: { language: "python" },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Ensemble Stats. Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "ensemble",
                                        group: [
                                            new code_editor_model_1.DynamicCodeEditorModel({
                                                id: `cScript`,
                                                label: `Ensemble statistics C script`,
                                                options: { language: "cpp" },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Ensemble Sims. Script`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "ensemble",
                                        group: [
                                            new code_editor_model_1.DynamicCodeEditorModel({
                                                id: `pythonScript`,
                                                label: `Ensemble simulations python script`,
                                                options: { language: "python" },
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Reduction`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            reduction: {
                                grid: { host: "ui-g-12" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            layers: {
                                grid: {
                                    control: "ui-g-12",
                                    group: "ui-g-12",
                                    label: "ui-g-12",
                                },
                                element: {
                                    group: "formgroup-container formgroup-tabular",
                                    children: "formgroup-tabular-child",
                                    control: "formgroup-container",
                                    label: "formgroup-label",
                                },
                            },
                            number: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                            },
                            type: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-4",
                                },
                            },
                            pythonScript: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "ensemble",
                                        group: [
                                            new core_1.DynamicFormGroupModel({
                                                id: "reduction",
                                                group: [
                                                    new core_1.DynamicFormArrayModel({
                                                        id: "layers",
                                                        label: "Reduction layers",
                                                        initialCount: 0,
                                                        groupFactory: () => [
                                                            new core_1.DynamicInputModel({
                                                                id: `number`,
                                                                label: `Layer number`,
                                                                validators: {
                                                                    required: null,
                                                                    customValidator: string_1.positiveIntegerValidator,
                                                                },
                                                                errorMessages: {
                                                                    required: "{{ label }} is required",
                                                                    customValidator: string_1.positiveIntegerValidator.errorMessage,
                                                                },
                                                            }),
                                                            new core_1.DynamicSelectModel({
                                                                id: `type`,
                                                                label: "Reduction type",
                                                                options: [
                                                                    {
                                                                        label: "None",
                                                                        value: inputs_outputs_1.ReductionType.None,
                                                                    },
                                                                    {
                                                                        label: "Max",
                                                                        value: inputs_outputs_1.ReductionType.Max,
                                                                    },
                                                                    {
                                                                        label: "Min",
                                                                        value: inputs_outputs_1.ReductionType.Min,
                                                                    },
                                                                    {
                                                                        label: "Integral",
                                                                        value: inputs_outputs_1.ReductionType.Integral,
                                                                    },
                                                                    {
                                                                        label: "Mean",
                                                                        value: inputs_outputs_1.ReductionType.Mean,
                                                                    },
                                                                    {
                                                                        label: "Stdev",
                                                                        value: inputs_outputs_1.ReductionType.Stdev,
                                                                    },
                                                                    {
                                                                        label: "RMS",
                                                                        value: inputs_outputs_1.ReductionType.RMS,
                                                                    },
                                                                    {
                                                                        label: "Sum",
                                                                        value: inputs_outputs_1.ReductionType.Sum,
                                                                    },
                                                                    {
                                                                        label: "HeavisideIntegral",
                                                                        value: inputs_outputs_1.ReductionType.HeavisideIntegral,
                                                                    },
                                                                    {
                                                                        label: "PerimiterLengthIntegral",
                                                                        value: inputs_outputs_1.ReductionType.PerimiterLengthIntegral,
                                                                    },
                                                                    {
                                                                        label: "Var",
                                                                        value: inputs_outputs_1.ReductionType.Var,
                                                                    },
                                                                    {
                                                                        label: "Covar",
                                                                        value: inputs_outputs_1.ReductionType.Covar,
                                                                    },
                                                                    {
                                                                        label: "CountUnique",
                                                                        value: inputs_outputs_1.ReductionType.CountUnique,
                                                                    },
                                                                    {
                                                                        label: "MaxIndexed",
                                                                        value: inputs_outputs_1.ReductionType.MaxIndexed,
                                                                    },
                                                                ],
                                                                validators: {
                                                                    required: null,
                                                                },
                                                                errorMessages: {
                                                                    required: "{{ label }} is required",
                                                                },
                                                            }),
                                                        ],
                                                    }),
                                                    new code_editor_model_1.DynamicCodeEditorModel({
                                                        id: `pythonScript`,
                                                        label: `Reduction python script`,
                                                        options: { language: "python" },
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
            ],
        },
        {
            name: "Extra Models",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Firebrands`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: [
                        {
                            name: `Parameters`,
                            modeKeys: [SparkFormModeKey.Advanced],
                            form: {
                                layout: {
                                    firebrand: {
                                        grid: { host: "ui-g-12" },
                                        element: {
                                            host: "formgroup-container",
                                        },
                                    },
                                },
                                model: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "inputs",
                                        group: [
                                            new core_1.DynamicFormGroupModel({
                                                id: "firebrand",
                                                group: [
                                                    new core_1.DynamicSwitchModel({
                                                        id: `enabled`,
                                                        label: "Enable Firebrands",
                                                        offLabel: "Disabled",
                                                        onLabel: "Enabled",
                                                    }),
                                                    new core_1.DynamicInputModel({
                                                        id: `elevationLayerName`,
                                                        label: `Elevation layer name`,
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            },
                        },
                        {
                            name: `Creation Script`,
                            modeKeys: [SparkFormModeKey.Advanced],
                            form: {
                                model: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "inputs",
                                        group: [
                                            new core_1.DynamicFormGroupModel({
                                                id: "firebrand",
                                                group: [
                                                    new code_editor_model_1.DynamicCodeEditorModel({
                                                        id: `creationCScript`,
                                                        label: `Firebrand creation C script`,
                                                        options: { language: "cpp" },
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            },
                        },
                        {
                            name: `Update Script`,
                            modeKeys: [SparkFormModeKey.Advanced],
                            form: {
                                model: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "inputs",
                                        group: [
                                            new core_1.DynamicFormGroupModel({
                                                id: "firebrand",
                                                group: [
                                                    new code_editor_model_1.DynamicCodeEditorModel({
                                                        id: `updateCScript`,
                                                        label: `Firebrand update C script`,
                                                        options: { language: "cpp" },
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            },
                        },
                        {
                            name: `Surface Growth Script`,
                            modeKeys: [SparkFormModeKey.Advanced],
                            form: {
                                model: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "inputs",
                                        group: [
                                            new core_1.DynamicFormGroupModel({
                                                id: "firebrand",
                                                group: [
                                                    new code_editor_model_1.DynamicCodeEditorModel({
                                                        id: `surfaceGrowthCScript`,
                                                        label: `Firebrand surface growth C script`,
                                                        options: { language: "cpp" },
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            },
                        },
                    ],
                },
                {
                    name: `Disruption`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            disruption: {
                                grid: { host: "ui-g-12" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            shapeFile: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-2",
                                },
                            },
                            shapeFileProjection: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-5",
                                },
                            },
                            clearState: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                            overwriteClassification: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-2",
                                },
                            },
                            overwriteClassificationValue: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-10",
                                },
                            },
                            overwriteUserLayer: {
                                grid: {
                                    host: "ui-g-12 ui-md-12 ui-lg-2",
                                },
                            },
                            overwriteUserLayerName: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-5",
                                },
                            },
                            overwriteNetworkStateName: {
                                grid: {
                                    host: "ui-g-12 ui-md-6 ui-lg-5",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "disruption",
                                        group: [
                                            // new FileBrowserInputModel({
                                            //   id: `shapeFile`,
                                            //   label: `File`,
                                            //   options: { selectableType: "file" },
                                            // }),
                                            new core_1.DynamicInputModel({
                                                id: `shapeFileProjection`,
                                                label: "Projection (WKT)",
                                            }),
                                            new core_1.DynamicSwitchModel({
                                                id: `clearState`,
                                                label: "Set state to zero",
                                                offLabel: "Disabled",
                                                onLabel: "Enabled",
                                            }),
                                            new core_1.DynamicSwitchModel({
                                                id: `overwriteClassification`,
                                                label: "Overwrite classification",
                                                offLabel: "Disabled",
                                                onLabel: "Enabled",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "overwriteClassificationValue",
                                                label: "Classification overwrite value",
                                            }),
                                            new core_1.DynamicSwitchModel({
                                                id: `overwriteUserLayer`,
                                                label: "Overwrite user layer data",
                                                offLabel: "Disabled",
                                                onLabel: "Enabled",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `overwriteUserLayerName`,
                                                label: "Overwrite user layer name",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `overwriteNetworkStateName`,
                                                label: "Shapefile state name",
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
                {
                    name: `Near Field`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            nearField: {
                                grid: { host: "ui-g-12" },
                                element: {
                                    host: "formgroup-container",
                                },
                            },
                            enabled: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                            functionParam: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            magnitudeParam: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            windConversion: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            elevationParam: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            elevationMaxHeight: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            overwriteUserLayer: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                            elevationLayerName: {
                                grid: {
                                    host: "ui-g-12 ui-md-4",
                                },
                            },
                        },
                        model: [
                            new core_1.DynamicFormGroupModel({
                                id: "inputs",
                                group: [
                                    new core_1.DynamicFormGroupModel({
                                        id: "nearField",
                                        group: [
                                            new core_1.DynamicSwitchModel({
                                                id: `enabled`,
                                                label: "Enable near-filed model",
                                                offLabel: "Disabled",
                                                onLabel: "Enabled",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "functionParam",
                                                label: "Function parameter",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "magnitudeParam",
                                                label: "Magnitude parameter",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "windConversion",
                                                label: "Wind conversion to m/s",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "elevationParam",
                                                label: "Elevation parameter",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: "elevationMaxHeight",
                                                label: "Elevation max height",
                                            }),
                                            new core_1.DynamicInputModel({
                                                id: `elevationLayerName`,
                                                label: "Elevation layer name",
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        ],
                    },
                },
            ],
        },
    ];
};
class SparkMeteorologicalInputLayerFormConfig {
    constructor(obj) {
        this.key = "";
        this.label = "";
        Object.assign(this, obj);
    }
}
class SparkInputLayerFormConfig {
    constructor(obj) {
        this.key = "";
        this.label = "";
        this.defaultValueDisabled = false;
        this.interpolationDisabled = false;
        this.modelNameDisabled = false;
        Object.assign(this, obj);
    }
}
function generateInputLayerFormModels(layer, defaultValues = {}) {
    return [
        // new FileBrowserInputModel({
        //   id: `file`,
        //   label: `File`,
        //   options: { selectableType: "file" },
        // }),
        new core_1.DynamicInputModel({
            id: `projection`,
            label: "Projection (WKT)",
            value: defaultValues.projection,
        }),
        new core_1.DynamicInputModel({
            id: `defaultValue`,
            label: "Default value",
            validators: {
                required: null,
                customValidator: string_1.floatValidator,
            },
            errorMessages: {
                required: "{{ label }} is required",
                customValidator: string_1.floatValidator.errorMessage,
            },
            disabled: layer.defaultValueDisabled,
            value: defaultValues.defaultValue,
        }),
        new core_1.DynamicSelectModel({
            id: `interpolation`,
            label: "Interpolation",
            options: [
                {
                    label: "Nearest",
                    value: inputs_outputs_1.InputLayerInterpolation.Nearest,
                },
                {
                    label: "Bilinear",
                    value: inputs_outputs_1.InputLayerInterpolation.Bilinear,
                },
                {
                    label: "Bicubic",
                    value: inputs_outputs_1.InputLayerInterpolation.Bicubic,
                },
            ],
            validators: {
                required: null,
            },
            errorMessages: {
                required: "{{ label }} is required",
            },
            disabled: layer.interpolationDisabled,
            value: defaultValues.interpolation,
        }),
        new core_1.DynamicInputModel({
            id: `modelName`,
            label: "Model name",
            disabled: layer.modelNameDisabled,
            value: defaultValues.modelName,
            validators: {
                required: null,
            },
            errorMessages: {
                required: "{{ label }} is required",
            },
        }),
    ];
}
exports.startSourceFormGroups = {
    point: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicInputModel({
                    id: "radius",
                    label: "Point Radius",
                    step: 1,
                    validators: {
                        required: null,
                        customValidator: string_1.positiveIntegerValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.positiveIntegerValidator.errorMessage,
                    },
                }),
                new core_1.DynamicDatePickerModel({
                    id: "time",
                    label: "Start Time",
                    additional: { showTime: true, inline: true },
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
            ],
        }),
        new core_1.DynamicFormGroupModel({
            id: "geometry",
            legend: "Geometry",
            group: [
                new core_1.DynamicFormGroupModel({
                    id: "coordinates",
                    legend: "Coordinates",
                    group: [
                        new core_1.DynamicInputModel({
                            id: "0",
                            label: "Longitude",
                            validators: {
                                required: null,
                                customValidator: string_1.longitudeValidator,
                            },
                            errorMessages: {
                                required: "{{ label }} is required",
                                customValidator: string_1.longitudeValidator.errorMessage,
                            },
                        }),
                        new core_1.DynamicInputModel({
                            id: "1",
                            label: "Latitude",
                            validators: {
                                required: null,
                                customValidator: string_1.latitudeValidator,
                            },
                            errorMessages: {
                                required: "{{ label }} is required",
                                customValidator: string_1.latitudeValidator.errorMessage,
                            },
                        }),
                    ],
                }),
            ],
        }),
    ],
    line: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicDatePickerModel({
                    id: "time",
                    label: "Start Time",
                    additional: { showTime: true, inline: true },
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
            ],
        }),
    ],
    polygon: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicDatePickerModel({
                    id: "time",
                    label: "Start Time",
                    additional: { showTime: true, inline: true },
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
            ],
        }),
    ],
};
exports.maskSourceFormGroups = {
    polygon: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicDatePickerModel({
                    id: "time",
                    label: "Start Time",
                    additional: { showTime: true, inline: true },
                    validators: {
                        required: null,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                    },
                }),
            ],
        }),
    ],
};


/***/ }),

/***/ "./src/app/jobs/job-types/spark-workspace/wind-chart.ts":
/*!**************************************************************!*\
  !*** ./src/app/jobs/job-types/spark-workspace/wind-chart.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const c3_1 = __webpack_require__(/*! c3 */ "./node_modules/c3/c3.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
// Date/Time,Temp,RH,WindDir,WindSp,DF,Curing ,CloudCover
// 2015-12-25T08:00:00,22.1,37.7,11.9,41.3,9.7,97,12
// 2015-12-25T09:00:00,22.1,37.7,11.9,41.3,9.7,97,12
// 2015-12-25T10:00:00,24.1,34.8,6.2,41.1,9.7,97,12
// 2015-12-25T11:00:00,25.9,31.7,3.4,45,9.7,97,12
// 2015-12-25T11:59:00,29.7,23.9,1.2,43.2,9.7,97,13
// 2015-12-25T12:59:00,31.2,20.1,356.8,42.6,9.7,97,14
// 2015-12-25T13:59:00,32.1,17.8,354.6,40.7,9.7,97,15
// 2015-12-25T14:58:00,32.6,16.9,354.6,38.9,9.7,97,18.6
// 2015-12-25T16:00:00,32.8,17,354.6,35.7,9.7,97,22.4
// 2015-12-25T17:00:00,32.6,17.7,354.6,33.7,9.7,97,26
// 2015-12-25T18:00:00,32.1,18.7,355.8,31.5,9.7,97,20
exports.createWindChart = (layerService, metCsv) => {
    const parsedOutput = string_1.parseCsv(metCsv).reduce((acc, col, idx) => {
        if (idx !== 0) {
            acc["date"].push(`${col[0]}+11`);
            acc["wind_direction"].push(parseFloat(col[3]));
            acc["wind_speed"].push(parseFloat(col[4]));
        }
        return acc;
    }, { date: [], wind_direction: [], wind_speed: [] });
    layerService.createNewChart({
        hide: true,
        chart: c3_1.generate({
            title: { text: `Wind` },
            data: {
                // labels: { format: format(".2f") },
                xFormat: "%Y-%m-%dT%H:%M:%S%Z",
                x: "x",
                columns: [
                    ["x", ...parsedOutput["date"]],
                    ["Wind Direction", ...parsedOutput["wind_direction"]],
                    ["Wind Speed", ...parsedOutput["wind_speed"]],
                ],
                axes: {
                    "Wind Speed": "y",
                    "Wind Direction": "y2",
                },
                type: "line",
                types: {
                    "Wind Direction": "scatter",
                },
            },
            axis: {
                x: {
                    type: "timeseries",
                    localtime: true,
                    tick: {
                        format: "%d/%m/%Y %H:%M",
                        culling: { max: 3 },
                    },
                },
                y: {
                    label: {
                        text: `Wind speed`,
                        position: "outer-middle",
                    },
                    min: 0,
                },
                y2: {
                    label: {
                        text: `Wind direction`,
                        position: "outer-middle",
                    },
                    min: 0,
                    max: 360,
                    show: true,
                    tick: {
                        values: [0, 90, 180, 270],
                        format: val => ["S", "SW", "W", "NW", "N", "NE", "E", "SE"][Math.floor(val / 45)],
                    },
                },
            },
            legend: { position: "inset" },
        }),
    });
};


/***/ }),

/***/ "./src/app/jobs/job-types/spark/client-job.ts":
/*!****************************************************!*\
  !*** ./src/app/jobs/job-types/spark/client-job.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const spark_job_1 = __webpack_require__(/*! ../../../../../../shared/src/job/job-types/spark/spark-job */ "../shared/src/job/job-types/spark/spark-job.ts");
const job_1 = __webpack_require__(/*! ../../job */ "./src/app/jobs/job.ts");
const form_model_1 = __webpack_require__(/*! ./form-model */ "./src/app/jobs/job-types/spark/form-model.ts");
const map_editable_feature_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-editable-feature-layer */ "./src/app/geo-web/map/map-layer/map-editable-feature-layer.ts");
const bbox_1 = __webpack_require__(/*! @turf/bbox */ "./node_modules/@turf/bbox/main.es.js");
const turf_1 = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
const map_geotiff_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-geotiff-layer */ "./src/app/geo-web/map/map-layer/map-geotiff-layer.ts");
const colour_scheme_1 = __webpack_require__(/*! src/app/geo-web/map/colour-scheme/colour-scheme */ "./src/app/geo-web/map/colour-scheme/colour-scheme.ts");
const dates_1 = __webpack_require__(/*! ../../../../../../shared/src/util/dates */ "../shared/src/util/dates.ts");
const time_slider_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/time-slider */ "./src/app/geo-web/map/map-layer/time-slider.ts");
const rest_api_service_1 = __webpack_require__(/*! src/app/services/rest-api.service */ "./src/app/services/rest-api.service.ts");
const wind_chart_1 = __webpack_require__(/*! ./wind-chart */ "./src/app/jobs/job-types/spark/wind-chart.ts");
const message_api_1 = __webpack_require__(/*! ../../../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
const map_contour_layer_1 = __webpack_require__(/*! src/app/geo-web/map/map-layer/map-contour-layer */ "./src/app/geo-web/map/map-layer/map-contour-layer.ts");
class SparkClientJob extends spark_job_1.sparkJob(job_1.ClientJob) {
    constructor() {
        super(...arguments);
        this.inputFormModel = form_model_1.sparkFormRootModel;
        this.mapboxStyle = "mapbox://styles/mapbox/streets-v11";
    }
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.startSourcesLayer = new map_editable_feature_layer_1.EditableFeatureCollectionLayer(this.name, "Input fire sources", this.inputs.startConditions, new colour_scheme_1.SolidColourScheme("#ff0000"));
            // this.startSourcesLayer.shapeOptions = { color: "#ff0000" }
            // this.startSourcesLayer.pointIconProperties = {
            //   iconSize: [30, 30],
            //   iconAnchor: [15, 15],
            //   iconUrl: "assets/img/aahs-symbols/fire/AAHS_FIRE_OP_SPOT_FIRE_CONF.png",
            // }
            this.startSourcesLayer.toolbarButtonOptions.point = {
                title: "Add fire source",
                primaryFaIcon: ["fas", "fire"],
                secondaryFaIcon: ["fas", "map-pin"],
            };
            this.startSourcesLayer.toolbarButtonOptions.polygon = {
                title: "Add fire polygon",
                primaryFaIcon: ["fas", "fire"],
                secondaryFaIcon: ["fas", "shapes"],
            };
            this.startSourcesLayer.defaultFeatureProperties = {
                point: {
                    time: 0,
                    radius: 90,
                },
                line: { time: 0, radius: 90 },
                polygon: { time: 0 },
            };
            this.startSourcesLayer.featurePropertiesFormModel = form_model_1.startSourceFormGroups;
            // const masksLayer = new EditableFeatureCollectionLayer(this.name,
            //   "Input mask polygons",
            //   this.inputs.maskConditions,
            //   new SolidColourScheme("#000000")
            // )
            // masksLayer.toolbarButtonOptions.polygon = {
            //   title: "Add mask polygon",
            //   primaryFaIcon: ["fas", "crop"],
            // }
            // masksLayer.defaultFeatureProperties.polygon = {
            //   time: 0,
            // }
            // masksLayer.featurePropertiesFormModel = maskSourceFormGroups
            yield this.startSourcesLayer.show();
            // await masksLayer.show()
            if (interfaces_1.isValidDirectoryTree(this.inputs.metCSVFile)) {
                try {
                    // date,wind_direction,wind_speed
                    // 2020-01-01T08:00:00Z,180,30
                    // 2020-01-01T12:00:00Z,180,30
                    // 2020-01-01T16:00:00Z,270,30
                    // 2020-01-01T20:00:00Z,270,30
                    const metCsv = yield this.layerService.getFile(yield this.jobService.resolveDirTree(this.inputs.metCSVFile.path, this.inputs.metCSVFile.location), rest_api_service_1.ResponseType.Text);
                    wind_chart_1.createWindChart(this.layerService, metCsv);
                }
                catch (error) {
                    console.log(`error generated met CSV chart:`);
                    console.log(error);
                }
            }
            return [this.startSourcesLayer];
        });
    }
    updateInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.startSourcesLayer.featureCollection = this.inputs.startConditions;
        });
    }
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.numberOfSubjobs === 0) {
                const rasterLayers = yield Promise.all(this.inputs.outputLayers.map((layer) => __awaiter(this, void 0, void 0, function* () {
                    const rasterLayer = new map_geotiff_layer_1.RasterLayer(layer.description, yield this.jobService.resolveDirTree(`${this.name}/${layer.destination}`, this.outputStorageMode));
                    Object.keys(layer).forEach(key => {
                        if (key !== "name" && key !== "description") {
                            console.log(key);
                            rasterLayer[key] = layer[key];
                        }
                    });
                    return rasterLayer;
                })));
                // const layers = await this.layerService.geotiffLayerFactory([
                //   {
                //     geotiffPath,
                //     layerSpecs: {
                //       0: {
                //         projectionOverride: 3857,
                //         name: "Arrival time (raster)",
                //         valueFormat: 'secondsToHMString("hm")',
                //         hideLayer: true,
                //       },
                //       // 1: {
                //       //   name: "Speed",
                //       //   units: "m/s",
                //       //   minValue: 0,
                //       // },
                //       // 2: {
                //       //   name: "Maximum intensity",
                //       //   units: "kW/m",
                //       //   minValue: 0,
                //       // },
                //       // 3: {
                //       //   name: "Maximum flame height",
                //       //   units: "m",
                //       //   minValue: 0,
                //       // },
                //       // 4: {
                //       //   name: "Elevation",
                //       //   units: "m",
                //       // },
                //       // 5: {
                //       //   name: "Fuel age",
                //       //   units: "years",
                //       //   minValue: 0,
                //       // },
                //       // 6: {
                //       //   name: "Land classification",
                //       //   valueFormat: {
                //       //     0: "Un-burnable",
                //       //     1: "Dry eucalypt - Vesta",
                //       //     2: "Grasslands",
                //       //     3: "Heathland",
                //       //     4: "Semi-arid mallee heath",
                //       //     5: "Spinifex grassland",
                //       //     6: "Pine",
                //       //     7: "Dry eucalypt - Leaflet 80",
                //       //     8: "Urban",
                //       //   },
                //       //   legendCells: [0, 1, 2, 3, 4, 5, 6, 7, 8],
                //       //   minValue: 0,
                //       //   maxValue: 8,
                //       // },
                //       // 8: {
                //       //   name: "Wind x-velocity",
                //       //   units: "m/s",
                //       // },
                //       // 9: {
                //       //   name: "Wind y-velocity",
                //       //   units: "m/s",
                //       // },
                //     },
                //   },
                // ])
                const arrivalTimeLayer = rasterLayers[0];
                yield arrivalTimeLayer.init();
                const arrivalTimeContourLayer = new map_contour_layer_1.MapContourLayer("Arrival time contour", arrivalTimeLayer, "line");
                arrivalTimeContourLayer.showValueInPopup = false;
                arrivalTimeContourLayer.opacity = 100;
                const arrivalTimeSlider = new time_slider_1.TimeSlider();
                arrivalTimeSlider.min = 1;
                arrivalTimeSlider.minDate = this.inputs.startTime;
                arrivalTimeSlider.max = arrivalTimeLayer.maxValue;
                arrivalTimeSlider.maxDate = new Date(this.inputs.startTime.getTime() + this.inputs.durationSeconds * 1000);
                arrivalTimeSlider.value = 1;
                arrivalTimeSlider.step = 60;
                arrivalTimeContourLayer.slider = arrivalTimeSlider;
                arrivalTimeContourLayer.sliderEnabled = true;
                const arrivalTimeIsochronesLayer = new map_contour_layer_1.MapContourLayer("Arrival time", arrivalTimeLayer, "fill");
                arrivalTimeIsochronesLayer.valueFormatFn = dates_1.secondsToHMString(":");
                arrivalTimeIsochronesLayer.transitionDelayMultiplier = 1;
                arrivalTimeIsochronesLayer.colourScheme = new colour_scheme_1.D3ColourScheme();
                // Generate thresholds for isochrones
                arrivalTimeIsochronesLayer.thresholds = [];
                // Choose delta_time (seconds) based to get approximately 10 isochrones
                // 1 minute, 5m, 10m, 30m, 1hour, 2h, 3h, 4h, 5h
                const deltaTimes = [
                    60,
                    5 * 60,
                    10 * 60,
                    30 * 60,
                    60 * 60,
                    2 * 60 * 60,
                    3 * 60 * 60,
                    4 * 60 * 60,
                    5 * 60 * 60,
                ];
                // Find the dt which results in closest to 10 isochrones
                const diff = deltaTimes.map(dt => Math.abs(10 - arrivalTimeLayer.maxValue / dt));
                const dt = deltaTimes[diff.indexOf(Math.min(...diff))];
                for (let i = 0; i < arrivalTimeLayer.maxValue; i += dt) {
                    arrivalTimeIsochronesLayer.thresholds.push(i);
                }
                arrivalTimeIsochronesLayer.thresholds.push(arrivalTimeLayer.maxValue);
                arrivalTimeIsochronesLayer.downloadData.metadata = `Arrival time isochrones.
  Each polyon represents the fire boundary at a given time - where the value property is the time in seconds.
  Polygons are generated for the following times (after the simulation start time: ${this.inputs.startTime.toString()}):
  ${arrivalTimeIsochronesLayer.thresholds
                    .map(dates_1.secondsToHMString("hm"))
                    .join("\n")}`;
                arrivalTimeIsochronesLayer.opacity = 100;
                yield Promise.all([
                    arrivalTimeContourLayer.show(),
                    arrivalTimeIsochronesLayer.show(),
                ]);
                // const windVectorFieldLayer = new VectorFieldLayer(
                //   map,
                //   "Wind Field",
                //   arrivalTimeLayer.geotiffArrayBuffer,
                //   [8, 9]
                // )
                // await windVectorFieldLayer.show()
                return [
                    ...rasterLayers,
                    arrivalTimeContourLayer,
                    arrivalTimeIsochronesLayer,
                ];
            }
            return [];
        });
    }
    setBbox() {
        // Add all input features so we can set map extent
        const featuresToFitMapTo = [];
        featuresToFitMapTo.push(...this.inputs.startConditions.features);
        featuresToFitMapTo.push(...this.inputs.maskConditions.features);
        // Create bounding box based on input features
        if (featuresToFitMapTo.length > 0) {
            this.boundingBox4326 = bbox_1.default(turf_1.featureCollection(featuresToFitMapTo));
        }
    }
    canJobRun() {
        return this.checkFeatures(this.startSourcesLayer.featureCollection);
    }
    checkFeatures(fc) {
        if (fc.features.length === 0) {
            return;
        }
        if (fc.features.length > 10) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Too many input features`,
                message: `There are too many input features, please delete some before running the job`,
                severity: "error",
            }));
            return false;
        }
        const fcBboxArea = turf_1.area(turf_1.bboxPolygon(bbox_1.default(fc)));
        const fcArea = turf_1.area(fc);
        if (fcArea > 10000000) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Features are too large`,
                message: `The input features are too large, please delete or reduce the size before running the job`,
                severity: "error",
            }));
            return false;
        }
        if (fcBboxArea > 25000000) {
            this.layerService.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                title: `Features are too sparse`,
                message: `The input features cover too large an area, please reduce before running the job`,
                severity: "error",
            }));
            return false;
        }
        return true;
    }
}
exports.SparkClientJob = SparkClientJob;


/***/ }),

/***/ "./src/app/jobs/job-types/spark/form-model.ts":
/*!****************************************************!*\
  !*** ./src/app/jobs/job-types/spark/form-model.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const code_editor_model_1 = __webpack_require__(/*! ../../../form/monaco-editor/code-editor-model */ "./src/app/form/monaco-editor/code-editor-model.ts");
const form_interfaces_1 = __webpack_require__(/*! ../../../form/form-interfaces */ "./src/app/form/form-interfaces.ts");
const user_1 = __webpack_require__(/*! ../../../../../../shared/src/user/user */ "../shared/src/user/user.ts");
var SparkFormModeKey;
(function (SparkFormModeKey) {
    SparkFormModeKey["Basic"] = "basic";
    SparkFormModeKey["Advanced"] = "advanced";
})(SparkFormModeKey = exports.SparkFormModeKey || (exports.SparkFormModeKey = {}));
exports.sparkFormRootModel = new form_interfaces_1.FormRootModel();
exports.sparkFormRootModel.subjectPropertyKey = "inputs";
exports.sparkFormRootModel.modes = [
    {
        key: SparkFormModeKey.Basic,
        name: "Basic",
        userRoles: [user_1.GeowebUserRoles.User, user_1.GeowebUserRoles.Admin],
    },
    {
        key: SparkFormModeKey.Advanced,
        name: "Advanced",
        userRoles: [user_1.GeowebUserRoles.Admin],
    },
];
exports.sparkFormRootModel.defaultMode = exports.sparkFormRootModel.modes[0];
exports.sparkFormRootModel.schemaFactory = (currentFormMode, configService) => {
    return [
        {
            name: "Basic",
            modeKeys: [SparkFormModeKey.Basic, SparkFormModeKey.Advanced],
            form: {
                model: [
                    new core_1.DynamicDatePickerModel({
                        id: "startTime",
                        label: "Start time",
                        additional: {
                            showTime: true,
                            inline: false,
                        },
                        validators: {
                            required: null,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                        },
                    }),
                    new core_1.DynamicInputModel({
                        id: "durationSeconds",
                        label: "Simulation duration (seconds)",
                        validators: {
                            required: null,
                            customValidator: string_1.floatValidator,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                            customValidator: string_1.floatValidator.errorMessage,
                        },
                    }),
                    new core_1.DynamicInputModel({
                        id: "resolutionMeters",
                        label: "Simulation resolution (m)",
                        validators: {
                            required: null,
                            customValidator: string_1.floatValidator,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                            customValidator: string_1.floatValidator.errorMessage,
                        },
                    }),
                    new core_1.DynamicSwitchModel({
                        id: `disableFileOutputs`,
                        label: `Disable file outputs`,
                        offLabel: "File outputs are ENABLED",
                        onLabel: "File outputs are DISABLED",
                        validators: {
                            required: null,
                        },
                        errorMessages: {
                            required: "{{ label }} is required",
                        },
                        hidden: currentFormMode.key !== SparkFormModeKey.Advanced,
                    }),
                ],
            },
        },
        {
            name: "Initialisation Scripts",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Initialisation model`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new code_editor_model_1.DynamicCodeEditorModel({
                                id: `initialisationModel`,
                                label: `Initialisation model`,
                                options: { language: "cpp" },
                            }),
                        ],
                    },
                },
            ],
        },
        {
            name: "Rate of Spread Models",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Rate-of-spread model start`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new code_editor_model_1.DynamicCodeEditorModel({
                                id: `rateOfSpreadModelsCommonStart`,
                                label: `Rate-of-spread model start`,
                                options: { language: "cpp" },
                            }),
                        ],
                    },
                },
                {
                    name: `Rate-of-spread model end`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new code_editor_model_1.DynamicCodeEditorModel({
                                id: `rateOfSpreadModelsCommonEnd`,
                                label: `Rate-of-spread model end`,
                                options: { language: "cpp" },
                            }),
                        ],
                    },
                },
                ...[...Array(12).keys()].map(idx => {
                    return {
                        name: `RoS ${idx + 1}`,
                        modeKeys: [SparkFormModeKey.Advanced],
                        form: {
                            model: [
                                new core_1.DynamicFormGroupModel({
                                    id: "rateOfSpreadModels",
                                    group: [
                                        new code_editor_model_1.DynamicCodeEditorModel({
                                            id: `${idx + 1}`,
                                            label: `RoS ${idx + 1}`,
                                            options: { language: "cpp" },
                                        }),
                                    ],
                                }),
                            ],
                        },
                    };
                }),
            ],
        },
        {
            name: "Update Models",
            modeKeys: [SparkFormModeKey.Advanced],
            form: [
                {
                    name: `Update model start`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new code_editor_model_1.DynamicCodeEditorModel({
                                id: `updateModelsCommonStart`,
                                label: `Update model start`,
                                options: { language: "cpp" },
                            }),
                        ],
                    },
                },
                {
                    name: `Update model end`,
                    modeKeys: [SparkFormModeKey.Advanced],
                    form: {
                        layout: {
                            startC: {
                                grid: {
                                    host: "ui-g-12",
                                },
                            },
                        },
                        model: [
                            new code_editor_model_1.DynamicCodeEditorModel({
                                id: `updateModelsCommonEnd`,
                                label: `Update model end`,
                                options: { language: "cpp" },
                            }),
                        ],
                    },
                },
                ...[...Array(12).keys()].map(idx => {
                    return {
                        name: `Update model ${idx + 1}`,
                        modeKeys: [SparkFormModeKey.Advanced],
                        form: {
                            model: [
                                new core_1.DynamicFormGroupModel({
                                    id: "updateModels",
                                    group: [
                                        new code_editor_model_1.DynamicCodeEditorModel({
                                            id: `${idx + 1}`,
                                            label: `Update model ${idx + 1}`,
                                            options: { language: "cpp" },
                                        }),
                                    ],
                                }),
                            ],
                        },
                    };
                }),
            ],
        },
    ];
};
class SparkMeteorologicalInputLayerFormConfig {
    constructor(obj) {
        this.key = "";
        this.label = "";
        Object.assign(this, obj);
    }
}
exports.startSourceFormGroups = {
    point: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicInputModel({
                    id: "radius",
                    label: "Point Radius",
                    step: 1,
                    validators: {
                        required: null,
                        customValidator: string_1.positiveIntegerValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.positiveIntegerValidator.errorMessage,
                    },
                }),
                new core_1.DynamicInputModel({
                    id: "time",
                    label: "Start time (seconds)",
                    validators: {
                        required: null,
                        customValidator: string_1.floatValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.floatValidator.errorMessage,
                    },
                }),
            ],
        }),
        new core_1.DynamicFormGroupModel({
            id: "geometry",
            legend: "Geometry",
            group: [
                new core_1.DynamicFormGroupModel({
                    id: "coordinates",
                    legend: "Coordinates",
                    group: [
                        new core_1.DynamicInputModel({
                            id: "0",
                            label: "Longitude",
                            validators: {
                                required: null,
                                customValidator: string_1.longitudeValidator,
                            },
                            errorMessages: {
                                required: "{{ label }} is required",
                                customValidator: string_1.longitudeValidator.errorMessage,
                            },
                        }),
                        new core_1.DynamicInputModel({
                            id: "1",
                            label: "Latitude",
                            validators: {
                                required: null,
                                customValidator: string_1.latitudeValidator,
                            },
                            errorMessages: {
                                required: "{{ label }} is required",
                                customValidator: string_1.latitudeValidator.errorMessage,
                            },
                        }),
                    ],
                }),
            ],
        }),
    ],
    line: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicInputModel({
                    id: "radius",
                    label: "Point Radius",
                    step: 1,
                    validators: {
                        required: null,
                        customValidator: string_1.positiveIntegerValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.positiveIntegerValidator.errorMessage,
                    },
                }),
                new core_1.DynamicInputModel({
                    id: "time",
                    label: "Start time (seconds)",
                    validators: {
                        required: null,
                        customValidator: string_1.floatValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.floatValidator.errorMessage,
                    },
                }),
            ],
        }),
    ],
    polygon: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicInputModel({
                    id: "time",
                    label: "Start time (seconds)",
                    validators: {
                        required: null,
                        customValidator: string_1.floatValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.floatValidator.errorMessage,
                    },
                }),
            ],
        }),
    ],
};
exports.maskSourceFormGroups = {
    polygon: [
        new core_1.DynamicFormGroupModel({
            id: "properties",
            legend: "Properties",
            group: [
                new core_1.DynamicInputModel({
                    id: "time",
                    label: "Start time (seconds)",
                    validators: {
                        required: null,
                        customValidator: string_1.floatValidator,
                    },
                    errorMessages: {
                        required: "{{ label }} is required",
                        customValidator: string_1.floatValidator.errorMessage,
                    },
                }),
            ],
        }),
    ],
};


/***/ }),

/***/ "./src/app/jobs/job-types/spark/wind-chart.ts":
/*!****************************************************!*\
  !*** ./src/app/jobs/job-types/spark/wind-chart.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const c3_1 = __webpack_require__(/*! c3 */ "./node_modules/c3/c3.js");
const string_1 = __webpack_require__(/*! ../../../../../../shared/src/util/string */ "../shared/src/util/string.ts");
exports.createWindChart = (layerService, metCsv) => {
    const parsedOutput = string_1.parseCsv(metCsv).reduce((acc, col, idx) => {
        if (idx !== 0) {
            acc["date"].push(col[0]);
            acc["wind_direction"].push(parseFloat(col[1]));
            acc["wind_speed"].push(parseFloat(col[2]));
        }
        return acc;
    }, { date: [], wind_direction: [], wind_speed: [] });
    layerService.createNewChart({
        hide: true,
        chart: c3_1.generate({
            title: { text: `Wind` },
            data: {
                // labels: { format: format(".2f") },
                xFormat: "%Y-%m-%dT%H:%M:%S%Z",
                x: "x",
                columns: [
                    ["x", ...parsedOutput["date"]],
                    ["Wind Direction", ...parsedOutput["wind_direction"]],
                    ["Wind Speed", ...parsedOutput["wind_speed"]],
                ],
                axes: {
                    "Wind Speed": "y",
                    "Wind Direction": "y2",
                },
            },
            axis: {
                x: {
                    type: "timeseries",
                    localtime: true,
                    tick: {
                        format: "%d/%m/%Y %H:%M",
                    },
                },
                y: {
                    label: {
                        text: `Wind speed`,
                        position: "outer-middle",
                    },
                    min: 0,
                },
                y2: {
                    label: {
                        text: `Wind direction`,
                        position: "outer-middle",
                    },
                    min: 0,
                    max: 360,
                    show: true,
                    tick: {
                        values: [0, 90, 180, 270],
                        format: val => ["S", "SW", "W", "NW", "N", "NE", "E", "SE"][Math.floor(val / 45)],
                    },
                },
            },
            legend: { position: "inset" },
        }),
    });
};


/***/ }),

/***/ "./src/app/jobs/job.ts":
/*!*****************************!*\
  !*** ./src/app/jobs/job.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const job_base_1 = __webpack_require__(/*! ../../../../shared/src/job/job-base */ "../shared/src/job/job-base.ts");
/**
 * Client job base class - all JobTypes extend this class
 *
 * @export
 * @class ClientJob
 */
class ClientJob extends job_base_1.JobBase {
    constructor(name, jobService, configService, layerService) {
        super(name);
        this.jobService = jobService;
        this.configService = configService;
        this.layerService = layerService;
        this.mapboxStyle = "mapbox://styles/mapbox/light-v10";
        this.clientOnly = false;
        this.logFilePath = `${name}/logs.txt`;
        this.debug = console.log;
        this.init();
    }
    /**
     * This allows subclasses to essentially 'add' something to the contructor
     *
     */
    init() { }
    /**
     * This is called when a new job type is loaded (that is the job type has changed)
     *
     * @returns
     */
    createInputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
    /**
     * This is called when a job of the currenty loaded job type is loaded/updated
     *
     */
    updateInputLayers() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    /**
     * This is called when a job finished running (or a FINISHED job is loaded)
     *
     * @returns
     */
    createOutputLayers() {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
    /**
    * DSS:This is called when a job finished running and simulation loaded
    *
    * @returns
    */
    createSimulationLayer() {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
    /**
     * DSS:This is called when simulation starts
     *
     * @returns
     */
    animateMaldonTest() { }
    /**
     * DSS:This is called when simulation stop
     *
     * @returns
     */
    stopAnimation() { }
    /**
     * DSS: return the start time and finish time
     * for loaded simluation in seconds
     */
    getTimeStamps() {
    }
    /**
     * start and stop animation frame
     */
    setupStop() {
    }
    /**
     * Setup animation speed
     */
    setupAnimationSpeed(speed) {
    }
    /**
     * returns animation speed
     */
    getAnimationSpeed() {
        return;
    }
    /**
     *  load fire data
     */
    loadFire(name) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    /**
    *  load population data
    */
    loadPopulation(name) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    /**
     * return last fire step time for selected fire
     */
    getLastFireStep() {
        return;
    }
    /**
     * clear loaded fire layers
     */
    clearFirelayers() {
    }
    /**
   * clear loaded population layers
   */
    clearPopulationlayers() {
    }
    /**
     * Change layers according to time slider
     * @param stepMinutes miute steps from time slider
     */
    filterFireLayers(stepMinutes) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    /**
    * filter population layers according to time slider
    * @param stepMinutes Value from time slider
    */
    filterPopulationLayers(stepMinutes) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    /**
     * Handle the visibility of zone layers
     * (This used to enter evacuation messages)
     */
    showZoneLayers(visibility) {
    }
    /**
     * Load zone layer according to selected layer
     * @param region selected region
     */
    createZoneLayer(region) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    /**
     * Simulate fire
     * @param stepMinutes
     */
    simulateFireLayer(stepMinutes) {
    }
    /**
     * return the colors and actions of loaded population data
     */
    getPopulationColorLegends() {
        return;
    }
    /**
     *
     * @param style selected style
     */
    setMapStyle(style) {
    }
    setBbox() { }
    canJobRun() {
        return true;
    }
}
exports.ClientJob = ClientJob;


/***/ }),

/***/ "./src/app/login/login.component.html":
/*!********************************************!*\
  !*** ./src/app/login/login.component.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-toast position=\"top-right\" baseZIndex=\"2000\"></p-toast>\n\n<div class=\"login-container form\">\n  <h1>Login</h1>\n  <form [formGroup]=\"formGroup\" *ngIf=\"!loading\">\n    <dynamic-primeng-form\n      [group]=\"formGroup\"\n      [model]=\"formModel\"\n      (keyup)=\"onEnterKeyPress($event)\"\n    ></dynamic-primeng-form>\n  </form>\n  <button\n    *ngIf=\"!loading\"\n    type=\"button\"\n    pButton\n    icon=\"pi pi-caret-right\"\n    iconPos=\"right\"\n    label=\"Login\"\n    (click)=\"login()\"\n    [disabled]=\"loading || formGroup.invalid\"\n    style=\"float:right;\"\n  ></button>\n</div>\n\n<app-spinner [fullScreenOverlay]=\"true\"></app-spinner>\n"

/***/ }),

/***/ "./src/app/login/login.component.scss":
/*!********************************************!*\
  !*** ./src/app/login/login.component.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".login-container.form {\n  max-width: 400px;\n  width: 100%;\n  padding: 10px;\n  /* margin: auto; */\n  top: 50%;\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, -50%); }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGFBQWE7RUFDYixrQkFBQTtFQUNBLFFBQVE7RUFDUixrQkFBa0I7RUFDbEIsU0FBUztFQUNULGdDQUFnQyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tY29udGFpbmVyLmZvcm0ge1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTBweDtcbiAgLyogbWFyZ2luOiBhdXRvOyAqL1xuICB0b3A6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xufVxuIl19 */"

/***/ }),

/***/ "./src/app/login/login.component.ts":
/*!******************************************!*\
  !*** ./src/app/login/login.component.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const core_2 = __webpack_require__(/*! @ng-dynamic-forms/core */ "./node_modules/@ng-dynamic-forms/core/fesm2015/core.js");
const string_1 = __webpack_require__(/*! ../../../../shared/src/util/string */ "../shared/src/util/string.ts");
const spinner_service_service_1 = __webpack_require__(/*! ../spinner/spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
const auth_service_1 = __webpack_require__(/*! ../services/auth.service */ "./src/app/services/auth.service.ts");
const router_1 = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
const flash_message_service_1 = __webpack_require__(/*! ../services/flash-message.service */ "./src/app/services/flash-message.service.ts");
const message_api_1 = __webpack_require__(/*! ../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
/**
 * Renders login form and handles login
 *
 * @export
 * @class LoginComponent
 */
let LoginComponent = class LoginComponent {
    constructor(formService, spinnerService, authService, router, flashMessageService) {
        this.formService = formService;
        this.spinnerService = spinnerService;
        this.authService = authService;
        this.router = router;
        this.flashMessageService = flashMessageService;
        this.loading = false;
        this.formModel = [
            new core_2.DynamicInputModel({
                id: "username",
                label: "Username",
                required: null,
                validators: {
                    required: null,
                    customValidator: string_1.alphaNumericDashesValidator,
                },
                errorMessages: {
                    required: "{{ label }} is required",
                    customValidator: string_1.alphaNumericDashesValidator.errorMessage,
                },
            }),
            new core_2.DynamicInputModel({
                id: "password",
                label: "Password",
                inputType: core_2.DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD,
                required: null,
                validators: {
                    required: null,
                },
                errorMessages: {
                    required: "{{ label }} is required",
                    incorrect: "Login is incorrect",
                },
            }),
        ];
        this.onEnterKeyPress = e => {
            if (e.key === "Enter") {
                this.login();
                e.srcElement.blur();
            }
        };
        this.formGroup = this.formService.createFormGroup(this.formModel);
    }
    ngOnInit() {
        if (this.authService.isLoggedIn) {
            this.router.navigate(["/"]);
        }
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.formGroup.valid) {
                this.spinnerService.setSpinner(`login`, {
                    name: `Logging in...`,
                    icon: spinner_service_service_1.SpinnerIcon.LineSpin,
                });
                try {
                    yield this.authService.login(this.formGroup.value.username, this.formGroup.value.password);
                }
                catch (error) {
                    this.flashMessageService.pushFlashMessage(new message_api_1.FlashMessage({
                        message: error.error.message || error.message,
                        title: error.statusText,
                    }));
                    if (error.status && error.status === 401) {
                        this.formGroup.markAsDirty();
                    }
                }
                if (this.authService.isLoggedIn) {
                    this.router.navigate(["/"]);
                }
                else {
                    this.formGroup.get("password").setErrors({ incorrect: true });
                }
                this.spinnerService.removeSpinner(`login`);
            }
        });
    }
};
LoginComponent = __decorate([
    core_1.Component({
        selector: "app-login",
        template: __webpack_require__(/*! ./login.component.html */ "./src/app/login/login.component.html"),
        styles: [__webpack_require__(/*! ./login.component.scss */ "./src/app/login/login.component.scss")]
    }),
    __metadata("design:paramtypes", [core_2.DynamicFormService,
        spinner_service_service_1.SpinnerService,
        auth_service_1.AuthService,
        router_1.Router,
        flash_message_service_1.FlashMessageService])
], LoginComponent);
exports.LoginComponent = LoginComponent;


/***/ }),

/***/ "./src/app/services/auth.service.ts":
/*!******************************************!*\
  !*** ./src/app/services/auth.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const angular_jwt_1 = __webpack_require__(/*! @auth0/angular-jwt */ "./node_modules/@auth0/angular-jwt/index.js");
const http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const config_service_1 = __webpack_require__(/*! ./config.service */ "./src/app/services/config.service.ts");
function jwtOptionsFactory(configService) {
    return {
        tokenGetter: getJwt,
        whitelistedDomains: [
            new RegExp("^null$"),
            `${configService.config.HOSTNAME}:${configService.config.RESTAPI_PORT}`,
        ],
        blacklistedRoutes: ["/login"],
    };
}
exports.jwtOptionsFactory = jwtOptionsFactory;
function getJwt() {
    return localStorage.getItem("access_token");
}
exports.getJwt = getJwt;
function setJwt(token) {
    return localStorage.setItem("access_token", token);
}
function clearJwt() {
    return localStorage.removeItem("access_token");
}
const jwtHelper = new angular_jwt_1.JwtHelperService();
/**
 * Handles login, JWT and stores user state variables like username, isloggedin, isadmin...
 *
 * @export
 * @class AuthService
 */
let AuthService = class AuthService {
    constructor(http, configService) {
        this.http = http;
        this.configService = configService;
        this._isLoggedIn = false;
        this._isAdmin = false;
        this._onLoginSubject = new rxjs_1.BehaviorSubject(false);
        this.updateLoginStatus();
    }
    get isLoggedIn() {
        return this._isLoggedIn;
    }
    get isAdmin() {
        return this._isAdmin;
    }
    get username() {
        return this._jwt.username;
    }
    get userRole() {
        return this._jwt.role;
    }
    getLoginSubjectAsObservable() {
        return this._onLoginSubject.asObservable();
    }
    updateLoginStatus() {
        const jwt = getJwt();
        const newLoginStatus = typeof jwt !== "undefined" && !jwtHelper.isTokenExpired(jwt);
        if (newLoginStatus) {
            this._jwt = jwtHelper.decodeToken(jwt);
            this._isAdmin = "role" in this._jwt && this._jwt.role === "admin";
        }
        if (newLoginStatus !== this._isLoggedIn) {
            this._isLoggedIn = newLoginStatus;
            this._onLoginSubject.next(newLoginStatus);
        }
    }
    login(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            // TODO: use restApiSErvice
            response = yield this.http
                .post(`${this.configService.config.MASTER_WEBSERVER_URL}api/login`, {
                username,
                password,
            })
                .toPromise();
            setJwt(response.token);
            this.updateLoginStatus();
            return true;
        });
    }
    logout() {
        clearJwt();
        this.updateLoginStatus();
    }
};
AuthService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [http_1.HttpClient, config_service_1.ConfigService])
], AuthService);
exports.AuthService = AuthService;


/***/ }),

/***/ "./src/app/services/config.service.ts":
/*!********************************************!*\
  !*** ./src/app/services/config.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const electron_service_1 = __webpack_require__(/*! ./electron.service */ "./src/app/services/electron.service.ts");
const environment_1 = __webpack_require__(/*! src/environments/environment */ "./src/environments/environment.ts");
/**
 * Contains configuration for client and server (which is fetched through WebSocketService).
 * This sets client RESTAPI_PORT, HOSTNAME...
 *
 * @export
 * @class ConfigService
 */
let ConfigService = class ConfigService {
    constructor(electronService) {
        this.electronService = electronService;
        this.config = {};
        this.debugMode = false;
        // Set production boolean from Angualr environment file
        this.config.production = environment_1.environment.production;
        this.debugMode = !this.config.production;
    }
    init() {
        return new Promise((resolve, reject) => {
            // Set default RESTAPI_PORT based on wether we a running in produciton
            if (this.config.production) {
                console.log("production");
                // If in production -> either use same port as the window.location, or use 443 for https and 80 for http
                this.config.RESTAPI_PORT =
                    window.location.port !== ""
                        ? parseInt(window.location.port, 10)
                        : location.protocol === "https:"
                            ? 443
                            : 80;
            }
            else {
                console.log("development");
                // If not production -> set port to 8443 for https and 8080 for http
                this.config.RESTAPI_PORT = location.protocol === "https:" ? 8443 : 8443;
            }
            this.config.APP_PATH = "./";
            // this.config.HOSTNAME =
            //   window.location.hostname !== "" ? window.location.hostname : "localhost"
            // // OVERRIDE
            this.config.HOSTNAME = "ec2-54-206-226-208.ap-southeast-2.compute.amazonaws.com";
            // this.config.RESTAPI_PORT = 80
            if (this.electronService.isElectron) {
                this.config.ELECTRON = true;
                if (this.debugMode) {
                    console.log("APPLYING Electron Config");
                }
                Object.assign(this.config, this.electronService.getConfig());
            }
            else {
                this.config.ELECTRON = false;
            }
            // Prepend 's' to http and ws if the location is https
            const SECURE_S = location.protocol === "https:" ? "s" : "";
            this.config.MASTER_WEBSOCKET_URL = `ws${SECURE_S}://${this.config.HOSTNAME}:${this.config.RESTAPI_PORT}/ws`;
            this.config.MASTER_WEBSERVER_URL = `http${SECURE_S}://${this.config.HOSTNAME}:${this.config.RESTAPI_PORT}/`;
            // Assign values to Angular environment obj
            Object.assign(environment_1.environment, this.config);
            resolve();
        });
    }
};
ConfigService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [electron_service_1.ElectronService])
], ConfigService);
exports.ConfigService = ConfigService;


/***/ }),

/***/ "./src/app/services/electron.service.ts":
/*!**********************************************!*\
  !*** ./src/app/services/electron.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
exports.getElectronConfig = () => {
    return window.angularConfig;
};
exports.isElectron = () => window && typeof window.angularConfig !== "undefined";
/**
 * If using in Electron context, this handles passing configuration from Electron to Angular
 *
 * @export
 * @class ElectronService
 */
let ElectronService = class ElectronService {
    constructor() {
        // ipcRenderer: typeof ipcRenderer
        // webFrame: typeof webFrame
        // remote: typeof remote
        // childProcess: typeof childProcess
        // fs: typeof fs
        this.isElectron = false;
        this.getConfig = exports.getElectronConfig;
        // Conditional imports
        // if (this.isElectron()) {
        // this.ipcRenderer = (window as any).require("electron").ipcRenderer
        // this.webFrame = (window as any).require("electron").webFrame
        // this.remote = (window as any).require("electron").remote
        // }
        this.isElectron = exports.isElectron();
    }
};
ElectronService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], ElectronService);
exports.ElectronService = ElectronService;


/***/ }),

/***/ "./src/app/services/flash-message.service.ts":
/*!***************************************************!*\
  !*** ./src/app/services/flash-message.service.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/**
 * Provides subject to push flash messages (toast messages)
 *
 * @export
 * @class FlashMessageService
 */
let FlashMessageService = class FlashMessageService {
    constructor() {
        this.flashMessageSubject = new rxjs_1.Subject();
    }
    getFlashMessageObservable() {
        return this.flashMessageSubject.asObservable();
    }
    pushFlashMessage(flashMessage) {
        this.flashMessageSubject.next(flashMessage);
    }
};
FlashMessageService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [])
], FlashMessageService);
exports.FlashMessageService = FlashMessageService;


/***/ }),

/***/ "./src/app/services/job-service.service.ts":
/*!*************************************************!*\
  !*** ./src/app/services/job-service.service.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/services/auth.service.ts");
const config_service_1 = __webpack_require__(/*! ./config.service */ "./src/app/services/config.service.ts");
const job_class_map_1 = __webpack_require__(/*! ../jobs/job-class-map */ "./src/app/jobs/job-class-map.ts");
const job_1 = __webpack_require__(/*! ../jobs/job */ "./src/app/jobs/job.ts");
const layer_service_service_1 = __webpack_require__(/*! ../geo-web/map/map-layer/layer-service.service */ "./src/app/geo-web/map/map-layer/layer-service.service.ts");
/**
 * Contains all job related variables, job/tempalte lists and subjects to observe changes to jobs.
 * These variables are set by WebSocketService
 *
 * @export
 * @class JobService
 */
let JobService = class JobService {
    constructor(authService, configService, injector) {
        this.authService = authService;
        this.configService = configService;
        this.injector = injector;
        this.behaviorSubject = new rxjs_1.BehaviorSubject(undefined);
        this._logs = [];
        this.logsSubject = new rxjs_1.Subject();
        this._availableJobs = [];
        this.availableJobsSubject = new rxjs_1.Subject();
        this._availableJobTemplates = [];
        this.availableJobTemplatesSubject = new rxjs_1.Subject();
        this.availableExtraFilesSubject = new rxjs_1.Subject();
        this.jobSubscription = this.behaviorSubject.subscribe(job => {
            this.currentJob = job;
        });
        this.loginSubscription = this.authService
            .getLoginSubjectAsObservable()
            .subscribe(loggedIn => {
            if (!loggedIn && typeof this.currentJob !== "undefined") {
                this.setCurrentJob(undefined);
            }
        });
    }
    ngOnDestroy() {
        this.jobSubscription.unsubscribe();
        this.loginSubscription.unsubscribe();
    }
    getCurrentJob() {
        return this.currentJob;
    }
    getCurrentJobBehaviourSubject() {
        return this.behaviorSubject;
    }
    getCurrentJobObservable() {
        return this.behaviorSubject.asObservable();
    }
    updateCurrentJob(jobData) {
        // Object.assign(this.currentJob, jobData)
        this.currentJob.fromJSON(jobData);
        if (this.configService.debugMode) {
            console.log("updateCurrentJob");
            console.log(jobData);
        }
        this.behaviorSubject.next(this.currentJob);
    }
    setCurrentJob(job) {
        if (typeof job === "undefined") {
            this.behaviorSubject.next(undefined);
        }
        else if (typeof this.currentJob !== "undefined" &&
            this.currentJob.name === job.name) {
            this.updateCurrentJob(job);
        }
        else if (job instanceof job_1.ClientJob) {
            this.behaviorSubject.next(job);
        }
        else {
            const newJob = new (job_class_map_1.jobClassMap(job.type))(job.name, this, this.configService, this.injector.get(layer_service_service_1.LayerService));
            newJob.fromJSON(job);
            this.behaviorSubject.next(newJob);
        }
        // TODO: if job is being updated (and not changed) only update properties (and detect changes?)
        if (this.configService.debugMode) {
            console.log(this.currentJob);
        }
    }
    getLogs() {
        return this._logs;
    }
    getLogsObservable() {
        return this.logsSubject.asObservable();
    }
    pushToLogs(log) {
        if (this._logs.length > 1000) {
            this._logs.shift();
        }
        this._logs.push(log);
        this.logsSubject.next(this._logs);
    }
    clearLogs() {
        this._logs = [];
        this.logsSubject.next(this._logs);
    }
    getAvailableJobs() {
        return this._availableJobs;
    }
    getAvailableJobsObservable() {
        return this.availableJobsSubject.asObservable();
    }
    setAvailableJob(jobs) {
        this._availableJobs = jobs;
        this.availableJobsSubject.next(this._availableJobs);
    }
    getAvailableJobTemplates() {
        return this._availableJobTemplates;
    }
    getAvailableJobTemplatesObservable() {
        return this.availableJobTemplatesSubject.asObservable();
    }
    setAvailableJobTemplates(jobTemplates) {
        this._availableJobTemplates = jobTemplates;
        this.availableJobTemplatesSubject.next(this._availableJobTemplates);
    }
    getAvailableExtraFiles() {
        return this._availableExtraFiles;
    }
    getAvailableExtraFilesObservable() {
        return this.availableExtraFilesSubject.asObservable();
    }
    setAvailableExtraFiles(extraFiles) {
        this._availableExtraFiles = extraFiles;
        this.availableExtraFilesSubject.next(this._availableExtraFiles);
    }
};
JobService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [auth_service_1.AuthService,
        config_service_1.ConfigService,
        core_1.Injector])
], JobService);
exports.JobService = JobService;


/***/ }),

/***/ "./src/app/services/rest-api.service.ts":
/*!**********************************************!*\
  !*** ./src/app/services/rest-api.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
const download_file_1 = __webpack_require__(/*! ../util/download-file */ "./src/app/util/download-file.ts");
const config_service_1 = __webpack_require__(/*! ./config.service */ "./src/app/services/config.service.ts");
var ResponseType;
(function (ResponseType) {
    ResponseType["ArrayBuffer"] = "arraybuffer";
    ResponseType["Blob"] = "blob";
    ResponseType["JSON"] = "json";
    ResponseType["Text"] = "text";
})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));
/**
 * Convenience wrapper over HttpClient
 *
 * @export
 * @class RestApiService
 */
let RestApiService = class RestApiService {
    constructor(http, configService) {
        this.http = http;
        this.configService = configService;
    }
    downloadUrl(url, type = "text/plain", onProgress) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.get(url, ResponseType.ArrayBuffer, onProgress);
            download_file_1.downloadFile(url.substring(url.lastIndexOf("/") + 1), data, type);
        });
    }
    uploadJobFile(file, path, jobName, onProgress) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = new FormData();
            formData.append("path", path);
            formData.append("job", jobName);
            formData.append("file", file);
            return yield this.post(`${this.configService.config.MASTER_WEBSERVER_URL}${this.configService.serverConfig.API_JOB_FILES_URL}`, formData, ResponseType.Blob, onProgress);
        });
    }
    //receive the file
    get(url, responseType = ResponseType.JSON, onProgress) {
        const reportProgress = typeof onProgress === "function";
        return this.performRequest(new http_1.HttpRequest("GET", url, {}, { responseType, reportProgress }), reportProgress, onProgress);
    }
    post(url, body, responseType = ResponseType.JSON, onProgress) {
        const reportProgress = typeof onProgress === "function";
        return this.performRequest(new http_1.HttpRequest("POST", url, body, { responseType, reportProgress }), reportProgress, onProgress);
    }
    performRequest(request, reportProgress = false, onProgress) {
        if (reportProgress) {
            return new Promise((resolve, reject) => {
                const requestSubscription = this.http.request(request).subscribe(event => {
                    switch (event.type) {
                        case http_1.HttpEventType.Sent:
                            onProgress(Math.round(0));
                            break;
                        case http_1.HttpEventType.UploadProgress:
                        case http_1.HttpEventType.DownloadProgress:
                            onProgress(Math.round((100 / event.total) * event.loaded));
                            break;
                        // Request complete!
                        case http_1.HttpEventType.Response:
                            resolve(event.body);
                            requestSubscription.unsubscribe();
                            break;
                    }
                }, requestError => {
                    reject(requestError);
                    requestSubscription.unsubscribe();
                });
            });
        }
        return this.http.request(request).toPromise();
    }
};
RestApiService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [http_1.HttpClient, config_service_1.ConfigService])
], RestApiService);
exports.RestApiService = RestApiService;


/***/ }),

/***/ "./src/app/services/web-socket.service.ts":
/*!************************************************!*\
  !*** ./src/app/services/web-socket.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const reconnecting_websocket_1 = __webpack_require__(/*! reconnecting-websocket */ "../node_modules/reconnecting-websocket/dist/reconnecting-websocket.mjs");
const job_service_service_1 = __webpack_require__(/*! ./job-service.service */ "./src/app/services/job-service.service.ts");
const message_api_1 = __webpack_require__(/*! ../../../../shared/src/message-api */ "../shared/src/message-api/index.ts");
const flash_message_service_1 = __webpack_require__(/*! ./flash-message.service */ "./src/app/services/flash-message.service.ts");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/services/auth.service.ts");
const config_service_1 = __webpack_require__(/*! ./config.service */ "./src/app/services/config.service.ts");
const interfaces_1 = __webpack_require__(/*! ../../../../shared/src/file-provider/interfaces */ "../shared/src/file-provider/interfaces.ts");
/**
 * Handles communication with master server via web-socket.
 * All communication except file transfer and initial login is done through the web-socket:
 * - Fetch/set server config
 * - Fetch job/template lists
 * - Create/Load/Run/Stop/Delete job
 * - Get signed URLs for cloud storage
 * - Receive flash (toast) message from server
 *
 * @export
 * @class WebSocketService
 */
let WebSocketService = class WebSocketService {
    constructor(jobService, flashMessageSerice, authService, configService) {
        this.jobService = jobService;
        this.flashMessageSerice = flashMessageSerice;
        this.authService = authService;
        this.configService = configService;
        this._connected = false;
        this._authenticated = false;
        this.authenticatedSubject = new rxjs_1.BehaviorSubject(false);
        this.updateAvailableJobsInterval = null;
        this.serverConfigSubject = new rxjs_1.BehaviorSubject(undefined);
        this.replyPromises = new Map();
        // Open connection on login and close connection on logout
        this.loginSubscription = this.authService
            .getLoginSubjectAsObservable()
            .subscribe(isLoggedIn => isLoggedIn ? this.openConnection() : this.closeConnection());
        this.serverConfigSubscription = this.serverConfigSubject.subscribe(serverConfig => {
            this.configService.serverConfig = serverConfig;
        });
        this.jobService.resolveDirTree = this.resolveDirTree.bind(this);
    }
    ngOnDestroy() {
        this.loginSubscription.unsubscribe();
        this.serverConfigSubscription.unsubscribe();
    }
    openConnection() {
        console.log("opening websocket connection");
        this.rws = new reconnecting_websocket_1.default(this.configService.config.MASTER_WEBSOCKET_URL, "", {
            maxReconnectionDelay: 5000,
            minReconnectionDelay: 500,
            minUptime: 5000,
            reconnectionDelayGrowFactor: 1.3,
            connectionTimeout: 4000,
        });
        this.rws.addEventListener("open", this.onConnectionOpen.bind(this));
        this.rws.addEventListener("close", this.onConnectionClose.bind(this));
        this.rws.addEventListener("message", this.onMessage.bind(this));
    }
    closeConnection() {
        if (typeof this.rws !== "undefined") {
            console.log("closing websocket connection");
            try {
                this.rws.close();
                this.rws.removeEventListener("message", this.onMessage.bind(this));
            }
            catch (error) {
                console.log(`FAILED to close websocket connection: ${error}`);
            }
        }
    }
    onConnectionOpen(evt) {
        this._connected = true;
        this.authenticate();
        console.log(`opened ${this.rws.url}`);
        this.rws.removeEventListener("open", this.onConnectionOpen.bind(this));
    }
    onConnectionClose(evt) {
        this._connected = false;
        this._authenticated = false;
        this.authenticatedSubject.next(false);
        console.log(`closed ${this.rws.url}`);
        this.rws.removeEventListener("close", this.onConnectionClose.bind(this));
    }
    authenticate() {
        this._authenticated = false;
        this.authenticatedSubject.next(false);
        if (this._connected && this.authService.isLoggedIn) {
            this.rws.send(JSON.stringify({
                type: message_api_1.WebSocketAuthMessageTypes.AuthLogin,
                data: {
                    message: auth_service_1.getJwt(),
                },
            }));
        }
    }
    onAuthenticated() {
        this._authenticated = true;
        this.authenticatedSubject.next(true);
        this.getServerConfig();
        this.updateAvailableJobLists();
        // If the connection has opened and a job has been previously loaded -> reload job
        const currentJob = this.jobService.getCurrentJob();
        if (typeof currentJob !== "undefined") {
            this.getJob({ name: currentJob.name });
        }
    }
    onMessage(evt) {
        let message = {};
        try {
            message = JSON.parse(evt.data);
            if (this.configService.debugMode) {
                console.log(`received message ${evt.data}`);
            }
        }
        catch (e) {
            console.log(`${this.rws.url} failed to parse message - ${evt.data}`);
        }
        if ("type" in message) {
            switch (message.type) {
                // START WEBSOCKET AUTHENTICATION MESSAGES
                case message_api_1.WebSocketAuthMessageTypes.AuthSuccess:
                    this.onAuthenticated();
                    break;
                case message_api_1.WebSocketAuthMessageTypes.AuthFailed:
                case message_api_1.WebSocketAuthMessageTypes.AuthInvalid:
                    this._authenticated = false;
                    this.authenticatedSubject.next(false);
                    const authFailedMesage = message.data;
                    this.flashMessageSerice.pushFlashMessage(new message_api_1.FlashMessage({
                        title: authFailedMesage.message,
                        sticky: true,
                        message: "Your authentication token is invalid. Please log in again.",
                    }));
                    break;
                // START JOB MESSAGES
                case message_api_1.JobMessageTypes.Data:
                    const jobMessage = message.data;
                    this.jobService.setCurrentJob(jobMessage.job);
                    break;
                case message_api_1.JobMessageTypes.PartialData:
                    const jobPartialDataMessage = message.data;
                    this.jobService.updateCurrentJob(jobPartialDataMessage.jobData);
                    break;
                case message_api_1.JobMessageTypes.Status:
                    const statusMessage = message.data;
                    const currentJob = this.jobService.getCurrentJob();
                    if (typeof currentJob !== "undefined") {
                        currentJob.status = statusMessage.status;
                        if ("progress" in statusMessage) {
                            currentJob.progress = statusMessage.progress;
                        }
                        this.jobService.setCurrentJob(currentJob);
                    }
                    break;
                case message_api_1.JobMessageTypes.Log:
                    const logMessage = message.data;
                    this.jobService.pushToLogs(logMessage);
                    break;
                case message_api_1.JobListMessageTypes.Get:
                    const jobListMessage = message.data;
                    this.jobService.setAvailableJob(jobListMessage.list);
                    break;
                case message_api_1.JobListMessageTypes.GetTemplate:
                    const jobTemplatesListMessage = message.data;
                    this.jobService.setAvailableJobTemplates(jobTemplatesListMessage.list);
                    break;
                // START FLASH MESSAGE MESSAGES
                case message_api_1.FlashMessageTypes.General:
                    this.flashMessageSerice.pushFlashMessage(message.data);
                    break;
                // START CONFIG MESSAGES
                case message_api_1.ServerConfigMessageTypes.Data:
                    const serverConfigMessage = new message_api_1.ServerConfigDataMessage(message.data);
                    console.log(serverConfigMessage);
                    this.serverConfigSubject.next(serverConfigMessage.config);
                    break;
                // START MISC MESSAGES
                case message_api_1.IGetDirTreeSignedURLType:
                    const getDirTreeSignedUrlMessage = message.data;
                    const promiseId = `${message_api_1.IGetDirTreeSignedURLType}-${getDirTreeSignedUrlMessage.location}-${getDirTreeSignedUrlMessage.path}`;
                    if (this.replyPromises.has(promiseId)) {
                        this.replyPromises
                            .get(promiseId)
                            .resolve(getDirTreeSignedUrlMessage.url);
                    }
                    break;
                // UNKOWN MESSAGES
                default:
                    console.log(`Received unknown message ${JSON.stringify(message)}`);
                    break;
            }
        }
    }
    sendMessage(message) {
        if (this._authenticated) {
            this.rws.send(JSON.stringify(message));
            if (this.configService.debugMode) {
                console.log(`sent message ${JSON.stringify(message)}`);
            }
        }
    }
    getJob(message) {
        this.sendMessage({ type: message_api_1.JobMessageTypes.Get, data: message });
    }
    runJob(message) {
        this.sendMessage({ type: message_api_1.JobMessageTypes.Run, data: message });
    }
    saveJob(message) {
        this.sendMessage({ type: message_api_1.JobMessageTypes.Data, data: message });
    }
    stopJob(message) {
        this.sendMessage({ type: message_api_1.JobMessageTypes.Stop, data: message });
    }
    newJob(message) {
        this.sendMessage({ type: message_api_1.JobMessageTypes.New, data: message });
    }
    deleteJob(message) {
        if (this.authService.isAdmin) {
            this.sendMessage({ type: message_api_1.JobMessageTypes.Delete, data: message });
        }
    }
    updateAvailableJobLists(interval = -1) {
        if (interval > 0 && this.updateAvailableJobsInterval === null) {
            this.updateAvailableJobsInterval = setInterval(() => {
                this.updateAvailableJobLists(-1);
            }, interval);
        }
        this.sendMessage({ type: message_api_1.JobListMessageTypes.Get, data: {} });
        this.sendMessage({ type: message_api_1.JobListMessageTypes.GetTemplate, data: {} });
    }
    clearUpdateAvailableJobListInterval() {
        if (this.updateAvailableJobsInterval !== null) {
            clearInterval(this.updateAvailableJobsInterval);
            this.updateAvailableJobsInterval = null;
        }
    }
    getServerConfig() {
        this.sendMessage(new message_api_1.ServerConfigGetMessage());
    }
    updateServerConfig() {
        if (this.authService.isAdmin) {
            this.sendMessage(new message_api_1.ServerConfigDataMessage({ config: this.configService.serverConfig }));
        }
    }
    getFileSignedUrl(path, location) {
        return new Promise((resolve, reject) => {
            this.replyPromises.set(`${message_api_1.IGetDirTreeSignedURLType}-${location}-${path}`, { resolve, reject });
            this.sendMessage({
                type: message_api_1.IGetDirTreeSignedURLType,
                data: { path, location },
            });
        });
    }
    resolveDirTree(path, location, publicCloud = false) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (location) {
                case interfaces_1.FileLocation.MasterPublic:
                    return `${this.configService.config.MASTER_WEBSERVER_URL}${this.configService.serverConfig.API_PUBLIC_FILES_URL}${path}`;
                case interfaces_1.FileLocation.MasterPrivate:
                    return `${this.configService.config.MASTER_WEBSERVER_URL}${this.configService.serverConfig.API_PRIVATE_FILES_URL}${path}`;
                case interfaces_1.FileLocation.MasterJob:
                    return `${this.configService.config.MASTER_WEBSERVER_URL}${this.configService.serverConfig.API_JOB_FILES_URL}${path}`;
                case interfaces_1.FileLocation.MasterTemplate:
                    return `${process.env.MASTER_RESTAPI_URL}${this.configService.serverConfig.API_TEMPLATE_FILES_URL}${path}`;
                case interfaces_1.FileLocation.S3:
                    return publicCloud
                        ? `${this.configService.serverConfig.S3_JOB_FILES_BUCKET_URL}${path}`
                        : "";
                case interfaces_1.FileLocation.GCS:
                    return yield this.getFileSignedUrl(path, location);
                case interfaces_1.FileLocation.URL:
                    return `${path}`;
            }
        });
    }
    getServerConfigSubject() {
        return this.serverConfigSubject;
    }
    getAuthenticatedAsObservable() {
        return this.authenticatedSubject.asObservable();
    }
};
WebSocketService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [job_service_service_1.JobService,
        flash_message_service_1.FlashMessageService,
        auth_service_1.AuthService,
        config_service_1.ConfigService])
], WebSocketService);
exports.WebSocketService = WebSocketService;


/***/ }),

/***/ "./src/app/spinner/spinner-consts.ts":
/*!*******************************************!*\
  !*** ./src/app/spinner/spinner-consts.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Taken from ngx-spinner package - https://github.com/Napster2210/ngx-spinner/blob/master/projects/ngx-spinner/src/lib/ngx-spinner.enum.ts
exports.spinnerDivCounts = {
    "la-ball-8bits": 16,
    "la-ball-atom": 4,
    "la-ball-beat": 3,
    "la-ball-circus": 5,
    "la-ball-climbing-dot": 4,
    "la-ball-clip-rotate": 1,
    "la-ball-clip-rotate-multiple": 2,
    "la-ball-clip-rotate-pulse": 2,
    "la-ball-elastic-dots": 5,
    "la-ball-fall": 3,
    "la-ball-fussion": 4,
    "la-ball-grid-beat": 9,
    "la-ball-grid-pulse": 9,
    "la-ball-newton-cradle": 4,
    "la-ball-pulse": 3,
    "la-ball-pulse-rise": 5,
    "la-ball-pulse-sync": 3,
    "la-ball-rotate": 1,
    "la-ball-running-dots": 5,
    "la-ball-scale": 1,
    "la-ball-scale-multiple": 3,
    "la-ball-scale-pulse": 2,
    "la-ball-scale-ripple": 1,
    "la-ball-scale-ripple-multiple": 3,
    "la-ball-spin": 8,
    "la-ball-spin-clockwise": 8,
    "la-ball-spin-clockwise-fade": 8,
    "la-ball-spin-clockwise-fade-rotating": 8,
    "la-ball-spin-fade": 8,
    "la-ball-spin-fade-rotating": 8,
    "la-ball-spin-rotate": 2,
    "la-ball-square-clockwise-spin": 8,
    "la-ball-square-spin": 8,
    "la-ball-triangle-path": 3,
    "la-ball-zig-zag": 2,
    "la-ball-zig-zag-deflect": 2,
    "la-cog": 1,
    "la-cube-transition": 2,
    "la-fire": 3,
    "la-line-scale": 5,
    "la-line-scale-party": 5,
    "la-line-scale-pulse-out": 5,
    "la-line-scale-pulse-out-rapid": 5,
    "la-line-spin-clockwise-fade": 8,
    "la-line-spin-clockwise-fade-rotating": 8,
    "la-line-spin-fade": 8,
    "la-line-spin-fade-rotating": 8,
    "la-pacman": 6,
    "la-square-jelly-box": 2,
    "la-square-loader": 1,
    "la-square-spin": 1,
    "la-timer": 1,
    "la-triangle-skew-spin": 1,
};


/***/ }),

/***/ "./src/app/spinner/spinner-service.service.ts":
/*!****************************************************!*\
  !*** ./src/app/spinner/spinner-service.service.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
const spinner_consts_1 = __webpack_require__(/*! ./spinner-consts */ "./src/app/spinner/spinner-consts.ts");
// Note: if you add icons to this enum, make sure you also add the corresponding load-awesome css file to client/angular.json
var SpinnerIcon;
(function (SpinnerIcon) {
    SpinnerIcon["Fire"] = "la-fire";
    SpinnerIcon["GridPulse"] = "la-ball-grid-pulse";
    SpinnerIcon["LineSpin"] = "la-line-spin-fade-rotating";
    SpinnerIcon["RotatingCircle"] = "la-ball-clip-rotate";
    SpinnerIcon["Ball8Bit"] = "la-ball-8bits";
    SpinnerIcon["Pacman"] = "la-pacman";
    SpinnerIcon["BallScale"] = "la-ball-scale";
    SpinnerIcon["Square"] = "la-square-loader";
})(SpinnerIcon = exports.SpinnerIcon || (exports.SpinnerIcon = {}));
var SpinnerSize;
(function (SpinnerSize) {
    SpinnerSize["sm"] = "la-sm";
    SpinnerSize["md"] = "";
    SpinnerSize["lg"] = "la-2x";
    SpinnerSize["xl"] = "la-3x";
})(SpinnerSize = exports.SpinnerSize || (exports.SpinnerSize = {}));
/**
 * Provides subjects to create/change/remove spinners. See also SpinnerComponent
 *
 * @export
 * @class SpinnerService
 */
let SpinnerService = class SpinnerService {
    constructor() {
        this.activeSpinners = new Map();
        this.activeSpinnersSubject = new rxjs_1.Subject();
    }
    getActiveSpinnersObservable() {
        return this.activeSpinnersSubject.asObservable();
    }
    getActiveSpinners() {
        return Array.from(this.activeSpinners).map(entry => entry[1]);
    }
    setSpinner(id, spinner) {
        if (typeof spinner.divCount === "undefined") {
            spinner.divCount = spinner_consts_1.spinnerDivCounts[spinner.icon.toString()];
        }
        this.activeSpinners.set(id, spinner);
        this.activeSpinnersSubject.next(this.getActiveSpinners());
    }
    updateSpinner(id, spinner) {
        const spinnerToUpdate = this.activeSpinners.get(id);
        if (typeof spinnerToUpdate === "undefined") {
            return false;
        }
        this.activeSpinners.set(id, Object.assign(spinnerToUpdate, spinner));
        return true;
    }
    removeSpinner(id) {
        this.activeSpinners.delete(id);
        this.activeSpinnersSubject.next(this.getActiveSpinners());
    }
    removeSpinnersStartWith(match) {
        const toDelete = new Set();
        this.activeSpinners.forEach((spinner, key) => {
            if (key.startsWith(match)) {
                toDelete.add(key);
            }
        });
        toDelete.forEach(key => this.activeSpinners.delete(key));
    }
};
SpinnerService = __decorate([
    core_1.Injectable({
        providedIn: "root",
    }),
    __metadata("design:paramtypes", [])
], SpinnerService);
exports.SpinnerService = SpinnerService;


/***/ }),

/***/ "./src/app/spinner/spinner.component.html":
/*!************************************************!*\
  !*** ./src/app/spinner/spinner.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- Adapted from ngx-spinner package -->\n<div\n  [ngClass]=\"{\n    'spinners-overlay': fullScreenOverlay,\n    'spinners-visible': showSpinners\n  }\"\n  [ngStyle]=\"{ 'z-index': zIndex ? zIndex : '' }\"\n>\n  <div [ngClass]=\"{ 'spinners-overlay-container': fullScreenOverlay }\">\n    <div\n      [class]=\"'spinner-icon ' + spinnerIconClass + ' ' + spinnerIconSize\"\n      [ngStyle]=\"{ color: color }\"\n    >\n      <div *ngFor=\"let i of spinnerIconDivArray\"></div>\n    </div>\n\n    <div class=\"spinners-container\">\n      <div class=\"spinner\" *ngFor=\"let spinner of activeSpinners\">\n        <div\n          class=\"loading-text text-overflow-ellipsis\"\n          [ngStyle]=\"{ color: color }\"\n          *ngIf=\"spinner.name !== ''\"\n        >\n          {{ spinner.name }}\n        </div>\n\n        <p-progressBar\n          styleClass=\"spinner-progressbar\"\n          [ngStyle]=\"{ 'background-color': color + ' !important' }\"\n          [value]=\"spinner.progress\"\n          *ngIf=\"spinner.progress !== undefined\"\n        ></p-progressBar>\n      </div>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/spinner/spinner.component.scss":
/*!************************************************!*\
  !*** ./src/app/spinner/spinner.component.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "div.spinners-overlay {\n  touch-action: none;\n  pointer-events: none;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  background: rgba(0, 0, 0, 0.25);\n  z-index: 1200;\n  transition: opacity linear 0.2s;\n  padding: 30px 20px 10px 20px;\n  border-radius: 4px;\n  transform: translate(-50%, -50%);\n  min-height: 160px;\n  opacity: 0; }\n\ndiv.spinners-overlay.spinners-visible {\n  opacity: 1;\n  pointer-events: auto;\n  touch-action: auto; }\n\n.spinners-container {\n  padding: 0 20px;\n  overflow-y: auto;\n  overflow-y: overlay;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  pointer-events: auto;\n  margin-top: 10px;\n  width: 400px;\n  max-height: calc(100vh - 250px); }\n\n.spinner-progressbar {\n  width: 50vw;\n  max-width: 370px;\n  background-color: #ffffff56 !important; }\n\n.spinner-progressbar.ui-progressbar .ui-progressbar-value {\n  background: #ffffff !important; }\n\n.spinner {\n  padding: 5px 0; }\n\n.loading-text {\n  color: white;\n  text-align: center;\n  padding: 10px; }\n\n.spinner-icon {\n  margin: auto; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXdhbm1hY2Jvb2svRG9jdW1lbnRzL2dlb3dlYi1lZXMvY2xpZW50L3NyYy9hcHAvc3Bpbm5lci9zcGlubmVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLG9CQUFvQjtFQUNwQiwyQkFBbUI7RUFBbkIsd0JBQW1CO0VBQW5CLG1CQUFtQjtFQUNuQiwwQkFBa0I7RUFBbEIsdUJBQWtCO0VBQWxCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCwrQkFBK0I7RUFDL0IsYUFBYTtFQUNiLCtCQUErQjtFQUMvQiw0QkFBNEI7RUFDNUIsa0JBQWtCO0VBQ2xCLGdDQUFnQztFQUNoQyxpQkFBaUI7RUFDakIsVUFBVSxFQUFBOztBQUdaO0VBQ0UsVUFBVTtFQUNWLG9CQUFvQjtFQUNwQixrQkFBa0IsRUFBQTs7QUFJcEI7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQiw0Q0FBNEM7RUFDNUMsb0JBQW9CO0VBQ3BCLGdCQUFnQjtFQUNoQixZQUFZO0VBQ1osK0JBQStCLEVBQUE7O0FBR2pDO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUVoQixzQ0FBc0MsRUFBQTs7QUFHeEM7RUFDRSw4QkFBOEIsRUFBQTs7QUFHaEM7RUFDRSxjQUFjLEVBQUE7O0FBR2hCO0VBQ0UsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixhQUFhLEVBQUE7O0FBR2Y7RUFDRSxZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9zcGlubmVyL3NwaW5uZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBPdmVycmlkZSBuZ3gtc3Bpbm5lciBzdHlsZXNcbmRpdi5zcGlubmVycy1vdmVybGF5IHtcbiAgdG91Y2gtYWN0aW9uOiBub25lO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XG4gIHotaW5kZXg6IDEyMDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgbGluZWFyIDAuMnM7XG4gIHBhZGRpbmc6IDMwcHggMjBweCAxMHB4IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIG1pbi1oZWlnaHQ6IDE2MHB4O1xuICBvcGFjaXR5OiAwO1xufVxuXG5kaXYuc3Bpbm5lcnMtb3ZlcmxheS5zcGlubmVycy12aXNpYmxlIHtcbiAgb3BhY2l0eTogMTtcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIHRvdWNoLWFjdGlvbjogYXV0bztcbn1cblxuLy8gQ29udGFpbmVyIGNvbnRhaW5pbmcgc3Bpbm5lciBuYW1lICsgcHJvZ3Jlc3MgYmFyIChkb2VzIE5PVCBjb250YWluIHNwaW5uZXIgaWNvbilcbi5zcGlubmVycy1jb250YWluZXIge1xuICBwYWRkaW5nOiAwIDIwcHg7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJmbG93LXk6IG92ZXJsYXk7XG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO1xuICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgd2lkdGg6IDQwMHB4O1xuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMjUwcHgpO1xufVxuXG4uc3Bpbm5lci1wcm9ncmVzc2JhciB7XG4gIHdpZHRoOiA1MHZ3O1xuICBtYXgtd2lkdGg6IDM3MHB4O1xuXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY1NiAhaW1wb3J0YW50O1xufVxuXG4uc3Bpbm5lci1wcm9ncmVzc2Jhci51aS1wcm9ncmVzc2JhciAudWktcHJvZ3Jlc3NiYXItdmFsdWUge1xuICBiYWNrZ3JvdW5kOiAjZmZmZmZmICFpbXBvcnRhbnQ7XG59XG5cbi5zcGlubmVyIHtcbiAgcGFkZGluZzogNXB4IDA7XG59XG5cbi5sb2FkaW5nLXRleHQge1xuICBjb2xvcjogd2hpdGU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogMTBweDtcbn1cblxuLnNwaW5uZXItaWNvbiB7XG4gIG1hcmdpbjogYXV0bztcbn1cbiJdfQ== */"

/***/ }),

/***/ "./src/app/spinner/spinner.component.ts":
/*!**********************************************!*\
  !*** ./src/app/spinner/spinner.component.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const spinner_service_service_1 = __webpack_require__(/*! ./spinner-service.service */ "./src/app/spinner/spinner-service.service.ts");
/**
 * Handles display spinners (loading/progress bars). Listens for changes from SpinnerService
 *
 * @export
 * @class SpinnerComponent
 */
let SpinnerComponent = class SpinnerComponent {
    constructor(spinnerService, cdr) {
        this.spinnerService = spinnerService;
        this.cdr = cdr;
        this.fullScreenOverlay = false;
        this.defaultIconSize = spinner_service_service_1.SpinnerSize.lg;
        this.spinnerIconClass = "";
        this.spinnerIconSize = this.defaultIconSize;
        this.spinnerIconDivArray = [];
        this.activeSpinners = [];
        this.showSpinners = false;
    }
    ngOnInit() {
        if (typeof this.color === "undefined") {
            this.color = this.fullScreenOverlay ? "#ffffff" : "#333333";
        }
        this.updateSpinners(this.spinnerService.getActiveSpinners());
        // Update active spinner array from SpinnerService active spinner map
        this.spinnerSubscription = this.spinnerService
            .getActiveSpinnersObservable()
            .subscribe(spinners => this.updateSpinners(spinners));
    }
    updateSpinners(spinners) {
        this.activeSpinners = spinners
            // Only show spinners which match the 'target' input
            .filter(spinner => (typeof this.spinnerTarget === "undefined" &&
            typeof spinner.target === "undefined") ||
            this.spinnerTarget === spinner.target);
        // Set spinner icon to the FIRST spinner
        if (this.activeSpinners.length > 0) {
            this.spinnerIconClass = this.activeSpinners[0].icon;
            this.spinnerIconSize =
                "size" in this.activeSpinners[0]
                    ? this.activeSpinners[0].size
                    : this.defaultIconSize;
            this.spinnerIconDivArray = Array(this.activeSpinners[0].divCount)
                .fill(0)
                .map((x, i) => i);
            this.showSpinners = true;
        }
        else {
            this.spinnerIconClass = "";
            this.showSpinners = false;
        }
        // This is needed to force propagate changes to the view
        this.cdr.detectChanges();
    }
    ngOnDestroy() {
        if (typeof this.spinnerSubscription !== "undefined") {
            this.spinnerSubscription.unsubscribe();
        }
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "zIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SpinnerComponent.prototype, "fullScreenOverlay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "color", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SpinnerComponent.prototype, "spinnerTarget", void 0);
SpinnerComponent = __decorate([
    core_1.Component({
        selector: "app-spinner",
        template: __webpack_require__(/*! ./spinner.component.html */ "./src/app/spinner/spinner.component.html"),
        encapsulation: core_1.ViewEncapsulation.None,
        styles: [__webpack_require__(/*! ./spinner.component.scss */ "./src/app/spinner/spinner.component.scss")]
    }),
    __metadata("design:paramtypes", [spinner_service_service_1.SpinnerService,
        core_1.ChangeDetectorRef])
], SpinnerComponent);
exports.SpinnerComponent = SpinnerComponent;


/***/ }),

/***/ "./src/app/util/callback.pipe.ts":
/*!***************************************!*\
  !*** ./src/app/util/callback.pipe.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// From https://stackoverflow.com/a/43310428
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
let CallbackPipe = class CallbackPipe {
    transform(items, callback) {
        if (!items || !callback) {
            return items;
        }
        return items.filter(item => callback(item));
    }
};
CallbackPipe = __decorate([
    core_1.Pipe({
        name: "callback",
        pure: false,
    })
], CallbackPipe);
exports.CallbackPipe = CallbackPipe;


/***/ }),

/***/ "./src/app/util/download-file.ts":
/*!***************************************!*\
  !*** ./src/app/util/download-file.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Adapted from https://stackoverflow.com/a/33542499
function downloadFile(filename, data, type = "text/plain") {
    const blob = new Blob([data], { type });
    if (window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename);
    }
    else {
        const elem = window.document.createElement("a");
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename;
        document.body.appendChild(elem);
        elem.click();
        document.body.removeChild(elem);
        // TODO: should window.URL.revokeObjectURL(blob):
    }
}
exports.downloadFile = downloadFile;


/***/ }),

/***/ "./src/app/util/form-validators.ts":
/*!*****************************************!*\
  !*** ./src/app/util/form-validators.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ForbiddenValidatorDirective_1;
const forms_1 = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
function validateCustomValidator(customValidator) {
    return (control) => {
        if (control.value === null || customValidator.isValid(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return { customValidator: true };
    };
}
exports.validateCustomValidator = validateCustomValidator;
let ForbiddenValidatorDirective = ForbiddenValidatorDirective_1 = class ForbiddenValidatorDirective {
    validate(control) {
        if (control.value === null || this.customValidator.isValid(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return { customValidator: true };
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ForbiddenValidatorDirective.prototype, "customValidator", void 0);
ForbiddenValidatorDirective = ForbiddenValidatorDirective_1 = __decorate([
    core_1.Directive({
        selector: "[customValidator]",
        providers: [
            {
                provide: forms_1.NG_VALIDATORS,
                useExisting: ForbiddenValidatorDirective_1,
                multi: true,
            },
        ],
    })
], ForbiddenValidatorDirective);
exports.ForbiddenValidatorDirective = ForbiddenValidatorDirective;


/***/ }),

/***/ "./src/app/util/keypress.ts":
/*!**********************************!*\
  !*** ./src/app/util/keypress.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function onKeypress(evt, key, fn, ...args) {
    if (evt.key === key) {
        fn(...args);
    }
}
exports.onKeypress = onKeypress;


/***/ }),

/***/ "./src/app/util/web-workers/web-worker.ts":
/*!************************************************!*\
  !*** ./src/app/util/web-workers/web-worker.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WebWorkerType;
(function (WebWorkerType) {
    WebWorkerType["GeotiffLoader"] = "assets/scripts/geotiff-web-workerV2.js";
})(WebWorkerType = exports.WebWorkerType || (exports.WebWorkerType = {}));
var WebWorkerErrorMessages;
(function (WebWorkerErrorMessages) {
    WebWorkerErrorMessages["WorkerTerminated"] = "WebWorker terminated";
})(WebWorkerErrorMessages = exports.WebWorkerErrorMessages || (exports.WebWorkerErrorMessages = {}));
// TODO: Maybe add some queueing?
/**
 * Note: currently not used
 *
 * @export
 * @class WebWorker
 */
class WebWorker {
    constructor(type) {
        this.workerPromises = new Map();
        this.type = type;
        this.worker = new Worker(type);
        this.worker.onmessage = this.onMessageReceived.bind(this);
        this.worker.onerror = this.onError.bind(this);
    }
    onMessageReceived(message) {
        if (typeof message.data.args !== "undefined" &&
            this.workerPromises.has(message.data.args.key)) {
            if ("error" in message.data) {
                this.workerPromises
                    .get(message.data.args.key)
                    .reject(message.data.error);
            }
            else {
                this.workerPromises.get(message.data.args.key).resolve(message.data);
            }
        }
        else {
            console.log(`Webworker ${this.type} received message: ${message.data}`);
        }
    }
    onError(message) {
        console.log(message);
        this.workerPromises.forEach(p => p.reject(message.data));
    }
    run(args) {
        return new Promise((resolve, reject) => {
            this.workerPromises.set(args.key, { resolve, reject });
            this.worker.postMessage(args);
        });
    }
    terminate() {
        this.workerPromises.forEach(p => p.reject(WebWorkerErrorMessages.WorkerTerminated));
        this.worker.terminate();
    }
}
exports.WebWorker = WebWorker;


/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
exports.environment = {
    production: false,
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! core-js/es7/reflect */ "./node_modules/core-js/es7/reflect.js");
const core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
const platform_browser_dynamic_1 = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
const app_module_1 = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
const environment_1 = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");
if (environment_1.environment.production) {
    core_1.enableProdMode();
}
platform_browser_dynamic_1.platformBrowserDynamic()
    .bootstrapModule(app_module_1.AppModule)
    .catch(err => console.error(err));


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/pawanmacbook/Documents/geoweb-ees/client/src/main.ts */"./src/main.ts");


/***/ }),

/***/ 1:
/*!**************************************!*\
  !*** ./require-utils.node (ignored) ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 10:
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!************************************************!*\
  !*** ../../node/read-file-sync.node (ignored) ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!********************************************!*\
  !*** ../../node/write-file.node (ignored) ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!****************************************************!*\
  !*** ../node/utils/to-array-buffer.node (ignored) ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 5:
/*!*******************************!*\
  !*** asciify-image (ignored) ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 6:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 7:
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 8:
/*!***********************!*\
  !*** https (ignored) ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 9:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map